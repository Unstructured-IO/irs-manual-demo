[
  {
    "element_id": "57c80547a4fb7190d2719c112b3ccd74",
    "text": "Department of the Treasury Internal Revenue Service",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 1
    }
  },
  {
    "element_id": "62b8b069e6fd9a2b270bf570567dc269",
    "text": "2.5.3.4, Removed subsection1 Purpose from under Section 1 Introduction and moved to section 1 Program Scope and Objective",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 1
    }
  },
  {
    "element_id": "cf1d66cdab7c8259d008a7cd0966948b",
    "text": "2.5.3.7, Changed title from General Programming to COBOL Programming",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 2
    }
  },
  {
    "element_id": "a0affabd0d05fe1f0eeeb0dacc9545bd",
    "text": "2.5.3.7.4(3)(b), COBOL Programming Standards - Added Environment Division and sub-list : 1. Conﬁguration Section: a Source Computer, b. Object Computer 2. Input/Output section: a) File-Control, b) I/O Control",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 2
    }
  },
  {
    "element_id": "bebcf82acc5c6d91727ea4db8ca50234",
    "text": "References, Added IRM 10.8.1 Information Technology (IT) Security, Policy Guidance",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "1b6e6d7cf97fba54571465a584b28f55",
    "text": "(3), General Programming - Changed line Begin to insert comment lines in these speciﬁed to Begin to insert comment lines, statements, and code in these areas",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "f8d97bb4d5f185f3dca3c34d2cca0cc9",
    "text": "a. a. IDENTIFICATION DIVISION",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "6e90ecc5511f8be596709672d03860cf",
    "text": "Added new sub",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "bad3f90a90fc27dc3ec5f6006c4515b7",
    "text": "bullet list b. b. DATA DIVISION:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "7f741ea65296ad791e13c95ed23b246f",
    "text": "Moved to line c, and replaced with ENVIRONMENT DIVISION with subsection Conﬁguration Section c. c. WORKING STORAGE SECTION",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "cdc497d95bbc250b67eae772bb247868",
    "text": "Replaced with. DATA DIVISION, and moved WORKING",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "d82f3ada4002959a558e07c86f268ef8",
    "text": "STORAGE SECTION under as a bullet d. d. LINKAGE SECTION",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "2764134512821b0dbb6d9ad0ddad8ef1",
    "text": "Moved under c. DATA DIVISION e. e. PROCEDURE DIVISION",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "84dd2757903347fd0dd5c05d7808dda0",
    "text": "Moved to line d. f. Removed line f.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "a1923adb85084099e1cfa47aeeee296d",
    "text": "Any section within the PROCEDURE DIVISION",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "9b87d5334347daebe3018df5251b7ed3",
    "text": "g. Removed line g.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "28d4b0cc779243809deda6716b8c8a87",
    "text": "Any paragraph /section that represents a Structure Chart module with the PROCEDURE DIVISION",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 7
    }
  },
  {
    "element_id": "1e40feedb6d8e174d473a369b3da23fd",
    "text": "AUDIENCE",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 8
    }
  },
  {
    "element_id": "40dacb5575a6756fc9732faebabdad4e",
    "text": "The audience intended for this transmittal is personnel responsible for engineering, developing, or maintaining Agency software systems identiﬁed in the Enterprise Architecture. This engineering, development, and maintenance includes work performed by IRS management, Information Technology government and contractors.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 8
    }
  },
  {
    "element_id": "a9360e0212a4d173581c91da68494d02",
    "text": "Table of Contents",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 9
    }
  },
  {
    "element_id": "6b2f7fc00aab0800d426a4dc35f55278",
    "text": "and Source Code Standards",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "a148b2a7869f2146e4e405374aa0f253",
    "text": ") Purpose: This Internal Revenue Manual (IRM) establishes standards and guidelines to promote the development of maintainable, portable, reliable and software applications in all Service used and approved programming languages as outlined in this IRM. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "d9fc2ce9294fb0906db6629fd25b2b15",
    "text": ") Audience: This guidance applies to all IRS Senior Leadership, Information technology (IT) managers at all levels. Also included are personnel for: engineering, developing, or maintaining Agency software systems in the Enterprise Architecture. This engineering, development, and mainte- nance include services performed by both government employees and contracts. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "e69b70b15f14abaa40c7bb32bdfdb32e",
    "text": ") Policy Owner: The current policy owner is the Associate Chief Information Officer (ACIO), Application Development. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "d855f6ea9d6a6864844b28a0ad82422a",
    "text": ") Program Owner: The current program owner is the Director, Technical tion Organization (TIO). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "d4d7be1e5ca35b22064ed12a33c05e4f",
    "text": ") Primary stakeholders: a. Application Development (AD) - AD staff, management, and employees b. Developers - government and contractual employees c. Engineers - government and contractual employees d. IRS IT managers e. Quality Assurance (QA) - IRS QA staff, managers, and contractual employees (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "f20c2f049650d89705eeaefb8f36561c",
    "text": ") In response to Government Accountability Office (GAO-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "5f9aa3ac7bc2c664765d1295c955cf40",
    "text": ") Technology (IT): IRS Needs to Address Signiﬁcant Risks to Tax Processing- Investments Performance and Risks, June",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "0f607384138a1a311da543caabfa5287",
    "text": "report provided to Congressional Committees. IRS IT recognized the importance continuously improving the performance of IRS Major IT Investments. IT organizations’ Mainframe systems, using legacy programming languages: Common Business Oriented Language (COBOL), Assembler Language (ALC), Java programming; etc., IRS Application Development (AD) has lished Risk Management strategies and guidance to identify, analyze, and monitor risks and issues for system development standards (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "9152f9d080cb665f1cb7554ed5e6acef",
    "text": ") IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "0a43ed085865097cc36e5dab85df1887",
    "text": "System Development, establishes the System Development for the IRS (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "d0aa1f967c97e0f957c08c16b397978b",
    "text": ") This IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "3a758ae2dce433b17b1f7fe2086b6e27",
    "text": "is consistent with the President’s Executive Order",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "eb0c0278e0c8de9446605d6af370f46e",
    "text": ", Strengthening the Cybersecurity of Federal Networks and Critical (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "4e4ffd9ff46405e7235ef3cf34f87391",
    "text": ") Government Accountability Office, (GAO) (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "4307f09295c10b6f117e2a1a2cbe12ba",
    "text": ") Treasury Inspector General Tax Administration (TIGTA) (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "b2c4a8ddd095504d89477cbb8fb089b6",
    "text": ") Presidential American Technology Council,",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "f75be2dbf66a65bd133225e356412a66",
    "text": ") Administrator of the General Services Administration (GSA) (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "973eec18533bcc22e8502509bd4b2f1f",
    "text": ") Federal Information Security Modernization Act (FISMA) of",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "172c2d930732087cbc6ff656f9d3e4b6",
    "text": ") Director of Office of Management and Budget (OMB) (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "6726c0a6ddbc7e77d189e9318f57a047",
    "text": ") Internal Revenue Manual",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "5b34da2f3b35e2c68b24731a3649fe0d",
    "text": "Application Development (AD)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "95d490d0371c71cd50672ec3eefba967",
    "text": "AD staff, management, employees Developers",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "05c5a070891afbc98304e8f32aded9d4",
    "text": "government and contractual employees Engineers",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "b555411b20b64c1449fd378aedd99619",
    "text": "government and contractual employees IRS IT managers Quality Assurance (QA)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "a9146cccc042f5d66abd442b7decf674",
    "text": "IRS QA staff, managers, and employees",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "c499b6524211d13308b9aefece1e6e74",
    "text": "In response to Government Accountability Office (GAO-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "4e476a8797221197f3038796c7dde677",
    "text": ") Information Technology (IT): IRS Needs to Address Signiﬁcant Risks to Tax Processing- Investments Performance and Risks, June",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "b54fcdaee0cf3f20fa8324364fef577c",
    "text": "report provided to Congressional Committees. IRS IT recognized the importance of continuously improving the performance of IRS Major IT Investments. IT IRS organizations’ Mainframe systems, using legacy programming languages: Common Business Oriented Language (COBOL), Assembler Language Code (ALC), Java programming; etc., IRS Application Development (AD) has estab- lished Risk Management strategies and guidance to identify, analyze, and monitor risks and issues for system development standards",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "5e37cb733dab458cd256e92cb6a669bc",
    "text": "for the IRS This IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "3a758ae2dce433b17b1f7fe2086b6e27",
    "text": "is consistent with the President’s Executive Order",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "c72cb492f12dbbcd5d32f7bb55d1281d",
    "text": ", Strengthening the Cybersecurity of Federal Networks and Critical Government Accountability Office, (GAO) Treasury Inspector General Tax Administration (TIGTA) Presidential American Technology Council,",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "1fc4566aaf3a4aa29cc6969e017e1aaa",
    "text": "Administrator of the General Services Administration (GSA) Federal Information Security Modernization Act (FISMA) of",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "0ca47dee9550e9cb22d62a9ef3515c00",
    "text": "Director of Office of Management and Budget (OMB)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "6c8ebd25cd290eafce1daaae4d3d4698",
    "text": "This IRM 2.5.3 is consistent with the President’s Executive Order 13800, Strengthening the Cybersecurity of Federal Networks and Critical",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 17
    }
  },
  {
    "element_id": "3445cc66851fbe595cfefed6a376b77d",
    "text": "agement Act with the goal of delivering effective and professional customer service to business units and support functions within the IRS. These proce",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 18
    }
  },
  {
    "element_id": "e43d56ab527615e3039867baa576e2c9",
    "text": "dures are done as the following: a. Provide valid risk mitigated solutions to security inquisitions. b. Respond to incidents quickly, and effectively in order to eliminate risks/ threats. c. Ensure all IT security policies and procedures are actively developed, and updated. d. Provide security advice to IRS constituents, and proactively monitor robust security program for any required modiﬁcations or Application Development’s chain of command and responsibilities include: a. Commissioner: Oversees and provides overall strategic direction for IRS. The Commissioner’s and Deputy Commissioner’s main focus is the IRS’s services programs, enforcement, operations support, and nizations. Additionally, the Commissioner’s vision is to enhance for the nation’s taxpayers, balancing appropriate enforcement of the nation’s tax laws while respecting taxpayers’ rights. b. Deputy Commissioner, Operation Support (DCOS): Oversees the erations of Agency",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 18
    }
  },
  {
    "element_id": "9bd8772d14e3d97463daf3f8be84ec90",
    "text": "Wide Shared Services: Chief Financial Officer, Capital Office, Information Technology, Planning Programming and Oversight and Privacy, and Governmental Liaison and Disclosure. c. Chief Information Officer (CIO): The CIO leads Information and advises the Commissioner on Information Technology matters, manages all IRS IT resources, and is responsible for delivering and taining modernized information systems throughout the IRS. Assisting Chief Technology Officer (CTO) is the Deputy Chief Information Officer Operations. d. Application Development (AD), Associate Chief Information Officer (ACIO): The AD ACIO reports directly to the CIO; oversees and the quality of: building, unit testing, delivering, and maintaining enterprise",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 18
    }
  },
  {
    "element_id": "335e868d7a15a0ae3e4a8966869a3c55",
    "text": "wide applications systems to support modernized and systems in the production environment to achieve the mission of the service. e. Deputy AD Associate CIO (ACIO): The Deputy AD ACIO reports to the AD ACIO, and is responsible for:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 18
    }
  },
  {
    "element_id": "a8143c61931c69a5e85dd562defe0ad7",
    "text": "Leading all strategic priorities to enable the AD Vision, IT Technology Roadmap and the IRS future state",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 18
    }
  },
  {
    "element_id": "aa2b99a6c06f343ff13ca6e4194c0892",
    "text": "Executive planning, and management of the development which ensures all ﬁling season programs are developed, tested, and delivered on",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 18
    }
  },
  {
    "element_id": "8012340d09b889a93bef50241c195aa6",
    "text": "time and within budget",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 18
    }
  },
  {
    "element_id": "b07fbd650c3ec7367a3ff4aaf54b7528",
    "text": "Provide valid risk mitigated solutions to security inquisitions. Respond to incidents quickly, and effectively in order to eliminate risks/ threats. Ensure all IT security policies and procedures are actively developed, and updated. Provide security advice to IRS constituents, and proactively monitor IRS robust security program for any required modiﬁcations or",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 18
    }
  },
  {
    "element_id": "65f118048c7d124cdd1108384ce6295a",
    "text": "Provide security advice to IRS constituents, and proactively monitor IRS robust security program for any required modiﬁcations or",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 18
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "10b0c90381d7b2efd35f30deaf1a4ce0",
    "text": "Application Development: Responsible for building, testing, delivering, and maintaining integrated information applications systems, e.g. software solutions, to support modernized systems and production environment to achieve the mission and objectives of the service. Additionally, AD does the following:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "beedf21d3b6c3d83aad7dab8b5c629ed",
    "text": "maintaining integrated information applications systems, e.g. software solutions, to support modernized systems and production environment to achieve the mission and objectives of the service. Additionally, AD does the following: a. Work in partnership with customers to improve the quality of the IRS formation systems, products and services. b. Maintains the effectiveness and enhance the integration of IRS base production systems and infrastructure while modernizing core business systems and infrastructure. c. Establishes and maintains rigorous contract and ﬁscal management, oversight, quality assurance, and program risk management processes ensure that strategic plans and priorities are being met. d. Provides quality assessment/assurance of deliverables and processes. e. Creates oversight support of enterprise modernization goals in tion with Information Technology HR initiatives and policy. f. Responsible for delivering ﬁling season projects, and implementing Economic Stimulus changes. g. AD has the following Domains: • Compliance • Corporate Data (CD) • Customer Service (CS) • Data Delivery Service (DDS) • Delivery Management; Quality Assurance (DMQA) • Identity & Access Management (IAM) • Internal Management (IA) • Submission Processing (SP) • Technical Integration Organization (TIO) (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "b0cdbc87fe6a8d8291d6e3ddc51e7483",
    "text": ") Director, Compliance: Provides executive direction for a wide suite of ance domain focused applications and oversee the IT Software organization to ensure the quality of production ready applications. a. Directs and oversees an uniﬁed cross-divisional approach to strategies needing collaboration pertaining for the following: • Abusive tax avoidance transactions needing a coordinated response • Cross-divisional technical issues • Emerging issues • Service-wide operational procedures (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "a7058895ab3feaf26d163ea9b6a2ad6b",
    "text": ") Director, AD Corporate Data: Directs and oversees the provisioning of au- thoritative databases, refund identiﬁcation, notice generation, and reporting. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "ca427d5303f9b87ffff309c8b37ccff4",
    "text": ") Director, Customer Service: Directs and oversees Customer Service for the IT Enterprise Service Desk ensuring quality customer to employee tionship. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "f9c0219a135293d0d1dd98fc1be5b587",
    "text": ") Director, Data Delivery Services: Oversees and ensures the quality of with repeatable processes in a scalable environment. The Enterprise Data Strategy is to transform DDS into a data centric organization dedicated to deliver Data as a Service (Da",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "1304d3b0a8a213f279cdb0f0ecc99a69",
    "text": ") through: • Innovation - new methods, discoveries • Renovation - streamline or automate • Motivate - incent and enable individuals Internal Revenue Manual",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "2594769bf420a4a9f1499e341b6ed91c",
    "text": "Work in partnership with customers to improve the quality of the IRS formation systems, products and services. Maintains the effectiveness and enhance the integration of IRS base production systems and infrastructure while modernizing core business systems and infrastructure. Establishes and maintains rigorous contract and ﬁscal management, oversight, quality assurance, and program risk management processes ensure that strategic plans and priorities are being met. Provides quality assessment/assurance of deliverables and processes. Creates oversight support of enterprise modernization goals in tion with Information Technology HR initiatives and policy. Responsible for delivering ﬁling season projects, and implementing Economic Stimulus changes. AD has the following Domains:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "4a109cc49467be33772416ac924cc572",
    "text": "Compliance",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "fc8d6e0f2f081e38ee8b074927b154a7",
    "text": "Corporate Data (CD)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "bd3d389eb6133be235e423508277448d",
    "text": "Customer Service (CS)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "e068e33c8c24927d80028376bbb4e51c",
    "text": "Data Delivery Service (DDS)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "f863f8e3b685c12f025926b0d8168700",
    "text": "Delivery Management; Quality Assurance (DMQA)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "2fad103e407705dfa61de927c1c6c836",
    "text": "Identity & Access Management (IAM)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "7025d6fa2bb71f51aa6e7c6c507ff4d9",
    "text": "Internal Management (IA)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "003f08189a511afa9f8b6b05cbedec4b",
    "text": "• Submission Processing (SP) • Technical Integration Organization (TIO) (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "b0cdbc87fe6a8d8291d6e3ddc51e7483",
    "text": ") Director, Compliance: Provides executive direction for a wide suite of ance domain focused applications and oversee the IT Software organization to ensure the quality of production ready applications. a. Directs and oversees an uniﬁed cross-divisional approach to strategies needing collaboration pertaining for the following: • Abusive tax avoidance transactions needing a coordinated response • Cross-divisional technical issues • Emerging issues • Service-wide operational procedures (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "a7058895ab3feaf26d163ea9b6a2ad6b",
    "text": ") Director, AD Corporate Data: Directs and oversees the provisioning of au- thoritative databases, refund identiﬁcation, notice generation, and reporting. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "ca427d5303f9b87ffff309c8b37ccff4",
    "text": ") Director, Customer Service: Directs and oversees Customer Service for the IT Enterprise Service Desk ensuring quality customer to employee tionship. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "f9c0219a135293d0d1dd98fc1be5b587",
    "text": ") Director, Data Delivery Services: Oversees and ensures the quality of with repeatable processes in a scalable environment. The Enterprise Data Strategy is to transform DDS into a data centric organization dedicated to deliver Data as a Service (Da",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "fe373a3c3786f7dab9ff3d2238276888",
    "text": ") through: • Innovation - new methods, discoveries • Renovation - streamline or automate • Motivate - incent and enable individuals",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "2cedd8da41534b7f7c288ed0977c3ace",
    "text": "(6) Director, Customer Service: Directs and oversees Customer Service Support for the IT Enterprise Service Desk ensuring quality customer to employee rela-",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "389fdf62a9a9e5dae14ef0d435c00619",
    "text": "Innovation",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "ff5fde8842a229f1f158bfdd7ccf5311",
    "text": "new methods, discoveries Renovation",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "5395853be48d66c8cfcfca5ced024f38",
    "text": "streamline or automate Motivate",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "13af51fe43718919e06ff9e4d01a10a9",
    "text": "incent and enable",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 19
    }
  },
  {
    "element_id": "91533e204e6035df25b1425a3034fa02",
    "text": "Systems (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "f3d03f2c65380989c5842e0fbe40bd58",
    "text": ") Director, Delivery Management & Quality Assurance (DMQA): • Executes the mission of DMQA by ensuring AD has a coordinated, cross-domain, and cross-organizational approach to delivering AD systems and software applications • Reports to the AD ACIO, and chairs the AD Risk Review Board. • Chairperson, Conﬁguration Control Board, see IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "ccf7513dbf1d8cf39499cb24a1549876",
    "text": "• Government Sponsor, Conﬁguration Control Board, see IRM (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "b37c53189621cfe697bb9b95ce9561a7",
    "text": ") Director, Identity & Access Management (IAM) Organization: Provides oversight and direction for continual secure online interaction by veriﬁcation and establishing an individual’s identity before providing access to taxpayer information “identity prooﬁng” while staying compliant within federal security requirements. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "227f385ae16b5a20dead78d0bde5ccd5",
    "text": ") Director, Internal Management: Provides oversight for the builds, tests, eries, refund identiﬁcation, notice generation, and reporting. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "7b72702980359e856eee31459874e905",
    "text": ") Director, Submission Processing: Provides oversight to an organization over",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "5c1c3edd78b8b59985834c30aea3e386",
    "text": "employees, comprised of: a headquarters staff responsible for veloping program policies and procedures, ﬁve W&I processing centers, seven commercially operated lockbox banks. Responsible for the more than",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "a92819fe705569c74f059f3f6bcc6f61",
    "text": "million individual and business tax returns. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "af67e3757bbec79b879b9e82dec32671",
    "text": ") Director, Technical Integration Office: Provides strategic technical tion oversight ensuring applicable guidance, collaboration, and technical integration issues and quality assurance for the Applications ment portfolio. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "9cf04ac984ab053b067aecdbcd462515",
    "text": ") The Enterprise Program Management Office (EPMO) is responsible for the delivery of integrated solutions for several of the IRS’s large scaled EPMO plays a key role in establishing change, conﬁguration, release plans; and implementing new information system functional capabilities. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "332211284920d3bec7e685150a360405",
    "text": ") The EPMO is the primary partner with the business for programs under purview, and collaborates with IT delivery partners (AD, ES, EOPS, and the other ACIO areas) to deliver required capabilities. This structure positions organization to maintain a strong core function to optimize their operations. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "610e8d922519085bb31a5d57915250fd",
    "text": ") The Enterprise Program Controls (EPC) Office is the lead for EPMO tion Technology enterprise-wide program management functions, and assist with the Applications Development (AD) organization in cross domain for a variety of program management disciplines. The EPC office is of seven sections: Business Operations, Program Support Services, Invest- ment & Contract Management, Program Oversight & Reporting, Communications & Organization Readiness, Enterprise Transition Office, and Technical Integration. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "38ac64267e022aba2e8ec8bca3c8dbe9",
    "text": ") The controls established in this Internal Revenue Manual (IRM) apply to Service personnel responsible for developing or maintaining the Service’s plication systems or software applications, identiﬁed in the IRS Enterprise Architecture. Service personnel who contract for development or of these systems/software applications must ensure contracts comply with these controls.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "8e36326281e534d77cc0086e74090543",
    "text": "Director, Delivery Management & Quality Assurance (DMQA):",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 20
    }
  },
  {
    "element_id": "a4aa03b1e6f368e10dad77b6eac23d79",
    "text": "Programming and Source Code Standards",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "44ead6e5ad5ec42ba16e73b5c30099dd",
    "text": "The following are supplement references on the development of portable, reliable, and secure software applications. • The Elements of Programming Style, ISBN:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "3ed63836e397566854dd08ee67e5f109",
    "text": ", Brian W. Kernighan and P. J. Plauger • IBM High Level Assembler for z/OS Language Reference V",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "8c2574892063f995fdf756bce07f46c1",
    "text": "R",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "735e0c8a9d547033755bcb9b3d54f9c4",
    "text": "• IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "ac82696536be22853a3031c045f86d1d",
    "text": "- Design Techniques and Deliverables • IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "4fecf236c1a782b238ff311d76f8a87d",
    "text": ", Information Technology Testing Process and • Assembler Language Programming, ISBN:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "d4f85d36757c12f0c6dab57721287f32",
    "text": "–",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "d4f85d36757c12f0c6dab57721287f32",
    "text": "–",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "d4f85d36757c12f0c6dab57721287f32",
    "text": "–",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "7ac654b3a0f7ad2d8fbbd81be3dc32a2",
    "text": ", Nancy Stern, Alden Sager and Robert A. Stein • Structured COBOL Programming, ISBN",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "dbb329e14fbc421a48e056ac299518f0",
    "text": ", Nancy Stern and Robert A Stern • The Elements of C Programming Style, ISBN",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "4d6f01fd01a924a7a32de46e2922bc5b",
    "text": ", Jay and Alan Nash • IBM Assembler System Standards, Chapter",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "63d1371f709870f88b7f1b9525da4907",
    "text": "( IRS-deﬁned ) • IRS Document",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "cf93f7cf325c8c6e35b6738ba1190766",
    "text": ", C++ Programming Standards • Java Programming Language, Oracle Technology Network/Java • Java Assembly Package, https://docs.oracle.com/javase/tutorial/ deployment/jar/index.html • Java Programming Package and Import Statements, com/javase/tutorial/java/package/usepkgs.html • Java Programming Input Validation and Data Sanitation http://docs. oracle.com/javase/",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "a87f0fcc0777dc17f643c974ab0effc4",
    "text": "/docs/api/java/lang/Runtime",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "ca1f0889ca32fea07d92b9e853a47307",
    "text": "xception.html • How to write documentation comments and available tags oracle.com/javase/",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "ec5d668cf7f3b9f97cb89030df01a19b",
    "text": "/docs/technotes/tools/windows/javadoc.html • Java primitives - https://cs.ﬁt.edu/~ryan/java/language/java-data.html • IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "969c8a2ecfee0187f896c93db61968f7",
    "text": "- Security, Privacy and Assurance, IT Security, Policy and Guidance • IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "fa5b6f72c3eb437facc61c482df718a2",
    "text": "- Security, Privacy and Assurance, IT Security, Application Security and Development • The Open Web Application Security Project (OWASP) https://www. owasp.org • For additional Assembler Standards and References, see Exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "c0934f6bfb069b2c34ac3ccb3fb58974",
    "text": "The following are supplement references on the development of maintainable, portable, reliable, and secure software applications.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "fe2249db53facbced6520e0214c0c11e",
    "text": ") The Federal Information Security Modernization Act of",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "0f48ba12a8d3434be2a9a36851c3f9eb",
    "text": "(FISMA) was passed for providing a framework with better information security controls over information resources, supporting Federal Government operations and assets. IRS applications must be compliant with federal standards, e.g. NIST SP",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "fc1ffc4776ee458c1558e39d6ee8f061",
    "text": "A Revision",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "ba029f8a2cbabab42ec362d0fcd2326f",
    "text": "“Assessing Security and Privacy Controls in Federal Infor- mation Systems and Organizations”; some key focus areas are:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "10dea2e60fdc2ef6c0f9d0bdd3076d75",
    "text": "(07-10-2020) Federal Government Application Standards Guidance",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "f1657569bf3aa41934a39a3799fe2e39",
    "text": "Software application security (including web Cross domain solutions Advanced persistent threats Industrial / process control systems Privacy",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 21
    }
  },
  {
    "element_id": "91533e204e6035df25b1425a3034fa02",
    "text": "Systems (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "4a8bb48bf2fbe60c35dff325ae891274",
    "text": ") For information on IRS Information Technology Cybersecurity controls see",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "6504edffc0778cca72ab8aaa451da0a4",
    "text": "Security, Privacy and Assurance, IT Security, Policy and Guidance IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "0f25030316aeca04c3ece51dd8844786",
    "text": "- Security, Privacy and Assurance, IT Security, Application and Development (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "0cbd9cb4151cf370eb0816ed310cdb64",
    "text": ") The Security Control Framework assist with the organization’s legal and latory security compliance efforts. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "7ecbcbd4bb385d5f6397dfa587bda647",
    "text": ") Application security is the use of software, hardware, and procedural to prevent security ﬂaws in applications, and protect them from external threats. Security is a critical objective during development as application become more accessible over networks, are more vulnerable to vast variety threats. Hence, security measures must be built into application to mitigate authorized code manipulation of applications to access, steal, modify, or sensitive data. As IRS software developers create robust code for effective applications, to achieve secure software they must embrace and practice a wide variety of secure coding techniques. All tiers of an application: user interface, business logic, controller, database, etc. must be created with security controls in mind. Hence, developers must ensure they follow best practices and guidelines from these primary industries when applicable: a. Common Weakness Enumeration (CWE) - Targeted toward and security practitioners as a community initiative, and a formal list software weaknesses types is created and updated for:: • Providing a common baseline standard for: weakness, mitigation, and prevention • Assisting with describing software security weaknesses in design, or code b. For more information see, https://cwe.mitre.org/index.html (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "e55e5f8854e14525a0c45610df617fd4",
    "text": ") OWASP Top",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "aafff57cf428fa93b8fac63026d4a596",
    "text": "Proactive Controls",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "64bb3574bd227c8960f830c899185d50",
    "text": ": This is a list of security that must be included in every software development project when The following control numbers are listed in order of importance, with control number",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "c3da2f9cef2d4e543ded78fc4a8795ac",
    "text": "as the most important: a. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "17c99f07cc9e0564145106b7fcfa344c",
    "text": "- Deﬁne Security Requirements b. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "35d309ee93e341c86651bd77955cddad",
    "text": "- Leverage Security Frameworks and Libraries c. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "7798daeecb591b5c2607037825134b5a",
    "text": "- Secure Database Access d. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "09167b1d04fbd0d2a38f6347c1da8bad",
    "text": "- Encode and Escape Data e. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "4d6898e3fde11627933bc95baae9ed63",
    "text": "- Validate All Inputs f. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "5aeb70513dc8035d6aa71782fb18f2d6",
    "text": "- Implement Digital Identity g. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "18532760076018610d1102e6b68bd0da",
    "text": "- Enforce Access Controls h. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "e334c5156b0898f47af6db831685dea3",
    "text": "- Protect Data Everywhere i. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "8e19b9674ad1e1cea6fdbfbe9032006c",
    "text": "- Implement Security Logging and Monitoring j. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "32ae24fd3a9395f02a136692f49131f3",
    "text": "- Handle all Errors and Exceptions (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "50dbced261984356ce1361ad6f19adbb",
    "text": ") For more information see, https://www.owasp.org/index.php/OWASP_ Proactive_Controls (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "2100cd645645cec53fd6e1376352e0d0",
    "text": ") The International Organization for Standardization (ISO) and the Electrotechnical Commission (IEC), ISO/ IEC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "e7ac0786668e0ff0f02b62bd04f45ff6",
    "text": ":",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "069ee85b17d960c69ec0dfe601074574",
    "text": "+ , Information nology, Security Techniques, Application Security - Provides guidance on information security for IT Managers, developers and auditors to ensure computer applications have the necessary level of security. Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "c0d790c9045ab15fb52ffbc7c9c7cdb2",
    "text": "Security, Privacy and Assurance, IT Security, Policy and Guidance and IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "a09527807458fb86f22dd5ffb779e349",
    "text": "- Security, Privacy and Assurance, IT Security, Application Security and Development (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "e59b7d67ed7581bd2f8718f174d9a986",
    "text": ") The Security Control Framework assist with the organization’s legal and regu- latory security compliance efforts. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "8479ea87b5dd7b88c782fde1f32541db",
    "text": ") Application security is the use of software, hardware, and procedural methods to prevent security ﬂaws in applications, and protect them from external threats. Security is a critical objective during development as application become more accessible over networks, are more vulnerable to vast variety of threats. Hence, security measures must be built into application to mitigate un- authorized code manipulation of applications to access, steal, modify, or delete sensitive data. As IRS software developers create robust code for effective IRS applications, to achieve secure software they must embrace and practice a wide variety of secure coding techniques. All tiers of an application: user interface, business logic, controller, database, etc. must be created with security controls in mind. Hence, developers must ensure they follow best practices and guidelines from these primary industries when applicable:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "7d5b198e3f82ed776fed767f1f8f12c7",
    "text": "practices and guidelines from these primary industries when applicable: a. Common Weakness Enumeration (CWE) - Targeted toward and security practitioners as a community initiative, and a formal list software weaknesses types is created and updated for:: • Providing a common baseline standard for: weakness, mitigation, and prevention • Assisting with describing software security weaknesses in design, or code b. For more information see, https://cwe.mitre.org/index.html OWASP Top",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "aafff57cf428fa93b8fac63026d4a596",
    "text": "Proactive Controls",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "cff051d9faa16554f8f163c074468148",
    "text": ": This is a list of security that must be included in every software development project when The following control numbers are listed in order of importance, with number",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "c3da2f9cef2d4e543ded78fc4a8795ac",
    "text": "as the most important: a. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "17c99f07cc9e0564145106b7fcfa344c",
    "text": "- Deﬁne Security Requirements b. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "35d309ee93e341c86651bd77955cddad",
    "text": "- Leverage Security Frameworks and Libraries c. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "7798daeecb591b5c2607037825134b5a",
    "text": "- Secure Database Access d. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "09167b1d04fbd0d2a38f6347c1da8bad",
    "text": "- Encode and Escape Data e. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "4d6898e3fde11627933bc95baae9ed63",
    "text": "- Validate All Inputs f. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "5aeb70513dc8035d6aa71782fb18f2d6",
    "text": "- Implement Digital Identity g. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "18532760076018610d1102e6b68bd0da",
    "text": "- Enforce Access Controls h. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "e334c5156b0898f47af6db831685dea3",
    "text": "- Protect Data Everywhere i. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "8e19b9674ad1e1cea6fdbfbe9032006c",
    "text": "- Implement Security Logging and Monitoring j. Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "86e2c7d2d9fe55158bc19d9f3245d6c0",
    "text": "- Handle all Errors and Exceptions For more information see, https://www.owasp.org/index.php/OWASP_ Proactive_Controls The International Organization for Standardization (ISO) and the Electrotechnical Commission (IEC), ISO/ IEC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "e7ac0786668e0ff0f02b62bd04f45ff6",
    "text": ":",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "c2adfafe54d6ec6d8cba1d0319ea15e2",
    "text": "+ , Information nology, Security Techniques, Application Security - Provides guidance on information security for IT Managers, developers and auditors to ensure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "660646af943f2dedf42a16370b2c050b",
    "text": "Common Weakness Enumeration (CWE)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "f6efc3358d89524bf34207d0056e4b3b",
    "text": "Targeted toward developers and security practitioners as a community initiative, and a formal list of software weaknesses types is created and updated for::",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "74c5ec5eade1b5149ab5db4bdfa911dc",
    "text": "Providing a common baseline standard for: weakness, identiﬁcation:, mitigation, and prevention",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "3d924fba3dd0b443cb56d1d9aab1cf30",
    "text": "Assisting with describing software security weaknesses in design, or code For more information see, https://cwe.mitre.org/index.html",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "e5b14dfcb1dc5db6834a91a5f616ff6f",
    "text": "The International Organization for Standardization (ISO) and the International Electrotechnical Commission (IEC), ISO/ IEC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "e7ac0786668e0ff0f02b62bd04f45ff6",
    "text": ":",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "9b682bcec7f734dd860f64fc5d6ee3c6",
    "text": "+ , Information Tech- nology, Security Techniques, Application Security - Provides guidance on information security for IT Managers, developers and auditors to ensure computer applications have the necessary level of security.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 22
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "4adc3edbbc646559ebb8fd5c20b02896",
    "text": ") ISO/ IEC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "e7ac0786668e0ff0f02b62bd04f45ff6",
    "text": ":",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "69b2105ebd5d9876c811ffe08f80a8e5",
    "text": "+ - Key purpose is to assist organizations with security controls through a set of processes integrated throughout the Development Life Cycle (SDLC). The standard is a SDLC-method-agnostic; i.e., it does not mandate one or more speciﬁc development methods or approach; therefore, it complements other systems development standards methods without conﬂiction with them. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "5ddc11845a0359e766be9598ad9c2c3e",
    "text": ") For more information see, https://iso",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "09589570e5a2e1317793b9156e4e843e",
    "text": "security.com/html/",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "76df689a3f8ff3d4baea9cdc1a233f07",
    "text": "html (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "f99e3a19a5041dc369535a753947ad8e",
    "text": ") Application controls are a form of security that blocks or restricts from executing in ways that put data at risks, and also designed to improve Security quality of data that is input into databases. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "f8e502854cfe0c74a0f504ad1477c3b1",
    "text": ") The key purpose is to reduce the risks and threats associated with by ensuring the conﬁdentiality, integrity , and availability of data transmitted between applications. Examples of applications controls include the a. Completeness checks: Controls ensure records are processed from tiation to completion b. Validity checks: Controls ensure only valid data is input or processed c. Identiﬁcation: Controls ensure unique, unquestionable identiﬁcation of users d. Authentication : Controls ensure access to the application system by approved business user only e. Input Controls: Controls ensure data integrity feeds into the system from valid sources f. Defense-in-Depth: Is a security implementation which has layers of security implemented to protect an asset from unauthorized access or modiﬁcations. The objective is about layering defense tools in order to minimize the number of vulnerabilities in applications that would allow occurrence of different attacks. For example, if one security layer fails next security layer will catch the breach-of-attack at the next security layer, i.e. Client, Server, Application, and Database protection. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "9152f9d080cb665f1cb7554ed5e6acef",
    "text": ") IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "16fb570ae484e409d5ccf089d1f14003",
    "text": "Systems Development, Quality Assurance documents the tion Development (AD) Delivery Management & Quality Assurance (DMQA) waiver process for tracking any project team’s noncompliance of accepted standards.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "e82fbed1bf1251f29c3435842c5fadd6",
    "text": "between applications. Examples of applications controls include the a. Completeness checks: Controls ensure records are processed from tiation to completion b. Validity checks: Controls ensure only valid data is input or processed c. Identiﬁcation: Controls ensure unique, unquestionable identiﬁcation of users d. Authentication : Controls ensure access to the application system by approved business user only e. Input Controls: Controls ensure data integrity feeds into the system from valid sources f. Defense-in-Depth: Is a security implementation which has layers of security implemented to protect an asset from unauthorized access or modiﬁcations. The objective is about layering defense tools in order to minimize the number of vulnerabilities in applications that would allow occurrence of different attacks. For example, if one security layer fails next security layer will catch the breach-of-attack at the next security layer, i.e. Client, Server, Application, and Database protection. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "9152f9d080cb665f1cb7554ed5e6acef",
    "text": ") IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "43db35b5c6973004f6ce3741cebae366",
    "text": "Systems Development, Quality Assurance documents the tion Development (AD) Delivery Management & Quality Assurance (DMQA) waiver process for tracking any project team’s noncompliance of accepted standards. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "09338f42b1f95c3dbe2b7d2cd6562b2f",
    "text": ") This section of the IRM is based on speciﬁc enterprise platforms and languages - These IRS standards and guidelines pertain to application program development and documentation efforts. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "581ad3df3d4f7ab2e7ecc7a211d4cb61",
    "text": ") The objective of this section is to promote the development of programs that are reliable, modular, easily maintainable, and as portable as possible. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "695cd00a6f6428c84b765be4e80053f6",
    "text": ") New software tools for application development and decision support may supplement and/or replace traditional design and programming techniques. Commercially acquired software packages may reduce development time by eliminating “detailed” design and programming activities. Off-the-shelf packages should be carefully considered before the decision is made to develop software.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "1a5d9e10791913fc0b74048aba7371b2",
    "text": "Completeness checks: Controls ensure records are processed from tiation to completion Validity checks: Controls ensure only valid data is input or processed Identiﬁcation: Controls ensure unique, unquestionable identiﬁcation of users Authentication : Controls ensure access to the application system by approved business user only Input Controls: Controls ensure data integrity feeds into the system from valid sources Defense",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "582967534d0f909d196b97f9e6921342",
    "text": "in",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "7db2b62836f0f81ae649d30bfdd6ede3",
    "text": "Depth: Is a security implementation which has layers of security implemented to protect an asset from unauthorized access or modiﬁcations. The objective is about layering defense tools in order to minimize the number of vulnerabilities in applications that would allow occurrence of different attacks. For example, if one security layer fails next security layer will catch the breach",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "28391d3bc64ec15cbb090426b04aa6b7",
    "text": "of",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "a5d43777629439b2b1e3be619794572d",
    "text": "attack at the next security layer, i.e. Client, Server, Application, and Database protection.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "4b984b3ea8cbabf522d323732da1e0d5",
    "text": "IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "277de37ae227c8aed85a6125f85a203c",
    "text": "Systems Development, Quality Assurance documents the tion Development (AD) Delivery Management & Quality Assurance waiver process for tracking any project team’s noncompliance of accepted standards. This section of the IRM is based on speciﬁc enterprise platforms and languages - These IRS standards and guidelines pertain to application program development and documentation efforts. The objective of this section is to promote the development of programs are reliable, modular, easily maintainable, and as portable as possible. New software tools for application development and decision support may supplement and/or replace traditional design and programming techniques. Commercially acquired software packages may reduce development time eliminating “detailed” design and programming activities. Off-the-shelf packages should be carefully considered before the decision is made to develop software.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "4b984b3ea8cbabf522d323732da1e0d5",
    "text": "IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "1a7b778623b9d19a73171ddff7550bfd",
    "text": "Systems Development, Quality Assurance documents the Applica- tion Development (AD) Delivery Management & Quality Assurance (DMQA) waiver process for tracking any project team’s noncompliance of accepted IRS standards.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 23
    }
  },
  {
    "element_id": "91533e204e6035df25b1425a3034fa02",
    "text": "Systems (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "f295c5440bc27dbd5711121d373a06f7",
    "text": ") The scope of this directive is service-wide. This includes software by contractors where the guidelines apply to Assembler Language, COBOL, Language, C++ programming, and Java programming. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "c1c51d0cb7dedd3f222dfa9b3d44e061",
    "text": ") The primary goal of structured programming is to produce working that are: modular, accurate, and self-documenting, so that they are easily and maintained by someone other than the original author. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "7cc11e801b909b562c94a80d5e51ce57",
    "text": ") Structured programming includes the following activities: • Developing speciﬁcations for the logic of each module • Writing structured code to implement the logic of the module • Using a structured testing methodology that gradually creates a program as each module is introduced into the application system (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "20f7b16918ce20c3aa1c9a8fba2be830",
    "text": ") Structured programming employs the use of limited syntax (constructs) for source code, single-entry/single-exit modules, and top-down development. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "4ce42c3ade29076aceb009a178e1f84c",
    "text": ") Base the logic of each module on various combinations of control The three basic constructs are Sequence, Selection (If-Then-Else), and tion (Do-While)/(Test-First). Two optional constructs include Repetition (Do- Until)/(Test-Last) and Selection (Case). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "bee24e20c592b0591a9dd0377915adb1",
    "text": ") Exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "362dc1c4ada4faa39fa79e6d54dc5e43",
    "text": "depicts a ﬂowchart and Structure diagram for each construct. The actual implementation of these structures will vary according to the re- quirements of the particular language being used. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "8221be12f83a087ce4b6f2886ed4ecf6",
    "text": ") Ensure that each module has only one entry point to and one exit point the module. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "62d7165567ae34750dc87a25f211f393",
    "text": ") Partition and organize each module, program, and application system into a hierarchical structure. Structure charts, module speciﬁcations, and code are part of the design of a system. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "1ce0227983ce4cfb485c6efcc397b587",
    "text": ") Various tools are commonly used to communicate and transition design cations to source code. These tools are: a. Structure charts b. Module speciﬁcations IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "1f577e64fe214138b79e0768c21ccf20",
    "text": "- Design Techniques and Deliverables, provides comprehensive standards and guidelines regarding structure charts and module speciﬁcations",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "8882dee16d4db86e61ba1b38bf7cb147",
    "text": "Structured programming employs the use of limited syntax (constructs) for source code, single-entry/single-exit modules, and top-down development.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "2f0563a32e8d8277b077d6676004b72c",
    "text": "IRM 2.5.12 - Design Techniques and Deliverables, provides comprehensive standards and guidelines regarding structure charts and module speciﬁcations during design.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "04b99ff6178eb15ce6785323d7a7318a",
    "text": "This section addresses services that must be performed regardless of the language or platform selected.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "280b8616fc41cb5530212adb2129ed2c",
    "text": "(07-10-2020) Documenting, Testing, and Debugging Code",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 24
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 25
    }
  },
  {
    "element_id": "93698dea721e104662273d2b96f42706",
    "text": "Make each module a small block of source code that does not exceed one page of printed output (exclusive of comments).",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 25
    }
  },
  {
    "element_id": "59e279c3cf1a61cabe587134bc90d5a0",
    "text": "Data controls must be designed with the purpose of functions of the program, and variable data types in mind in order to reduce potential conﬂicts.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 25
    }
  },
  {
    "element_id": "f0108a90221180560ac9b38f0c5a2e84",
    "text": "Data controls permit an operating entity to verify that the correct operations have been performed, in the correct manner, with the correct data.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 25
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "6545f1f3d161f06ab37f05814da1afc7",
    "text": ") Controls refer to the manual and automated measures supported to: • Preserve the accuracy of data by detecting and/or preventing Principles of Data errors. • Ensure data is not lost or added, by monitoring balances between processes. • Ensure data integrity so programs do not unintentionally change the values of data. • Permit appropriate recovery/reconstruction of ﬁle data after a system failure or abnormal termination. • Safeguard sensitive data to prevent unauthorized access, embezzle- ment, and other breaches of security. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "af31738c5162bab3dd40095f80a66abf",
    "text": ") Integrate controls into the development effort. The types of controls, and the amount of detail are dependent upon the size and complexity of the system. for Data (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "e8090265a521df701f623bda8e081fa2",
    "text": ") Weigh each development effort based on the following operational consider- ations: • The amount of operator intervention • Multi-ﬁle/multi-cartridge processing • Checkpoint/restart capability • The ﬁle ID on all internal reports • Back-up of control ﬁle • Initialization of working storage and output buffers with spaces and zeros • Run to run balancing (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "3ff391f1ace57b8f04cbdbc4a3ac3985",
    "text": ") Internal controls are balancing procedures developed to verify the validity of the processing within a run. Internal controls are usually a response to user Controls requirements for accuracy, completeness and security within an information system. Segment these controls into three classes: a. Controls over input b. Controls over processing c. Controls over output (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "b4df97d1e7c54c8d20b29bb984593f73",
    "text": ") Input controls are the most important and the most numerous. Most errors generated during input processing. Some common techniques are: Controls • Check digit veriﬁcation--Use check digits to review the accuracy of speciﬁc ﬁelds. For example, a check digit can help determine an account number is valid. • Consistency tests--If the application permits it, verify accuracy by comparing the values of various ﬁelds to determine whether the nations make sense. For example, if the “Country” ﬁeld indicates that the record concerns an organization in Canada, the “Postal Code” should have a speciﬁc alphanumeric format. • Validity tests--In some cases, ﬁelds can take only a limited range of values, or must have a predetermined format. Matching the actual to the allowable values will detect errors. For example, if a ﬁeld is supposed to contain a valid U.S. postal abbreviation for a state, “AZ” would be valid but “A",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "a50d979ba4568ebe757596147afbf91f",
    "text": "” would not. Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "e1c648f1c26146263f6dbb4afbd61d20",
    "text": "Controls refer to the manual and automated measures supported to:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "79dd87b36b77dbd16df1f72a7a846dea",
    "text": "Preserve the accuracy of data by detecting and/or preventing errors. Ensure data is not lost or added, by monitoring balances between processes. Ensure data integrity so programs do not unintentionally change the values of data. Permit appropriate recovery/reconstruction of ﬁle data after a system failure or abnormal termination. Safeguard sensitive data to prevent unauthorized access, embezzle",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "9c80d53e450c292e5ad1ffdcb819c88f",
    "text": "ment, and other breaches of security.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "93fad45b56f9ef82e8b3e08e0fe5ee7b",
    "text": "controls are the most important and the most numerous. Most errors are during input processing. Some common techniques are:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "c4ef2a49f421061ead16e81e331e591e",
    "text": "Check digit veriﬁcation--Use check digits to review the accuracy of speciﬁc ﬁelds. For example, a check digit can help determine whether an account number is valid. Consistency tests--If the application permits it, verify accuracy by comparing the values of various ﬁelds to determine whether the nations make sense. For example, if the “Country” ﬁeld indicates that the record concerns an organization in Canada, the “Postal Code” ﬁeld should have a speciﬁc alphanumeric format. Validity tests--In some cases, ﬁelds can take only a limited range of values, or must have a predetermined format. Matching the actual to the allowable values will detect errors. For example, if a ﬁeld is supposed to contain a valid U.S. postal abbreviation for a state, “AZ” would be valid but “A",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "372998338d3a49672f27cbb164fa692c",
    "text": "” would not.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 26
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "48dbb85b594d3467b8460b6978b86d1f",
    "text": "• Batch numbering--This technique ensures that transactions are not Processor checks can be made to assure that all transactions are accounted for and processed in a logical order. • Control totals--These totals help avoid errors during data entry. input ﬁelds (e.g., check amount or quantity received) are added both manually and automatically for comparison. In some cases, these are developed for ﬁelds that would normally not be added (e.g., numbers or social security numbers). These are called hash totals. In either case, both the expected totals and the individual transactions passed to the application system. The application system then lates the totals from the individual records received and compares to the expected totals. If they don’t match, an error has been • Transaction counts--Use this method to keep track of the number of transactions that should have been processed by the application system. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "b3844470d69271ae4f4afa4cab0df186",
    "text": ") There are two major types of processing controls: a. Run to Run b. File and Operator (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "599c1f6dbd4e1ea1550165837976928c",
    "text": ") Run to run controls consist of data generation controls and veriﬁcation controls: • Use data generation controls to ensure that the correct version of the ﬁle is being used • Veriﬁcation controls ensure that the totals or record counts for the run match the opening totals for the current run (e.g., header/trailer counts) (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "2612ce8637445f3cb96983f4c92e9f63",
    "text": ") File and operator controls are actions that the operator can take to ensure the application system is processing the right ﬁles and data. The controls be as simple as checking a cartridge. Operator intervention should be kept minimum. Operator controls should be very speciﬁc and should be nied by sufficient operator instruction. For example, if the operator receives message on the console: CARTRIDGE LABEL ERROR Enter “R” to retry, to abort, “A” to accept. The operator should not be able to override this message. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "149151a1e076a6b0897a0b4ebf6ecca7",
    "text": ") There are three types of output controls: a. Control Totals b. Veriﬁcation Controls c. Distribution Controls (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "832b6d892a6fa0957889759e760a1df6",
    "text": ") Use control totals to verify the correctness of the outputs. For example, if an accounts payable application system generates",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "d2f5e89a50010c9af12fae189fd9c11a",
    "text": "checks with an value of $",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "4c39888cffdd7eacd890a287eeffcb29",
    "text": ", the checks could be physically added to verify that the actual values of the checks were generated. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "f0e4dcdd83313ea5bedce8c34f0efa52",
    "text": ") Use veriﬁcation controls to coordinate internal and external processes. For example, to avoid unauthorized loss of blank checks, have the computer track of the expected serial numbers of the preprinted checks and print the expected number on the check. If the two numbers differ, something is (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "6726c0a6ddbc7e77d189e9318f57a047",
    "text": ") Internal Revenue Manual",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "b696bb38ade14bc536cf5d0c4231f72f",
    "text": "Batch numbering",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "fb317dfdfa2b0bab7cd891ed65508b8f",
    "text": "This technique ensures that transactions are not lost. Processor checks can be made to assure that all transactions are accounted for and processed in a logical order. Control totals",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "8a8b020dee430530fc2585fdf69bbf97",
    "text": "These totals help avoid errors during data entry. Various input ﬁelds (e.g., check amount or quantity received) are added both manually and automatically for comparison. In some cases, these totals are developed for ﬁelds that would normally not be added (e.g., account numbers or social security numbers). These are called hash totals. In either case, both the expected totals and the individual transactions are passed to the application system. The application system then recalcu",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "c5304380fee57a361ee30b1b3798c9c6",
    "text": "lates the totals from the individual records received and compares them to the expected totals. If they don’t match, an error has been detected. Transaction counts",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "35e1c730b09fa1a236abb184eba6581f",
    "text": "Use this method to keep track of the number of transactions that should have been processed by the application system.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "a45be389fe8784b31cb89e76514a90ee",
    "text": "Processor checks can be made to assure that all transactions are accounted for and processed in a logical order. Control totals--These totals help avoid errors during data entry. Various input ﬁelds (e.g., check amount or quantity received) are added both manually and automatically for comparison. In some cases, these are developed for ﬁelds that would normally not be added (e.g., numbers or social security numbers). These are called hash totals. In either case, both the expected totals and the individual transactions are passed to the application system. The application system then recalcu- lates the totals from the individual records received and compares to the expected totals. If they don’t match, an error has been detected. Transaction counts--Use this method to keep track of the number of transactions that should have been processed by the application system.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "dff4540607c464581fed918fffb45cc8",
    "text": ") File and operator controls are actions that the operator can take to ensure that the application system is processing the right ﬁles and data. The controls can be as simple as checking a cartridge. Operator intervention should be kept to a minimum. Operator controls should be very speciﬁc and should be accompa- nied by sufficient operator instruction. For example, if the operator receives a message on the console: CARTRIDGE LABEL ERROR Enter “R” to retry, “N” to abort, “A” to accept. The operator should not be able to override this",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "ad6669c57f8c758170b0d3da00589b39",
    "text": "a. Control Totals b. Veriﬁcation Controls c. Distribution Controls (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "832b6d892a6fa0957889759e760a1df6",
    "text": ") Use control totals to verify the correctness of the outputs. For example, if an accounts payable application system generates",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "65954b8c3e3cfba70807b62b58900e35",
    "text": "checks with an expected value of $",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "4c39888cffdd7eacd890a287eeffcb29",
    "text": ", the checks could be physically added to verify that the actual values of the checks were generated. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "e21ae7f45212f96a305874d1a48699ed",
    "text": ") Use veriﬁcation controls to coordinate internal and external processes. For example, to avoid unauthorized loss of blank checks, have the computer keep track of the expected serial numbers of the preprinted checks and print the",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 27
    }
  },
  {
    "element_id": "91533e204e6035df25b1425a3034fa02",
    "text": "Systems (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "7ebc193ec5033c946ecf6833a81033aa",
    "text": ") Use distribution controls to ensure that once an output is printed, it is to the authorized recipients. This includes having users sign for reports as well as controls between sites. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "4e234a5bee8e648be162ce4decfa4a02",
    "text": ") External controls consist of that information necessary for operations to perform balancing between and within runs. These controls are manual Data Controls nature and should include precise instructions as to: • Which output listing/ﬁle contains the control data • What type of control data is being generated, e.g., transaction hash totals, etc. • How to balance the various elements of control data, e.g., ITEM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "941f3e9192207d75ca8d1cefa69d45f5",
    "text": "+ ITEM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "b2059ebe2e199775c4d4b13454021c7f",
    "text": "= ITEM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "147ff1decb2d8947e11f69bb84337d83",
    "text": ") Accumulate and print controls at the end of processing must include, at a minimum: • Counts of total inputs and outputs; • Balancing counts; • Information counts; • Run to run counts; and to • Generated, dropped and error records, (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "be1bea6d7b0e4029633603fe40be99f8",
    "text": ") Keep a record of the data as it moves through an application system and subjected to a series of manual and automated processes. This can be Totals plished in two ways: a. Control Totals b. Control File (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "e7bdb134180285d32d5d6be49d2471a6",
    "text": ") Control totals can be embedded in the process itself. This is not the best approach since these totals are easily modiﬁed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "d42be7565e9b3cdbe147f5daea72366f",
    "text": ") A separate, highly controlled (limited user access) “control ﬁle” is very in that it is not as accessible as the data ﬁles. This ﬁle should include the following: • Block and/or record counts, hash totals, and total counts • Logical record counts, when they differ from tape-record counts • Controls on money amount ﬁelds (cumulative arithmetic totals) • Adequate controls to account for all records: including those by-passed or combined during processing (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "dbbcc1c57fdb2bee406e0d20cb74607e",
    "text": ") Intra-run controls generate and/or present control information to operations personnel during the execution of the run. Controls (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "9ed87ebe3a63e670e1d788483e2c36f5",
    "text": ") When designing a program, limit the amount of intervention required by tions personnel. As this is not always possible, consider the following ideas when developing intra-run controls: • Enable the run to print all operationally controlled parameters used the run Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "9ca61c1132c99a585d80359a11ba08d7",
    "text": "Which output listing/ﬁle contains the control data What type of control data is being generated, e.g., transaction counts, hash totals, etc. How to balance the various elements of control data, e.g., ITEM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "941f3e9192207d75ca8d1cefa69d45f5",
    "text": "+ ITEM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "b2059ebe2e199775c4d4b13454021c7f",
    "text": "= ITEM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "c038f8ead7dbb012a0f3c8e04e5a8ae8",
    "text": "Control totals can be embedded in the process itself. This is not the best approach since these totals are easily modiﬁed.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "982041e4f7dfb8bc0ac5d641a7fbca35",
    "text": "A separate, highly controlled (limited user access) “control ﬁle” is very effective in that it is not as accessible as the data ﬁles. This ﬁle should include the",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "b0710f426a4d547092c2231b90040dc0",
    "text": "Block and/or record counts, hash totals, and total counts Logical record counts, when they differ from tape",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "05f97d125144ec00cb1989a819c3fb88",
    "text": "record counts Controls on money amount ﬁelds (cumulative arithmetic totals) Adequate controls to account for all records: including those by",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "301b4f78987d72ee101a555aff28effe",
    "text": "passed or combined during processing",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 28
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "b58618537a2310e15786ab0a6b85332c",
    "text": "all control data to a separate tape/disk ﬁle and print at the end of job. Don’t clutter the console with control information during pro",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "9e30ac3cd73e2b7d53c8fc1b87b40bf3",
    "text": "totals for each run, every time, even when the totals are in balance",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "79d56728eb2e75654636bac76c077641",
    "text": "cessing • Print totals for each run, every time, even when the totals are in (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "dfae5fb4ede68bcfd4a771fcdde0bb97",
    "text": ") Include computer generated control lists with record counts by ﬁle, ﬁle and name, money amounts and tape/disk numbers. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "77d5a17d0a32706447d0a583dcecf8de",
    "text": ") Make sure that programs generate identifying information on all internally output (e.g., reports). The project/run/ﬁle ID will be printed on each page printed output. Do not print this information on transcripts, taxpayer letters notices, and externally distributed reports. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "f8ca32d4fce3950ef4ce9e437990fedf",
    "text": ") Include instructions for manually processing the control list. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "c787691e1c2345eb3f6122ab33718194",
    "text": ") Include computer generated cartridge numbers on all control lists: • Print cartridge ﬁle ID on controls page (from job number next to the responding count). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "66d866a22f5b86913133f9633cbdefb7",
    "text": ") Computer generated hard copy control output for all runs. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "020bc261c12dc4af31a77f2758953be2",
    "text": ") List all control features in either the user handbook and/or the Computer Operators Handbook (COH), explaining: • The purpose and use of each control • How they were derived and their meaning • The cause and meaning of all programmed halts (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "d8c98ffe233e1a05cd4bd092a5418869",
    "text": ") Assign a unique identiﬁer to each cartridge ﬁle. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "b53ad7f1bbb861642d61d5f8ff1c77b3",
    "text": ") When processing a multi-reel program that also has multi-ﬁle input, use at the end of each ﬁle if the accumulated counts are not equal to the count in a trailer record. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "71465fe313b1d39607aded1806237f0b",
    "text": ") Institute checkpoint/restart capabilities for any application with estimated or actual run times that exceed one hour normal processing time as well as large programs that process extensive amounts of data. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "58211ecbf93c6315e45e16b5c1becc8f",
    "text": ") This subsection addresses ﬁle design and cartridge interface format ations. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "461089310ff9b343decd39d1c5d0dcc8",
    "text": ") The following sections include the design of the sequential ﬁle and logical record formats. They are concerned with the association or grouping of the data elements into groups and records. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "0fc27fce1638fe47b515d4e1dd5cfe8c",
    "text": ") Fixed length records--a ﬁle composed of records that are all the same (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "2ebd8ce46830357b13b77f223358a351",
    "text": ") Variable-length records/multiple ﬁxed formats--a ﬁle composed of a ﬁnite number of ﬁxed length record sets, where the record lengths within any equal, but the record lengths between sets differ.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "c88baca3505be23f4bed648d3c73248b",
    "text": "(01-01-2004) File Design and Cartridge Interface Formats",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "1cb86159d58940304755a4cfed9f99d9",
    "text": "Fixed length records--a ﬁle composed of records that are all the same length.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 29
    }
  },
  {
    "element_id": "91533e204e6035df25b1425a3034fa02",
    "text": "Systems (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "091e75fed7c9a378c85c019377ed6b26",
    "text": ") Variable-length records/variable subscripted format--a ﬁle composed of one more sets of records whose format consists of a ﬁxed portion followed by a variable number of repeating groups. These groups must either be ﬁxed in length, or composed of a ﬁxed portion plus a subgroup whose entries are in length. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "ca535938b408c70ea551cfd38e9b89d0",
    "text": ") Variable-length records/variable string format--a ﬁle composed of records sisting of character strings of unspeciﬁed lengths. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "9350a7505742e6f105683581ead0a94e",
    "text": ") When deﬁning data ﬁelds which will compose a ﬁle, do not assign multiple uses for the same ﬁeld; e.g., if a ﬁeld is labeled DATE, the values carried that ﬁeld should be date information in all cases. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "2718edebcd06923042680b6cf409f766",
    "text": ") Specify all the search key ﬁelds, and if possible, place them at the of the record. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "2e7e769e1eddd29707b853abbeaf5272",
    "text": ") Reduce redundant data ﬁelds to the minimum. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "9565a524ebe09bf817a460f20ab68c71",
    "text": ") Specify sensitivity levels for ﬁles. Classify all the sensitive data ﬁelds that require authorization for access. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "76a1e1b7bac881325214c4d7d7112cc7",
    "text": ") Restrict data ﬁelds to one and only one data item. This is really a VERY important standard to enforce. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "c99bcd5ea85832221692398a39335c87",
    "text": ") The name should comply with IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "76caf54ae63a5bde2fb62d81689bb046",
    "text": "Information Technology, Data neering, Naming Data Elements(s)/Objects(s) to include characteristics as: a. The team must be easily deﬁned b. The name must reﬂect and be speciﬁc to what is in the ﬁeld (e.g. Mailing-Dt.) c. Data names must end in a class word, indicating the data type (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "85bd39d7fdf05550bbe275215d2edb53",
    "text": ") Use “Fixed” and “variable multiple ﬁxed” formats when possible. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "1371fc6419f655a9dd95d56057e0af3d",
    "text": ") Avoid variable length records/variable subscripted format (i.e., Nth groups, where N is greater than",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "a1c36b6cd420bb339df7b8ab2656a04f",
    "text": "). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "3f71bd5ab5f8b09c9a5d84a676115a36",
    "text": ") Do not use variable string formats. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "3db8fa672569db21e694aa2ab8bb8451",
    "text": ") Tape interface standards reduce the difficulty of sharing data between users and different application systems. They allow the users to consider the logical structure of ﬁles, and simplify the transporting and maintenance data. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "14164fcbb4bf13ef1653b4810ccdfcc6",
    "text": ") All ﬁles created on an application system to be processed on another • Contain only ASCII character data • Be in either Fixed or Variable format • Carry signs (+ or -) as a separate, leading ASCII character for numeric data ﬁelds. The reason for carrying signs separately , is to maintain consistency between application systems because of the Implementor option (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "1caf2c4f0bb35fe788d7967933338f4d",
    "text": ") All ﬁles that are passed between application systems will be limited to characters per record. Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "baa80e35ef3d499246d729f367b4b3e3",
    "text": "The name should comply with IRM 2.152.3 Information Technology, Data neering, Naming Data Elements(s)/Objects(s) to include characteristics such",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "ac4ed2f3259f979d44519666a930a7fb",
    "text": "All ﬁles that are passed between application systems will be limited to 9995 characters per record.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 30
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "8f5803537a2b3a64f31769bcdc843642",
    "text": "Record lengths (for variable records) consist of four decimal (ASCII) characters in the Record Control Word (RCW). The RCW is automatically generated by the application system and precedes each logical record.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "b315c08846e91ae90027c686e3fd1747",
    "text": "the application system and precedes each logical record. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "736835fa3e2f02b8d9e0a4ccda86cffa",
    "text": ") This subsection pertains to date ﬁelds and addresses the following topics: a. Year b. Date c. Gregorian Dates d. Exceptions (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "47ef8a1467ed9dfff486be49ffb34919",
    "text": ") The all year ﬁelds format output must be represented as “YYYY” . (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "14c3807414ab670748c8b8dc3668e779",
    "text": ") Do not store non-date values in DATE ﬁelds (i.e., indicators, freeze codes). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "904ae4a5e20ce890c40de28dacbd0786",
    "text": ") Do not use any DATE ﬁeld to store non-date information, as in the case of moving all",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "5dc0ad44d23f35ecc4d40af66dba3b87",
    "text": "’s to a ﬁeld as an indicator of a particular status. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "ff575be6a68d36a77b4d0bd79b4e8fbd",
    "text": ") Do not store special characters in any DATE ﬁelds. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "ff0640616687b95e1daedc72e2ea269f",
    "text": ") Make DATE ﬁeld names meaningful and accurately descriptive of the date stored in the ﬁelds, (e.g., BIRTH-DATE ). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "118e5818927dd399489736daba8d9786",
    "text": ") Add validity checks for DATE ﬁelds entered on screens or at their initial point into Service Application Systems. This includes External Trading Processing. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "28af5f8a4b422b96685a631778475d51",
    "text": ") Externalize literal usage of dates wherever possible. For example, interest rates that apply to certain date ranges would be established as a data ﬁle database table rather than being hard-coded in the program. If at all eliminate hard-coded dates. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "616389afc09f97e5a7acfb259c38e8e6",
    "text": ") Use system-wide standard DATE routines (either IRS-developed or COTS) source code, wherever possible. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "b6acecc333983af19b71f065f41cc7b6",
    "text": ") All Gregorian dates must be in (YYYYMMDD) format. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "8c57d081153da71b314ee6b6c0e09dc7",
    "text": ") Archive data no longer included in regularly scheduled processing need not converted. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "1b1687eccdfc7a6126afb55d29106e52",
    "text": ") Transmittal numbers and data set names (including File Names) containing",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "649111f52bd187eea9cccef223f8dfea",
    "text": "The all year ﬁelds format output must be represented as “YYYY”",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "2b18574d601349103a3eb04f82d8dab3",
    "text": "Do not store non-date values in DATE ﬁelds (i.e., indicators, freeze codes). Do not use any DATE ﬁeld to store non-date information, as in the case of moving all",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "1eceabf343d0c677fb7d16b07f14aab6",
    "text": "’s to a ﬁeld as an indicator of a particular status. Do not store special characters in any DATE ﬁelds. Make DATE ﬁeld names meaningful and accurately descriptive of the date stored in the ﬁelds, (e.g., BIRTH-DATE ). Add validity checks for DATE ﬁelds entered on screens or at their initial point into Service Application Systems. This includes External Trading Processing. Externalize literal usage of dates wherever possible. For example, interest rates that apply to certain date ranges would be established as a data ﬁle database table rather than being hard-coded in the program. If at all eliminate hard-coded dates. Use system-wide standard DATE routines (either IRS-developed or COTS) source code, wherever possible. All Gregorian dates must be in (YYYYMMDD) format.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "b52fbaa9a890a49efc4ce120f3fca25c",
    "text": "Do not use any DATE ﬁeld to store non-date information, as in the case of moving all 9 ’s to a ﬁeld as an indicator of a particular status.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "6a74523c695d9624c27c2404131d37da",
    "text": "Add validity checks for DATE ﬁelds entered on screens or at their initial entry point into Service Application Systems. This includes External Trading Partners",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "8c57d081153da71b314ee6b6c0e09dc7",
    "text": ") Archive data no longer included in regularly scheduled processing need not converted. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "93a70bac49c12b5d070fa917622acf2a",
    "text": ") Transmittal numbers and data set names (including File Names) containing dates need not be converted. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "f74a42910cd33ccbd1628462e57fca68",
    "text": ") This subsection provides establishes controls to ensure COBOL programs reliable, maintainable, and portable.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 31
    }
  },
  {
    "element_id": "91533e204e6035df25b1425a3034fa02",
    "text": "Systems (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "6d6db13a20a08c0b53e01314b7d3ba9e",
    "text": ") The Common Business-Oriented Language (COBOL) is a high-level programming language developed during",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "4c83306c02ffa5c9cfbf183c6f06dd2c",
    "text": "created for its portability and Overview readability of programs as normal English instead of machine language. COBOL is known best for processing large quantities of business data record and data structure methodology. For example, a record clusters geneous data: ID, name, age, and address into a single unit. A committee computer manufacturers, users, and U.S. government organizations created CODASYL (Committee on Data Systems and Languages) to establish, the language standard to ensure COBOL’s portability across dissimilar systems. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "7d7ea3aab86b5fb94c3f5cac6c1e2990",
    "text": ") The controls prescribed are applicable to all IRS COBOL programs whether they are developed by the IRS or outside vendors for the IRS. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "0edc0991a42b52a9b8ffc4107b0b53a7",
    "text": ") The development of structured COBOL programs in accordance with this section is dependent on structured design. Basic Principles (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "aff6400b0c96536f2d603007823eaa5a",
    "text": ") Structured COBOL code is the implementation of the logic depicted in speciﬁcations. Module speciﬁcations directly correspond to the modules on the structure chart. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "1d95b2df6b9c09b60c007b6b9f9025d1",
    "text": ") Structure charts, and therefore module speciﬁcations and structured code, based on a top-down design of the application system. Each of the that constitute a structure chart should have a single entry point and a exit point. The logic of each of the modules is based on various of the three control structures: sequence, selection, and iteration. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "e6a0f7fa17a981edd0bc594613d0b47b",
    "text": ") These principles have been established with the understanding that programs are not always maintained by the original author. All structured programs will have the same visual format. Only the most common formats discussed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "1439c58dfd1d03e40fbce6f917fde2cd",
    "text": ") Structured programming is comprised of three logical structures: a. Sequence Structured b. Selection c. Iteration (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "91ffa14eb5a8fe98598f5ea3c103b7b6",
    "text": ") Sequence structure: In a sequential structure, the commands are sequence. The ﬂow of the program is to complete one instruction and then drop down and execute the next instruction and then the next until terminates the sequence such as the end of a paragraph. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "9e3598471ca46fa2a21dd9395ee6cab2",
    "text": ") Selection structure: In a selection structure the processing is dependent condition that is being tested. In COBOL, the selection structure is usually complished with an IF or an EVALUATE (the implementation of the case structure in COBOL) or with an implied IF such as the AT END clause in READ statement. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "d16463caa7ec1a864e4071bf0d5a5a54",
    "text": ") Iteration structure (LOOP STRUCTURE): The iteration structure causes something to be executed over and over again until some condition the repetition. Additional information is as follows: a. This structure is essentially the looping structure that has been used all of the programs.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "dfa8fbd09dc4572d2bf453ec1f9128e0",
    "text": "The controls prescribed are applicable to all IRS COBOL programs whether they are developed by the IRS or outside vendors for the IRS.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "ad705aa532704c4d40b3cb8f57236b61",
    "text": "2.5.3.4.3 (07-10-2020) COBOL Structured Programming",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "c5b073228b9df680f458dc89de382c6f",
    "text": "This structure is essentially the looping structure that has been used in all of the programs.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 32
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "9308b663c44f786ece87c9ff7fcaa6c4",
    "text": "b. When deﬁning iteration, there are two basic structures that a may implement: Do-While and Do-Until. c. The difference between the two structures is when the condition is In the Do-While structure the condition is tested before the loop is executed while in the Do-Until structure the condition is tested after loop has been executed. This means that with the Do-While structure there is a possibility that the loop will never be executed. d. The PERFORM...UNTIL used in the sample programs is an example the Do-While structure because the condition is tested before the executed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "1a6abd4b9f991d9ac5c0fd6bc8ccf6a2",
    "text": ") This section applies to all divisions of a COBOL program. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "730916ed5934eb944dac145746882523",
    "text": ") COBOL programs must be written in accordance with the American Standard Institute (ANSI). Where a standard is not speciﬁed in this relevant ANSI standard will be considered the established standard. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "c656fa3784d3caf071094b1e7298be5b",
    "text": ") Begin to insert comment line in these speciﬁed areas: a. IDENTIFICATION DIVISION:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "06bcbd308639ff67adb61b31aaa48218",
    "text": "Program Name (Prog-ID)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "77010863cde7149d7314d67333c316c7",
    "text": "Author Name",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "f2ddfd23f988288891cdc48a613af6c1",
    "text": "Installation (Usually with multiple locations)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "1668b262783246672ae7f07b397710cd",
    "text": "Date Written",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "229be9c36f32e018e08e4bc6fa53d146",
    "text": "Date Compiled",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "2d727f476235b719ef10b00f53e73964",
    "text": "Security Information b. ENVIRONMENT DIVISION:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "0d7cc67118bafc0b85801f5f2c60752d",
    "text": "Conﬁguration Section: a. Source-Computer - Describes the computer where the source be compiledb.Object-Computer - Speciﬁes the system where the program is designated/stored",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "f444c7dbb981bb39175ad193aebe41c8",
    "text": "INPUT/OUTPUT Section (Associated Input and Output ﬁles): a. FILE-CONTROL b. I/O CONTROL c. DATA DIVISION:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "ddb2b3d918f924907b161c44b0debd06",
    "text": "File Section - Deﬁnes the structure of data ﬁles",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "21fbe670a7ad094cc847acd0f9508263",
    "text": "Working-Storage Section - Describes data records not part of data ﬁles",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "dbccb83af5b9a57e39e33237d912e624",
    "text": "Linkage Section - Used if your program uses data from another program d. PROCEDURE DIVISION::",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "3ed3e4ed89606141e5455463a9bc9e36",
    "text": "Sections within this division must always start with paragraph e.g., MAIN or other descriptive paragraph names that describe their function. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "0002e74dc87be8539826c7f2d431578a",
    "text": ") Place division, section, and paragraph names on a line by themselves and start in column",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "18a98fac4b6339c5f9b23f839f18106c",
    "text": "This also applies to the module names corresponding to structure chart modules. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "b74717faed9da6faf2f3496901085ae5",
    "text": ") Insert a blank line between each Division name and the ﬁrst statement of Division. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "57980dae795411aa0e5f55998cdf39c2",
    "text": ") Insert a blank line between each Section name and the ﬁrst statement of Section.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "bd99ecf9f02956863643b97a48027b70",
    "text": "When deﬁning iteration, there are two basic structures that a language may implement: Do",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "b953e8d5f617bdfb5b9faef17f2eeeb6",
    "text": "While and Do",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "e36429a088aeb890a4aca63575a86411",
    "text": "Until. The difference between the two structures is when the condition is In the Do",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "14960f893b3d92b6fdf4f05d88f03386",
    "text": "While structure the condition is tested before the loop is executed while in the Do",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "65f2992f51fe99eb97cbfb42a2ee61d5",
    "text": "Until structure the condition is tested after the loop has been executed. This means that with the Do",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "5cdb42035d46053e799d6dc1a597f6df",
    "text": "While structure there is a possibility that the loop will never be executed. The PERFORM...UNTIL used in the sample programs is an example of the Do",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "a07a3e1246d29a69a8544b11883f5321",
    "text": "While structure because the condition is tested before the loop executed.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "e77ab4e19e41955724154e3d0b72726a",
    "text": "2.5.3.4.3.1 (07-10-2020) COBOL Programming Standards",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "e080c4dbf99a72aa5dfdc2bfc9a3cfab",
    "text": "COBOL programs must be written in accordance with the American National Standard Institute (ANSI). Where a standard is not speciﬁed in this manual, relevant ANSI standard will be considered the established standard.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "f8aa4b602a594d1eaeee0d3bbb331298",
    "text": "relevant ANSI standard will be considered the established standard. Begin to insert comment line in these speciﬁed areas: a. IDENTIFICATION DIVISION:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "06bcbd308639ff67adb61b31aaa48218",
    "text": "Program Name (Prog-ID)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "77010863cde7149d7314d67333c316c7",
    "text": "Author Name",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "f2ddfd23f988288891cdc48a613af6c1",
    "text": "Installation (Usually with multiple locations)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "1668b262783246672ae7f07b397710cd",
    "text": "Date Written",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "229be9c36f32e018e08e4bc6fa53d146",
    "text": "Date Compiled",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "2d727f476235b719ef10b00f53e73964",
    "text": "Security Information b. ENVIRONMENT DIVISION:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "0d7cc67118bafc0b85801f5f2c60752d",
    "text": "Conﬁguration Section: a. Source-Computer - Describes the computer where the source be compiledb.Object-Computer - Speciﬁes the system where the program is designated/stored",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "f444c7dbb981bb39175ad193aebe41c8",
    "text": "INPUT/OUTPUT Section (Associated Input and Output ﬁles): a. FILE-CONTROL b. I/O CONTROL c. DATA DIVISION:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "ddb2b3d918f924907b161c44b0debd06",
    "text": "File Section - Deﬁnes the structure of data ﬁles",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "21fbe670a7ad094cc847acd0f9508263",
    "text": "Working-Storage Section - Describes data records not part of data ﬁles",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "dbccb83af5b9a57e39e33237d912e624",
    "text": "Linkage Section - Used if your program uses data from another program d. PROCEDURE DIVISION::",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "447dd5ccc71365e3a080045f3f97d036",
    "text": "Sections within this division must always start with paragraph e.g., MAIN or other descriptive paragraph names that describe their function.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "d15e087e39a9be624b888211737a60f9",
    "text": "Place division, section, and paragraph names on a line by themselves and start in column",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "61d0788d135d9435bce7ff00e2f7394f",
    "text": "This also applies to the module names corresponding to structure chart modules. Insert a blank line between each Division name and the ﬁrst statement of Division. Insert a blank line between each Section name and the ﬁrst statement of the Section.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "a1bf3c718b87f9af2c834972d38a6714",
    "text": "a blank line between each Section name and the ﬁrst statement of the",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 33
    }
  },
  {
    "element_id": "91533e204e6035df25b1425a3034fa02",
    "text": "Systems (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "158bd856f3de3ce9dd87309c144ca664",
    "text": ") Do not split names or words between lines. If possible, avoid splitting between lines. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "0782bc2e89d8bf82bf663f5c3f6920df",
    "text": ") Only one statement per line is allowed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "f376609a11ed30a02f324b92c6267642",
    "text": ") With the exception of nested IF or EVALUATE constructs, end each with a period. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "2a4c4ff0c9c02e98f55d14b027287806",
    "text": ") Indent statements that are continued on another line at least two spaces the starting position of the initial line. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "e5a4dbe8d7f3462baed6e6e938a223a6",
    "text": ") Use blank lines and page ejects effectively. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "9446cd15bde38949b887929e1fe0e525",
    "text": ") Use meaningful names. Ensure names conform to IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "d02c4b1d4ee80f1c4734eac0a3fb5d88",
    "text": "Data Naming Standards. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "70447dd830ed1a144b5c6fb4d65af6cb",
    "text": ") Include the following paragraphs in the IDENTIFICATION DIVISION of all programs: AUTHOR, INSTALLATION, SECURITY, and REMARKS. When necessary, they will be annotated as COBOL comments. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "cdd36dae03c1010a34f6ab4163a8f8b0",
    "text": ") The AUTHOR paragraph will include: • The name and office symbols of the section(s) responsible for the tenance of the program. • At a minimum, the name of the last programmer/analyst to write or modify any of the code of the program. • It is a good practice to retain the names of the last few authors to quicker access to originators of code if problems arise. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "65cb6c9ddf788b6e552781f81c1215b3",
    "text": ") The INSTALLATION paragraph will contain “INTERNAL REVENUE (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "2ea939bdc5845de44d78e1571023dd0a",
    "text": ") The SECURITY paragraph will contain “FOR OFFICIAL USE ONLY”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "2b74efb35defeac6c51e3b180dfd7b3c",
    "text": ") REMARKS paragraph will describe the function of the program, the grams that are called, the ﬁles that are used by the program, and the date. At the developer’s option, this paragraph may also list modiﬁed and reasons for modiﬁcations after the program has been in production. often leads to quicker resolution of problems.) (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "67153f30a1d9e24f4a52e82c67147310",
    "text": ") Start each main clause (for example, the SELECT clause) in column",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "89c4ec6de3806756f1bee0e3f9205073",
    "text": ") Start each sub-clause in column",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "6b29a09a067a11730f3a94e0ce6711fe",
    "text": ") Start FD and",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "bee35b1606f7e6ed0b65427dbf7e3626",
    "text": "entries in column",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "1a150f5017599e81f8d8efb434296886",
    "text": "Clauses of FD entries will start in",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "e47a48982cf7c805f89dcb5192c9da8b",
    "text": ", one clause per line. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "419ac7fa1f46716a1d1509246100b515",
    "text": ") Put level numbers in sequential order to allow for future growth (e.g.,",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "53dd72d04e71d4a1f3f2e955dc754c63",
    "text": "other than",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "4ca11ffee6525d79a04eb15e4cef6816",
    "text": "). This allows for adding of new ﬁelds under a section without having to renumber a ﬁle layout or copybook. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "e2ba51afa6d7263bdb87d2f2d6070910",
    "text": ") Indent level numbers",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "f66ed9498f94238e8005f0b7e6109306",
    "text": "positions for each subordinate level. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "fe97d644b53dad391e16add9fb6973fd",
    "text": ") Indent data names (including condition names)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "e45f429b9d178e98e44de1de51c38a53",
    "text": "columns to the right of level number. For example, see the following ﬁgure. Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "385937ab53b2e0a3b1a0b72a9f69e05e",
    "text": "Do not split names or words between lines. If possible, avoid splitting literals",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "4b072e14ccb0edc0fa5716914d0addf0",
    "text": "(11-26-2001) COBOL Identiﬁcation Division",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "b3433319bd43841f06965ac213db2bb5",
    "text": "The name and office symbols of the section(s) responsible for the main",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "7017d9bba76814518c93db4107c31eb1",
    "text": "tenance of the program. At a minimum, the name of the last programmer/analyst to write or modify any of the code of the program. It is a good practice to retain the names of the last few authors to allow quicker access to originators of code if problems arise.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "4f052797ab3f694acc5ba4773d7d1496",
    "text": "quicker access to originators of code if problems arise. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "65cb6c9ddf788b6e552781f81c1215b3",
    "text": ") The INSTALLATION paragraph will contain “INTERNAL REVENUE (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "2ea939bdc5845de44d78e1571023dd0a",
    "text": ") The SECURITY paragraph will contain “FOR OFFICIAL USE ONLY”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "a3ffb5395fca247398346ff2d85b6b04",
    "text": ") REMARKS paragraph will describe the function of the program, the subpro- grams that are called, the ﬁles that are used by the program, and the date. At the developer’s option, this paragraph may also list modiﬁed and reasons for modiﬁcations after the program has been in production. often leads to quicker resolution of problems.) (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "67153f30a1d9e24f4a52e82c67147310",
    "text": ") Start each main clause (for example, the SELECT clause) in column",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "89c4ec6de3806756f1bee0e3f9205073",
    "text": ") Start each sub-clause in column",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "6b29a09a067a11730f3a94e0ce6711fe",
    "text": ") Start FD and",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "bee35b1606f7e6ed0b65427dbf7e3626",
    "text": "entries in column",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "1a150f5017599e81f8d8efb434296886",
    "text": "Clauses of FD entries will start in",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "e47a48982cf7c805f89dcb5192c9da8b",
    "text": ", one clause per line. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "419ac7fa1f46716a1d1509246100b515",
    "text": ") Put level numbers in sequential order to allow for future growth (e.g.,",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "53dd72d04e71d4a1f3f2e955dc754c63",
    "text": "other than",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "4ca11ffee6525d79a04eb15e4cef6816",
    "text": "). This allows for adding of new ﬁelds under a section without having to renumber a ﬁle layout or copybook. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "e2ba51afa6d7263bdb87d2f2d6070910",
    "text": ") Indent level numbers",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "f66ed9498f94238e8005f0b7e6109306",
    "text": "positions for each subordinate level. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "fe97d644b53dad391e16add9fb6973fd",
    "text": ") Indent data names (including condition names)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "0fb3240f78fbdd510a016009c3297b01",
    "text": "columns to the right of the level number. For example, see the following ﬁgure.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "8e844f9d9330c94d3fefdf766154c547",
    "text": "(11-26-2001) COBOL Environment Division",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "12edd17bbdb162254b812812eb0e6474",
    "text": "Indent data names (including condition names) 2 columns to the right of level number. For example, see the following ﬁgure.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 34
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "38c61aafa0ea0708f1ee9bc07657625c",
    "text": "COBOL Example - Data Name Indentations Data Name Indentations 02 NO-MORE-MASTERS-FLAG PIC X(5) 88 NO-MORE-MASTERS VALUE “TRUE”. 88 MORE-MASTERS VALUE “FALSE”.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "948a8ec8f8d4a8175fa3acd4c73d456f",
    "text": "Data Name Indentations",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "fa9f5d8375f8a38da63dc037b40c1081",
    "text": "NO-MORE-MASTERS-FLAG PIC X(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "91be6d69c0abdf47539dafbd13a09fa9",
    "text": "NO-MORE-MASTERS VALUE “TRUE”.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "77834f75beb38b722d21712ce1ff307b",
    "text": "MORE-MASTERS VALUE “FALSE”. Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "f0b04c0ab09e29269db2e6162349e6c3",
    "text": ") Start all PIC, VALUE, USAGE, OCCURS, and REDEFINES clauses in the same column, where possible. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "6c0c399ae512da09698e4bdc5e9d6484",
    "text": ") PIC clauses must not contain sequences of more than two identical symbols (except for edited ﬁelds). For example, use PIC X(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "f676ae32a2bc81fee12711330c9d81dc",
    "text": ") rather than PIC XXXX. edited ﬁeld such as PIC ZZ,ZZZ.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "7bd4d662522d9235f8feabdbe24625d6",
    "text": "will be allowed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "feaecfb8bb7b1744155e9fe74156aaf1",
    "text": ") Group levels according to function type for example; counters and to be used as internal program documentation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "570d96363f423749d4d999dfd0e04386",
    "text": ") Ensure that local variables and constants associated with one module ately follow each other in the DATA DIVISION. If a variable or constant is associated with more than one module, it should usually be deﬁned with the highest level module that references it. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "11fff4e7bf3a2d96e7b57acfcda1de4c",
    "text": ") Do not give ﬂags and indexes multiple uses. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "10e67479e4be71d5f94cf42c450af20e",
    "text": ") Initialize constants, variables and output record areas by using the initialize statement or as follows: • Initialize constants in working storage, including FILLER ﬁelds, with a VALUE clause. Use VALUE SPACES or ZEROS, not “b” or “",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "8ee397d11538bf5073617760cc95123e",
    "text": "”. • Initialize the variables in working storage (i.e., those ﬁelds that are changed during execution of the program) by using speciﬁc in the PROCEDURE DIVISION. • Initialize output record areas to clear buffers that are not overlaid program execution. One way to initialize an output record area is to move SPACES to the record as a group item, and then move ZEROS the numeric ﬁelds. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "e17db1111b8cf677a8e130b310fe16cd",
    "text": ") Use meaningful data names derived from the problem being solved. Where applicable, data names should be consistent with those used in the structure charts. COBOL allows names of up to",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "7a86dcf0d4fbbb078f573584ef126752",
    "text": "characters. Ensure that names conform with IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "28c1dc897563208ea117157e87df1222",
    "text": ". (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "b8b9e7c62a464378b21fdf6a2fca0359",
    "text": ") Avoid data names that convey little meaning. For example, see the following ﬁgure COBOL Example - Data Naming Standard INDEX, I, K, TR",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "6b8e83198f79a9cb4613591851e870b1",
    "text": ", COUNTER, EOT. Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "f0b04c0ab09e29269db2e6162349e6c3",
    "text": ") Start all PIC, VALUE, USAGE, OCCURS, and REDEFINES clauses in the same column, where possible. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "6c0c399ae512da09698e4bdc5e9d6484",
    "text": ") PIC clauses must not contain sequences of more than two identical symbols (except for edited ﬁelds). For example, use PIC X(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "f676ae32a2bc81fee12711330c9d81dc",
    "text": ") rather than PIC XXXX. edited ﬁeld such as PIC ZZ,ZZZ.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "7bd4d662522d9235f8feabdbe24625d6",
    "text": "will be allowed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "feaecfb8bb7b1744155e9fe74156aaf1",
    "text": ") Group levels according to function type for example; counters and to be used as internal program documentation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "1ca3d8b512df146e344cd7f08718a93f",
    "text": ") Ensure that local variables and constants associated with one module immedi- ately follow each other in the DATA DIVISION. If a variable or constant is associated with more than one module, it should usually be deﬁned with the highest level module that references it. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "304e2cc70a6605845d61648b084abf97",
    "text": ") Do not give ﬂags and indexes multiple uses. Initialize constants, variables and output record areas by using the initialize statement or as follows: • Initialize constants in working storage, including FILLER ﬁelds, with a VALUE clause. Use VALUE SPACES or ZEROS, not “b” or “",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "7d79722b254db8d1206f4b700f5c5a41",
    "text": "”. • Initialize the variables in working storage (i.e., those ﬁelds that are",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "60351aba4a469045cf4d7bd09e6f6f98",
    "text": "• Initialize constants in working storage, including FILLER ﬁelds, with a VALUE clause. Use VALUE SPACES or ZEROS, not “b” or “",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "ed0b6b0ba96897f460a58ed1e1fc4d43",
    "text": "”. • Initialize the variables in working storage (i.e., those ﬁelds that are changed during execution of the program) by using speciﬁc in the PROCEDURE DIVISION. • Initialize output record areas to clear buffers that are not overlaid program execution. One way to initialize an output record area is to move SPACES to the record as a group item, and then move ZEROS the numeric ﬁelds. Use meaningful data names derived from the problem being solved. Where applicable, data names should be consistent with those used in the structure charts. COBOL allows names of up to",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "7a86dcf0d4fbbb078f573584ef126752",
    "text": "characters. Ensure that names conform with IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "fe4b67701412af39ab083ebb2ce9f55b",
    "text": ". Avoid data names that convey little meaning. For example, see the following ﬁgure COBOL Example - Data Naming Standard",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "251d95278d36e82db03bc3fc4b131d18",
    "text": "Initialize constants in working storage, including FILLER ﬁelds, with a VALUE clause. Use VALUE SPACES or ZEROS, not “b” or “",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "a14cca79ed4a0489863b5e202c05a88b",
    "text": "”. Initialize the variables in working storage (i.e., those ﬁelds that are changed during execution of the program) by using speciﬁc statements in the PROCEDURE DIVISION. Initialize output record areas to clear buffers that are not overlaid during program execution. One way to initialize an output record area is to move SPACES to the record as a group item, and then move ZEROS the numeric ﬁelds.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 35
    }
  },
  {
    "element_id": "66a500cc174383311e067cd76db0f2fd",
    "text": "(13) Use data names that convey meaning. For example, see the following ﬁgure.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "4c1b41b8a55b98bf7f833ab2d23731c1",
    "text": "COBOL Example - Meaningful Data Names",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "5460983cf20f0d98203a4ef9965a2fa3",
    "text": "MESSAGE-INDEX TRANSACTION-COUNT NO-MORE-TRANSACTIONS-FLAG",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "5c3657145e767ad24c42e9c332c14012",
    "text": "Apply the PIC 9 versus PIC X standard to date ﬁelds in the following manner:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "3d95c19f010f781aecb47ebda43aed40",
    "text": "• Use PIC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "b9f087011e1788541e14580ca02e6fec",
    "text": "for date ﬁelds in situations where the particular date value in question will be used for numeric functions (e.g., calculations, computa- tions, estimations, etc.) rather than for accepting input or direct display. Assign four positions to the year ﬁeld (YYYY) and do not store non-date values or special characters in the date ﬁeld. • Deﬁne the data as necessary (PIC X, PIC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "073d51861ab0009b5d0269cd66f6207f",
    "text": ", PIC S",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "16b4d59e50515cd32e1c29b3cd72e60b",
    "text": ", or another format) in order to accommodate input that may be blank, coming from elec- tronic ﬁles, External Trading Partners (e.g., SSA), taxpayer submitted ﬁles, DB",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "95f7b0565025717dc77e81764a00de1e",
    "text": "special formats, unique database machine formats, or other formats. It is not necessary to use PIC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "b0ec5a3820c2070735d726ce97984703",
    "text": "when deﬁning ﬁelds that are accepting input. • Deﬁne the data as necessary (PIC X, PIC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "073d51861ab0009b5d0269cd66f6207f",
    "text": ", PIC S",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "6658b7d0161a6f538b90e4e6f57582fb",
    "text": ", or another format) in order to display data (e.g., reports, screens) or format/unformat display dates that contain special characters in edit ﬁelds (e.g., slashes, commas, dashes, etc., depending on the function requested). However, note that the Year Field must be four positions (YYYY). It is not necessary to use PIC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "a705ebb73780ea4b40d8f7636b8dabc3",
    "text": "when displaying data.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "b342fde2d5300dfaf7309e2fd6982a7f",
    "text": ") A functional module should be limited to",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "81fec20714e90286d845c17592c15ede",
    "text": "lines of executable code as a general rule. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "6ae68410e4128802e18f7455be3eb0ef",
    "text": ") Each module (not each paragraph within a module) must start on a new page with comment lines indicating the module number of the Structure Chart that is represented by the code and the function of the module as described on the Module Speciﬁcation. For example, see the following ﬁgure.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "bae7d6b7f71a9b4d67c026fa884c74b7",
    "text": "2.5.3.4.3.5 (07-10-2020) COBOL Procedure Division",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 36
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 37
    }
  },
  {
    "element_id": "017e4b5937b4d0fd2d77e38672ca30e3",
    "text": "COBOL Example - Structure Chart Structure Chart Example /** MODULE 2.4.3.7 * * (Description of module) * * GET-VALID-TRANSACTION. READ TRANSACTION-FILE AT END MOVE “TRUE” TO NO-MORE-TRANSACTIONS-FLAG. --rest of code--",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 37
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 37
    }
  },
  {
    "element_id": "80131ff445f1bcaf25b2878e262e4b21",
    "text": ") Module names in a COBOL listing must correspond to Structure Chart names. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 37
    }
  },
  {
    "element_id": "572b34de05ee357787bad7b976ba4cde",
    "text": ") Name a paragraph that is an implementation of a control structure (e.g., PERFORM-UNTIL, ELSE, CASE, nested IF-THEN-DO-UNTIL, etc.) in a way that explains its purpose. These paragraphs are not separate modules; they are paragraphs within the module. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 37
    }
  },
  {
    "element_id": "1aa66ecb0cf1111fafe39c3c424921b5",
    "text": ") Arrange modules in a program listing in either a horizontal or a vertical sequence corresponding to the Structure Chart level numbers, see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 37
    }
  },
  {
    "element_id": "327fb1b434eb679548bf22af188c2a40",
    "text": "COBOL Example - Structure Chart Level Numbers",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 38
    }
  },
  {
    "element_id": "c34d53185f8ed9097e39ff0a781f379c",
    "text": "COBOL Example - Structure Chart Level Numbers Structure Chart Level Numbers 0.0 0.0 1.0 1.0 2.0 1.1 3.0 1.2 1.1 2.0 1.2 2.1 2.1 2.1.1 2.2 2.1.2 2.3 2.1.2.1 2.1.1 2.1.2.2 2.1.2 2.1.3 2.1.3 2.2 2.2.1 2.2.1 2.2.2 2.2.2 2.1.2.1 2.3 2.1.2.2 3.0 etc. etc.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 38
    }
  },
  {
    "element_id": "448b395e605f7e20e1fd64c4734d476b",
    "text": "Code the READ statement and WRITE statement options one per line, indented 2 columns. See the following ﬁgure.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 38
    }
  },
  {
    "element_id": "505b8c81aff2a315b08e6309751cc0c3",
    "text": "COBOL Example - Read/Write Statement Options",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 38
    }
  },
  {
    "element_id": "8db5b102d274f13788177d92faa2d1d0",
    "text": "READ ﬁle-name WRITE record-name AT END AFTER ADVANCING identiﬁer LINES statements. statement. or, or, READ ﬁle-name WRITE record-name INVALID-KEY INVALID-KEY statements. statement.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 38
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 39
    }
  },
  {
    "element_id": "e60a318b7ffa32890cf2ef381aa1c37c",
    "text": "Handle all ﬁle openings and closings in any given module with one OPEN or CLOSE statement. The following ﬁgure depicts these formats:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 39
    }
  },
  {
    "element_id": "cf0d31f9c78bf7419c146dd41e37514a",
    "text": "COBOL Example - Opening and Closing Statements",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 39
    }
  },
  {
    "element_id": "be1c81a3a5ca083fc20c77a3739894d7",
    "text": "Opening and Closing Statements OPEN INPUT ﬁle-name-1 ﬁle-name-2 OUTPUT ﬁle-name-3 ﬁle-name-4 CLOSE ﬁle-name-1 ﬁle-name-2",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 39
    }
  },
  {
    "element_id": "f8bdae020ead30d0fb1cbd8a9ecd9306",
    "text": "COBOL Example - MOVE CORRESPONDING Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 39
    }
  },
  {
    "element_id": "e01e71861f0b1c5731ee8d4b5def29b7",
    "text": "exceptions: • Use the DIVIDE statement to compute remainders. • ADD X to (counter) and SUBTRACT X from (counter) are allowed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 39
    }
  },
  {
    "element_id": "c2a7a71673756856199ccdf2dffb1883",
    "text": ") STOP RUN must only occur once as the last logical statement in the main procedure of a program. EXIT PROGRAM may only occur as the last logical statement of the main procedure of a subprogram. EXCEPTION: In some cases, it may be justiﬁable to use a STOP RUN in a low-level module of a",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 39
    }
  },
  {
    "element_id": "5f260aaf528740f280a8041d60eadb91",
    "text": "large run. While using an On-Line program Customer Information Control System (CICS) in this case you need the GOBACK statement.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "2642ce62379e048f39a08c89402b06a8",
    "text": "System (CICS) in this case you need the GOBACK statement. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "913553422ce7b9ac7ee527d092cbca15",
    "text": ") A PERFORM statement must be used one at a time and contain a coinciding EXIT statement for each, preventing errors or executing the wrong code. Ex- plicitly identify paragraphs e.g., the following two ﬁgures. The ﬁrst ﬁgure illustrates a statement that would not satisfy this standard. The second ﬁgure illustrates a statement that satisﬁes this standard.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "13aeb7d7371645072589e440d584e1d4",
    "text": "PERFORM 0200-COMPUTE THRU 0200-EXIT",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "f90d312db8c80f6de955c19e5559dab0",
    "text": "The following ﬁgure illustrates the CASE/CASE-END statements standard.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "3ae57b41391029fe0512e4785996d02e",
    "text": "COBOL Example - CASE/CASE-END Statements",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "3ec71ad53f5b17b544e57008b8b5dfda",
    "text": "When a module is invoked via a PERFORM statement, represent the parameter table shown on the Structure Chart with comment lines. In the following ﬁgure, Parm-3 is both input to and output from Module-X.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "a4e480cfb594075b7d55966be6c79499",
    "text": "COBOL Example - PERFORM Statement,",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "f0188b1e96846c9848dd485844848547",
    "text": "PERFORM MODULE-X. * ** USING: Parm-1,Parm-2,Parm-3 * ** GIVING: Parm-3,Parm-4,Parm-5",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "01a84508b756e19b2946248f0f274451",
    "text": "When a module is invoked via a CALL statement, do not list the USING phrase as a comment line as it is part of the syntax. Group all parameters shown on the Structure Chart Diagram that are passed between the main program and the called module so that all of the input parameters precede the output pa- rameters. Represent the GIVING phrase as a comment line and identify the output parameters (since COBOL does not make the distinction between input and output parameters). In the following example Parm-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "a0202fa6c57fd1c43be92b474b3900df",
    "text": "through Parm-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "74562aa341993cd5345400fc60347bd1",
    "text": "are listed in the USING phrase, but not as a comment line. Any output parameter",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 40
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "463ccf31f70bc80319bc1e3eeb51a5ed",
    "text": "that is input to the module, such as Parm-3 illustrated in the following ﬁgure, is listed in the GIVING as a comment (so that it is not listed twice in the program code).",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "8486a0d768f713f39d7a538e4f733fa1",
    "text": "COBOL Example - CALL Statement CALL Module-X USING Parm-1,Parm-2,Parm-3 * ** GIVING Parm-3, Parm-4,Parm-5.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "ff33d9e2397c324dd9353179a7c6f00e",
    "text": "PERFORM Paragraph",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "77df984b5d7301cb11504f7c99cded7e",
    "text": "Name.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "40220d2f3760a4c26259a625fdb0f443",
    "text": "This format is used with USING and GIVING comment statements to implement a module call, or used without the comments to PERFORM paragraphs within a module (e.g., nested IFs, or the body of the PERFORM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "7aec3eac669f1cd3cd060da069f46b04",
    "text": "UNTIL structure.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "ff33d9e2397c324dd9353179a7c6f00e",
    "text": "PERFORM Paragraph",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "b8d1b8b64fd942bb5dfb8d9532739ab5",
    "text": "Name UNTIL Terminating",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "088dd7558329cb99295276c87165bd58",
    "text": "Condition.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "c936495f6d711103839f3aaad9aeb6bd",
    "text": "PERFORM Line",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "62a822a5830967227de02c62b8fcece5",
    "text": "Spacing",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "5d09fe58a4c1c8a90eb51a060d4c71b3",
    "text": "Paragraph Line",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "ca1917d872864742db3d13daf61f23d3",
    "text": "Count TIMES",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "28df282fd19ef4c13fef05dc07e3a7ac",
    "text": "This option executes a procedure a set number of times.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "965b55e656942ec2529f73d92493f3ab",
    "text": "The PERFORM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "1c2fedc90189b8f890fd21707de8966d",
    "text": "UNTIL may also be used to vary a subscript or index in a table",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "33ed01255631f34195654b91a64c5512",
    "text": "search routine. See the following ﬁgure.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "c7d91941221960cf147483333feb9a7a",
    "text": "COBOL Example - PERFORM Verb and Acceptable Formats",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "016bc73ea9e990672d9f064340850fdf",
    "text": "PERFORM Table-Search VARYING Table-Index FROM 1 BY 1 UNTIL Match-Found OR Table-Index GREATER THAN Max-Entries.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "5ab187cfc9ffc3860b51be0f5803bd6a",
    "text": "Implement the DO-UNTIL structure in one of two ways. The ﬁrst way is a PERFORM/PERFORM-UNTIL combination. See",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "b7af7dbada2b999514f782709255238d",
    "text": "COBOL DO-UNTIL Example 1 PERFORM Paragraph-Name. PERFORM Paragraph-Name UNTIL Terminating-Condition.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "75b22978397582bfa416c9a429a648e0",
    "text": "The second way to implement a DO-UNTIL structure is to use a switch to terminate the loop. See Figure 2.5.3-15",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 41
    }
  },
  {
    "element_id": "5d156d9efaa30f6866f6352327a77ae6",
    "text": "COBOL DO-UNTIL Example 2 MOVE True to Loop-Predicate. PERFORM Paragraph-Name UNTIL Loop-Predicate = False. ... Paragraph-Name. . . . Statements . . . IF Terminating-Condition * THEN Move False to Loop-Predicate. * END-IF",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 42
    }
  },
  {
    "element_id": "f4a657b66ebce56f0fe24faefe207b46",
    "text": "The following ﬁgure illustrates the format of the IF-THEN-ELSE statement.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 42
    }
  },
  {
    "element_id": "a34529a2d38367c8250a88b0d1446e28",
    "text": "COBOL Example - IF-THEN-ELSE Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 42
    }
  },
  {
    "element_id": "3f6c6a97e63dea0fe67797cb3e53814b",
    "text": "IF Condition * THEN True-Procedures ELSE False-Procedures. * END-IF",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 42
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 42
    }
  },
  {
    "element_id": "3306d6ddfe3a6f7683244303578360c7",
    "text": ") The ELSE part of the IF statement is optional when there are no actions to taken (i.e., “ELSE NEXT SENTENCE” is not required). The THEN and comments are required. The True-Procedure and False-Procedure are indented",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 42
    }
  },
  {
    "element_id": "1799c30c0e2b78158003e0b75a3e0e77",
    "text": "spaces from their corresponding THEN or ELSE. The IF and the corresponding END-IF keywords start in the same column. The THEN ELSE keywords are indented",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 42
    }
  },
  {
    "element_id": "4bab1fe61a4bc05a15c163075cf3a72d",
    "text": "spaces in from the IF. As a guideline, the positive condition (rather than the negative) should be tested in a conditional statement. In a compound conditional statement, negative and positive tests should not be mixed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 42
    }
  },
  {
    "element_id": "752d61661bc3eeb00bb75c47b91e3e0e",
    "text": ") When there are compound conditions associated with an IF statement, that the statement is as readable as possible. The best method of doing this depends on the particular condition. The following ﬁgures illustrate the two formats.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 42
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 43
    }
  },
  {
    "element_id": "ff730292ba745d996a2162577f0ee2f6",
    "text": "COBOL Example 1, IF-THEN-ELSE Statement Based on Conditions",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 43
    }
  },
  {
    "element_id": "ed2870e01784f8c00128d3f3c1a883f2",
    "text": "Format 1 – Putting each condition on a separate line: IF Condition-1 OR Condition-2 * THEN True-Procedures ELSE False-Procedures. * END-IF",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 43
    }
  },
  {
    "element_id": "ca4436999c773c3c5e21e3cfb00e99f5",
    "text": "Format 2 – Using parentheses to specify the order of evaluation for the individual conditions of more complex conditions:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 43
    }
  },
  {
    "element_id": "e3f434f1b7157505a1a680465d3fc729",
    "text": "IF ((Condition-1) OR (Condition-2)) AND Condition-3 * THEN True-Procedures ELSE False-Procedures. * END-IF",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 43
    }
  },
  {
    "element_id": "2b748ed0a8335048b5af01ca4ad8fb85",
    "text": "Do not nest IF statements more than 3 levels deep. See the following ﬁgure.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 43
    }
  },
  {
    "element_id": "31dcab6370cd538e0ec730ed3365fcba",
    "text": "* THEN IF Condition-2 AND Condition-3 * THEN True-Procedure-1 ELSE False-Procedure-1 * END-IF ELSE False-Procedure-2. * END-IF",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 44
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 45
    }
  },
  {
    "element_id": "c9707650405108cd34734bbcbe6520c8",
    "text": "COBOL Example - PERFORM Inner Test on Nested IF Statements Inner Test on Nested IF Statements IF Condition-1 * THEN PERFORM Inner-Test ELSE False-Procedure-2. * END-IF . . Inner-Test. IF Condition-2 AND * Condition-3 * THEN True-Procedure-1 ELSE False-Procedure-1. * END-IF",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 45
    }
  },
  {
    "element_id": "f8c83f596595294511d63da14e9cc7bc",
    "text": "Nested IF-THEN ELSE Statements * SELECT CASE. IF Condition-1 * CASE-1: Case-1-Statements ELSE IF Condition-2 * CASE-2: Case-2-Statements ELSE IF Condition-3 * CASE-3: Case-3-Statements ELSE * Error-CASE: Error-Case-Statements. * ENDCASE",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 46
    }
  },
  {
    "element_id": "e9feb1bfc515985290ee6505d75d81b0",
    "text": "Use the EVALUATE statement instead of long nested IF statements to test several conditions and specify different actions for each. The WHEN phrases determine selection. Case statements usually consist of the following commands; MOVE, ADD, PERFORM, etc..",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 46
    }
  },
  {
    "element_id": "e9feb1bfc515985290ee6505d75d81b0",
    "text": "Use the EVALUATE statement instead of long nested IF statements to test several conditions and specify different actions for each. The WHEN phrases determine selection. Case statements usually consist of the following commands; MOVE, ADD, PERFORM, etc..",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 46
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "21a84b909a3cc487b725741b9e76990a",
    "text": "COBOL Example - EVALUATE Statement EVALUATE STATEMENT EVALUATE X WHEN ‘A’ CASE 1 Statements (MOVE, ADD, PERFORM) WHEN ’B’ CASE 2 Statements (MOVE, ADD, PERFORM) WHEN OTHER’ Error-Case-Statements END-EVALUATE: Using ALSO and WHEN (Age < 16 ALSO Gender = ‘M’) WHEN: Using AND WHEN (Age < 16 AND Age > 13)",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "1b04c5d581a34ff83bca049eb56c0c70",
    "text": "Currently IRS applications hosted on IRM Mainframes, and have migrated to Enterprise COBOL compiler version",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "19b3b76c4ff206e7799a7240867c55b4",
    "text": "When COBOL programs are written they have to be compiled into object-code from source-code in order to be read by the computer. Some compiler warnings are more severe than others. The following warnings messages identiﬁed must be cleared before source- code can be moved into production:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "36a6234ce14a2980fbe206ebe0bf8df4",
    "text": "(07-10-2020) COBOL Compile Run-Time Warning Messages",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "2ae2ed5418d168a366f535c819a903f2",
    "text": "Warning messages like: IGZ",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "ae4ea3e7091fae687bd216a96f6c779b",
    "text": "W, IGZ",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "4244ef80a336cffd05860613d9414b4d",
    "text": "W and IGZ",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "0d0c10d638c81f1feed19dc64eed2f71",
    "text": "W - will display for new COBOL compiler with the ﬁrst two characters UL or UO (PROCGRP) with (e.g. UL",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "ebff901d7fb77c91a0d5733b17f69943",
    "text": "NCL vs. DB",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "b12d6d2c351985c3c8cde0ca04d3485d",
    "text": "NCL, ULNBL vs NCNB ), (ADD INITCHECK?) Example Warning message - IGZ",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "f9df786c92366a8489ddc94c6f4622fb",
    "text": "W The value data-item-value of data item data-name at the time of reference by statement number verb-number on line line-number in program program-name failed the NUMERIC class test or contained a value larger than the PICTURE clause as detected by the NUMCHECK compiler option. See exhibits (a -f) for more examples.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 47
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "d60001776a36430a0c799db9ea314123",
    "text": ") Create the ﬁle names from a base name and an optional period and suffix. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "0afb5a699eb481dc08304ef9399f7ef4",
    "text": ") Store very large ﬁles by date (for archive or delete). Make the date a part of the name (e.g. log ﬁles). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "7419d29514b53f853dcf19dfb9565e83",
    "text": ") Make the ﬁrst character of the name a letter. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "2b739b81dec85d9cdf9551ec687255ab",
    "text": ") Assign a ﬁle name that is unique in as large a context as possible. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "dfc868f4c2d23f0429fbdca0251eb39b",
    "text": ") Use uppercase and lowercase letters to name source code ﬁles like",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "02270ae432515dd18ca052578ec1e16e",
    "text": "argest” or “Percen",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "60756dc7d1b7962e47a64acda24adbf6",
    "text": "argest”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "d8db283d07f805f0f8dccc0bbed67f02",
    "text": ") Include comments in the module so other programmers will understand the modules’ purpose (ie., Title Section). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "b66f937e58d61752a615923700333db1",
    "text": ") Use System Name followed by ﬁle name. For example, the application is Teleﬁle (or EMS, TEPS, EFDS, EFTPS, etc.) and the ﬁle name is Return- Data. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "51f6755fa75c4ea620a6363eb38c92e5",
    "text": ") Include comments on the name (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "1d0a1f298cf4ff38f2baec6c2f0ee1c3",
    "text": ") Maintain a consistent File Naming Convention (FNC) by referencing IRM",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "e610c49f54da8d701f8b6e9e7cbee7ea",
    "text": "IT, Data Engineering, Naming Data Elements/Object(s) as a guide. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "f3acca3cd514f3f2dcd54c3297314b17",
    "text": ") Size Considerations:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "5c0b4c8261668a36c77f8211cffee13b",
    "text": "Limit the size of a source code ﬁle to",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "337d461f319d46a87b935279e1d1c48f",
    "text": "lines as large source code Files ﬁles can be very cumbersome.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "fde2777ef0fe86332d0597cce681b9f1",
    "text": "Per each line in a source code ﬁle, limit the number of characters per to",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "9c8b9b64da66930db6f7f3963643f323",
    "text": "or fewer characters.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "7a650eed7634636a8e33a24455066e58",
    "text": "Decompose long lines into smaller pieces, such that when the ﬁle is printed, all portions of the code will print out legibly.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "2685875c561d6b1a7a844b0ffb3a98f4",
    "text": "Indent subsequent sections of a longer line so that it is clear that these are continuations of the line above.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "25d9ced2e4afb6e19b5ac04c9ab87a9e",
    "text": "In the length of a line, include any commentary that follows the code the line.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "01c07d052eff0b88594c6ec811f5ea64",
    "text": "Where a function exceeds two pages, reexamine the design of the function.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "0eebdce56258be66daf229dbf4a79fcf",
    "text": "Especially consider if more than one function is involved or if sub- functions would be better in separate modules.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "5b66200a4dce5de0c3ac690ca8f8e6af",
    "text": "If functions are short and related to each other, then place them in source code ﬁle. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "bdf61eb259af6f8f3c9805f0f604c109",
    "text": ") Composition:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "eb7f661e0d35afaf03a56278d2f5fa34",
    "text": "Prologue",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "df498282bede20a9dfff2ee882b7bd64",
    "text": "Includes",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "7b28ffeee3be39d9916c36c9cbf8986b",
    "text": "Deﬁnes and Typedefs",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "6de36fd930d6a5645548d0f4c884d75e",
    "text": "Global Deﬁnitions",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "5759e42253b3cf9ea3f65c4a270ef71d",
    "text": "Function Placement (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "1ccd20a0a691a2c5602e0bc89ea09651",
    "text": ") Make the prologue ﬁrst in the ﬁle as it indicates what is in that ﬁle.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "65e36b6d75a3bb16e4a422e33826aa93",
    "text": "Create the ﬁle names from a base name and an optional period and suffix.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "ad888d0c2917e1282c81988ee18bff58",
    "text": "Use System Name followed by ﬁle name. For example, the application system is Teleﬁle (or EMS, TEPS, EFDS, EFTPS, etc.) and the ﬁle name is Return-",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "c7641c8b8ddb9285cccc4e161b2863fe",
    "text": "Maintain a consistent File Naming Convention (FNC) by referencing IRM 2.152.3 IT, Data Engineering, Naming Data Elements/Object(s) as a guide.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "5c0b4c8261668a36c77f8211cffee13b",
    "text": "Limit the size of a source code ﬁle to",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "79fd8685b6f5e977757372b76f6c702f",
    "text": "lines as large source code ﬁles can be very cumbersome. Per each line in a source code ﬁle, limit the number of characters per to",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "547b3364e5943b98505e182b539b195e",
    "text": "or fewer characters. Decompose long lines into smaller pieces, such that when the ﬁle is printed, all portions of the code will print out legibly. Indent subsequent sections of a longer line so that it is clear that these are continuations of the line above. In the length of a line, include any commentary that follows the code the line. Where a function exceeds two pages, reexamine the design of the function. Especially consider if more than one function is involved or if sub- functions would be better in separate modules. If functions are short and related to each other, then place them in",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "a595e04a21f54787a058fe1881b2eeee",
    "text": "Make the prologue ﬁrst in the ﬁle as it indicates what is in that ﬁle.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 48
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 49
    }
  },
  {
    "element_id": "3706f715873559d0ebbb4ed229f32a98",
    "text": "Avoid making descriptions so detailed that maintenance of the header takes more effort than is gained by increased understanding of the code itself.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 49
    }
  },
  {
    "element_id": "733905c2bd3df5bd1db053768c6b491f",
    "text": "Deﬁne and include certain header ﬁles, such as “stdio.h” at the application system level and for any program using the standard I/O library.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 49
    }
  },
  {
    "element_id": "a09c42afdfe0003635c4b12e0e443f49",
    "text": "(07-10-2020) C Header File in the File that deﬁnes the Function",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 49
    }
  },
  {
    "element_id": "ca7d16a4f8c68a2c753de12901a78fb0",
    "text": "Systems Header File Inclusion #end-if /* EXAMPLE */ (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "dc37604d56a4597d689ccc6286d52447",
    "text": ") Use a general-purpose header ﬁle for commonly used symbolic (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "eea62402a689b799d3b7c8fb57b4f7d0",
    "text": ") Do not nest Header ﬁles. The prologue for a header ﬁle must describe other headers need to be included for the header to be functional. Header Files (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "362ae7d3319192b918d994efabf8efa7",
    "text": ") Where a large number of header ﬁles are to be included in several source ﬁles, put all common include statements in one include ﬁle. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "1fa49321b61843436a8dd72abbb538df",
    "text": ") Avoid private header ﬁlenames that are the same as public header The statement #include “math.h” must include the standard library math File Names ﬁle if the intended one is not found in the current directory. If this is want to happen, comment this fact. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "2178bc447916b1054ee16599401fcbb3",
    "text": ") Don’t use absolute pathnames for header ﬁles. Use the <name> for getting them from a standard place, or deﬁne them relative to the directory. Use the “include-path ”option of the C compiler (-I on many tion systems) used in the Makeﬁle to handle extensive private libraries header ﬁles; it permits reorganizing the directory structure without alter source ﬁles. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "fbec4e9170e1912a7e518cfc81e4658a",
    "text": ") Place the deﬁnes and typedefs that apply to the ﬁle as a whole after includes. and Typedefs (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "d12e6fc5d6a4a4f8d3995b26a7ae8c1d",
    "text": ") Place a Deﬁne before the header ﬁles so that they will apply to the ﬁles. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "e2b81c43328f03d195d5a063bdc87846",
    "text": ") Place “constant” macros ﬁrst, then “function”’ macros, then typedefs enums. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "8aac6e827a4b78982fd1f006c388309e",
    "text": ") Place the global (external) data declarations after the Deﬁnes/Typedefs. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "93f40997cca9774bb6b9ca8c9c5a5fb8",
    "text": ") Use the order: a. Externs b. Non-static globals c. Static globals (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "c2f8c22319470c69577a8e4e5691e54c",
    "text": ") Place the deﬁnes immediately after the data declaration or embedded structure declarations when a set of deﬁnes applies to a particular piece global data (such as a ﬂags word). Ensure deﬁnes are indented to allow level deeper than the ﬁrst keyword of the declaration to which they (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "def3ff0657a98d41976c1fc533258400",
    "text": ") Place the functions last. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "b1f1e82fcff31ce41c38c5e180428ab6",
    "text": ") Place like functions together. Placement (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "cb3fc373602c344696c806d9f5ce1523",
    "text": ") Use a “breadth-ﬁrst” approach (functions on a similar level of together) rather than depth-ﬁrst (functions deﬁned as soon as possible or after their calls).",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "4ec20d53c48b898bf7c19f1379058ff4",
    "text": "Do not nest Header ﬁles. The prologue for a header ﬁle must describe what other headers need to be included for the header to be functional.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "78a0bf1857c8c9ff9dabc4bf9acb79e5",
    "text": "Where a large number of header ﬁles are to be included in several different source ﬁles, put all common include statements in one include ﬁle.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "072505dd342a5a99bf9e49507598a8b1",
    "text": "Place “constant” macros ﬁrst, then “function”’ macros, then typedefs and",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 50
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "d0edb37ada786e1b05d3d232e51f467e",
    "text": ") Use alphabetical order when deﬁning large numbers of independent utility functions. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "1a03494ee1148532f4c7c5d1ef81d3da",
    "text": ") For operator-directed programs, establish a ﬁle called “Readme” to both the ﬁle and issues for the program or a group of programs. For it is common to include a list of all conditional compilation ﬂags and what mean. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "a3631d38ac738cace2e386a912fd2530",
    "text": ") List ﬁles that are machine dependent, etc. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "0583abd16ad9b1ff32a40fa335d43e51",
    "text": ") The following subsections address global variable and structure (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "f77b3358f5e3e8244496df025cafd3ab",
    "text": ") Avoid the use of global variables unless you have cases where the use of global variables can actually make a program more readable by not function calls. Instead, pass variables by reference to functions that their value. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "4cb964b701301d209e426020a71ec54d",
    "text": ") Declare any global variables at the top of a ﬁle, before any function tions. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "df562c153cafa9a4561c4c62936cf43c",
    "text": ") Declare variables, which are global to only the functions in a single ﬁle, as “static”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "0233300d846f1e082d4d14ac86eabcda",
    "text": ") Use meaningful names (Ma",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "1d659e4e76680623d99cc10e78ab1320",
    "text": "ength=",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "02f70b476c07fed217fb3fcda3e6899d",
    "text": "characters). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "e8189aeb5e284233855907597190b573",
    "text": ") Separate the words of a compound variable by capitalizing the ﬁrst letter of every word. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "d170a4f0a71395eed3097803809629e0",
    "text": ") Start pointer names with “p”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "ce9ab9cf1577b292ba92aea52bfeb3d1",
    "text": ") Separate unrelated declarations, even of the same type, on separate lines. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "b18efd9a7b483077b93023e92f2e4444",
    "text": ") Tab the names, values, and comments so that they line up. See the table. C Example - Using Global Variables int Even",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "aac84108b85d220aec14516cc02c3a17",
    "text": "nit; /* event_init performed */ char Ta",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "7175517a370b5cd2e664e3fd29c4ea9d",
    "text": "or",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "47b79292cdc117b89d94617130d7d9f2",
    "text": "ype; /* type of the tax return form / char *",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "384c0b6dc96e6cefe4c53959267583d2",
    "text": "irs",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "7e4cb0467bd2dd5d49987c3a1712b4cc",
    "text": "ntry; /* ptr to",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "0348354ff7536727ab836cf4ae8ece23",
    "text": "st entry */",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "241d53bcd359d574162074a01bed1f63",
    "text": "C Example - Using Global Variables",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "2c2cec674908e5dd91f9305fdc50f325",
    "text": "If you declare a local structure – use lower case for the names. If you declare a global structure – use mixed case for the names. The variables that comprise the structure (structure elements) must follow the same rule as local or global variables",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "2d40940c50d0dec1ef6f263fc086b79a",
    "text": "Assign a structure to a variable in a separate statement.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 51
    }
  },
  {
    "element_id": "7a66f37d8c45a0691e6c3fb2c1a90309",
    "text": "C Example 1 - Recommended Syntax Structure",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 52
    }
  },
  {
    "element_id": "65377ee4b1c6be4dfb5b63ff5980bc3b",
    "text": "2) The following table illustrates a style where the opening brace ({) should be on the same line as the structure tag, and the closing brace (}) should be in column 1. Choose one of these styles for the opening brace ({) and consis- tently use it.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 52
    }
  },
  {
    "element_id": "d41b9390c5b42f7b4b8cd1d620bdc8b4",
    "text": "C Example 2- Recommended Syntax Structure",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 52
    }
  },
  {
    "element_id": "07af2ced347092c82e9e30a5fbf87b35",
    "text": "Do not use names with leading and trailing underscores for any user-created names as they are reserved for application system purposes. Most application systems use them for names that the user should not have to know.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 52
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "01f26191a562e4f30580004d414f5936",
    "text": ") The following paragraphs cite guidelines. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "c9e49aaa113a03ae8f51ee1846831c83",
    "text": ") Declare local variables at the start of, or just before, the block in which Names are used. If the variable name is going to be reused in a different block in same function then declare the variable at the start of the function. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "b6cad106daf937b05c23c60c6604cd7d",
    "text": ") Do not have a function contain two variables with the same name. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "849bfe775f8b21a401e1ca0e028018a6",
    "text": ") Avoid declaring variables within any block, (e.g., within a “for” block). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "ceaa1f653ee980efadc1473ca5394f42",
    "text": ") Use meaningful names (max_length=",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "02f70b476c07fed217fb3fcda3e6899d",
    "text": "characters). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "20732235c1d6838b4d9e6289dc6cc7db",
    "text": ") Begin all variable names with a lowercase letter. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "6c275ffacddc0c4b00de3bc8b919a80c",
    "text": ") Place the pointer qualiﬁer, * with the variable name rather than with the (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "b6ee479206e1c20451dfa71b6923d841",
    "text": ") Separate unrelated declarations, even of the same type, on separate (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "6a754c7bede7d02f9e0668ad67ab6fb5",
    "text": ") Include a comment describing the variable in the same line. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "40a6d65b58816736dcb611d95932c792",
    "text": ") Tab the names, values, and comments so that they line up. An example follows.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "1d2c2c6f6aa6aaf9ea6ea4d2eef3ffc1",
    "text": "C Example - Local Variable Names",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "953a6cde78a27dad66d09a806542d4d3",
    "text": "Local Variables Names int event_init; /* event_init performed */ Char tax_form_type; /* type of the tax return form */ Char *ﬁrst_entry_p; /* ptr to 1st entry */",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "192aadc98c8d6b982ea9aa2aadafee9b",
    "text": "Use conventional abbreviations for common variables.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "44b18e9a2b20d2465b5bceae61fc186c",
    "text": "Variables Abbreviations average avg database db Length len message msg number num position pos String str",
    "type": "UncategorizedText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 53
    }
  },
  {
    "element_id": "23af2a7ce30eeee7326bde948e168162",
    "text": "numerical constants to facilitate changes when it is used throughout whole program; and use actual numbers in small scope code.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 54
    }
  },
  {
    "element_id": "909c16c23dbf5a43d10a14b4906f7ac9",
    "text": "C Example - Using Conventional Constants",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 54
    }
  },
  {
    "element_id": "eeafdb8b65bec42ddc7638a0a9a58a0b",
    "text": "Use the enumeration data type to declare variables that take on only a set of values, since additional type checking is often available. Declare each ﬁeld in an enum on a separate line. Ensure the enum type name has a tag, in upper case with “_E” appended to their name.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 54
    }
  },
  {
    "element_id": "f489cb39c9dfa7cd7ca060914f65e5b4",
    "text": "Use the enumeration data type to declare variables that take on only a discrete set of values, since additional type checking is often available.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 54
    }
  },
  {
    "element_id": "23c25cfa81b0c1165183539c00d8e25d",
    "text": "Ensure the enum type name has a tag, in upper case with “_E” appended to",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 54
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "4ecc92b93104e58657d8709705d79713",
    "text": "Ensure each ﬁeld in an enum type is in upper case separated by underscores.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "400d1d50c391ba9237536a25ca40561f",
    "text": "C Example - Enumeration Data Example of Enumeration Data enum ACMW_E { ACMW_IB_TP_INTERFACE = 5001, ACMW_IB_USER_VALIDATION = 5002 }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "31b30b0a8d472eabc91e11b13a6a5ce7",
    "text": "Name all quantities that must remain unchanged throughout a program using the “#deﬁne” capability. The deﬁned name must be in upper case letters.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "47677a61d363995692a46afc1037c80a",
    "text": "2.5.3.5.6.5 (07-10-2020) C Symbolic Constants - #deﬁne",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "244d82da9efd1d7fbc104f5cd81f4915",
    "text": ") This subsection addresses: a. return values b. parameter lists c. function body d. function prototype e. function naming (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "bd858735936f434f5b6291818d43e87f",
    "text": ") Explicitly declare all return values. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "037d1efad1c815b3b1d4b243e2cc495a",
    "text": ") Do not default to int; if the function does not return a value then give it type void. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "80e0b5b5668542b72092ce5563967993",
    "text": ") If the value returned requires a long explanation, give it in the prologue. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "d9ae1de8c6960524b7346c65fafb144f",
    "text": ") If the function and its parameter list is longer than one line, indent lines after the ﬁrst one from the left margin so that the second line of the parameter list starts directly below where the parameter list begins on the ﬁrst line. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "b4f3557bdf99b11d2e4197ca836e3264",
    "text": ") Ensure a function that returns information via one or more of its parameters only returns status information in its name. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "558f920ea279c5e620ee8b905b5545b3",
    "text": ") Ensure each parameter passed to a function occurs on a separate line in function prologue with a short comment describing its function.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "03db2a6041bd02d369d128b897e8fb68",
    "text": "Ensure each parameter passed to a function occurs on a separate line in the function prologue with a short comment describing its function.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 55
    }
  },
  {
    "element_id": "e591d5f2021c66b684d5250efd93dba3",
    "text": "Avoid comments that are clear from the code. Such information rapidly gets out of date, is redundant and clutters the code.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 56
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 57
    }
  },
  {
    "element_id": "24aa11f2395b9d54b676b9cd01867646",
    "text": "Place the following header at the beginning of the ﬁle:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 57
    }
  },
  {
    "element_id": "949a21bb8a600a0de7a4291843fd2f19",
    "text": "To clearly identify all the changes, when doing code reviews, print out the information. Look at Clea",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 57
    }
  },
  {
    "element_id": "c15741dba365aabe966a754af0c5b02d",
    "text": "ase to identify the revision date. If enough information is there, look at the header for speciﬁcs. Not putting it in the code reduces your options to hoping the Clea",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 57
    }
  },
  {
    "element_id": "71f00708ce16b450c5f5a3ac84b7d4e5",
    "text": "ase information is sufficient, and doing a line-by-line review in Clea",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 57
    }
  },
  {
    "element_id": "8d9e421e83cb2b04858430a31332cb9c",
    "text": "ase until you ﬁnd the change.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 57
    }
  },
  {
    "element_id": "18a3700bb9050d44a5290e169904690a",
    "text": "* Description: A description of the major task(s) performed by * routine. It should be a series of one or more simple * verb/object statements * Input parameters: * Output parameters ********************************************************************/",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 58
    }
  },
  {
    "element_id": "501c751c7c95928f31028e34bd92e9d5",
    "text": "comment form. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 58
    }
  },
  {
    "element_id": "74c7797bf18f1786ee3e282742f2af88",
    "text": ") Present code in paragraph form prior to a block of code. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 58
    }
  },
  {
    "element_id": "94ccf4d8d830f2c44246279e9089f436",
    "text": ") Use comments for cohesive blocks of code when they explain the purpose of the block in accomplishing a cohesive task. This enables the reader to under- stand the function being implemented. Thus, the reader will be able to quickly ﬁnd the appropriate section of code without getting bogged down in coding details for other sections of code. For example:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 58
    }
  },
  {
    "element_id": "e7e0c9c7e373ed4425697a30993b06b4",
    "text": "/********************************************************* * LOCAL VARIABLES and CONSTANTS * **********************************************************/ /********************************************************** * cleanup_pipeline PROCESSING * **********************************************************/",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 58
    }
  },
  {
    "element_id": "cd45dc3f96fab3a3afb24e9e50139105",
    "text": "Function Comments if (argc > 1) { /* Get input ﬁle from command line. */ if (freopen(argv[1], “r ”, stdin) == NULL) { perror (argv[1]);",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 58
    }
  },
  {
    "element_id": "2ab51b0db900dc20f51f66859aa727ad",
    "text": "and Source Code Standards 2.5.3 page Function Comments } } (6) Very short comments may appear on the same line as the code they but must be tabbed over to separate them from the statements. (7) If more than one short comment appears in a block of code, they must be tabbed to the same tab setting. For example: C Example 3 - Use of Multiple Short Function Comments if (a == EXCEPTION) { b = TRUE; /* special case */ } else { b = isprime(a); /* works only for odd a */ } (1) This subsection addresses the following topics related to statements: a. Statements per Line Statements b. Single Statement Blocks c. Multiple Statement Blocks d. Levels of Control Structure Nesting e. Goto Statement f. Break Statement g. Null Statement h. Conditional Statement i. Exit Statement j. Default Truth Value k. Increment and Decrement Operators l. Added Statements for Debugging (1) Generally, source code should depict one statement per line. per Line (1) Block off even a single statement following a “while”, “if”, “else”, etc.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 59
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 59
    }
  },
  {
    "element_id": "9fbe4d422e6d45c92385ba7abdb85682",
    "text": "and Source Code Standards 2.5.3 page Function Comments } } (6) Very short comments may appear on the same line as the code they but must be tabbed over to separate them from the statements. (7) If more than one short comment appears in a block of code, they must be tabbed to the same tab setting. For example: C Example 3 - Use of Multiple Short Function Comments if (a == EXCEPTION) { b = TRUE; /* special case */ } else { b = isprime(a); /* works only for odd a */ }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 59
    }
  },
  {
    "element_id": "78b6fc1bbb55c2263dc16039c14c763c",
    "text": "Very short comments may appear on the same line as the code they describe, but must be tabbed over to separate them from the statements.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 59
    }
  },
  {
    "element_id": "2de4031ee601f4c2654739c59af12b18",
    "text": "if (a == EXCEPTION) { b = TRUE; /* special case */ } else { b = isprime(a); /* works only for odd a */ }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 59
    }
  },
  {
    "element_id": "7d0ef6664e80920390081d5d7052995c",
    "text": "2.5.3.5.9 (07-10-2020) C Statements",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 59
    }
  },
  {
    "element_id": "9592302a35532313e3b9d104bdc5910d",
    "text": "This subsection addresses the following topics related to statements:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 59
    }
  },
  {
    "element_id": "40c21be4b7cb112d3d6f2d5c2342dba2",
    "text": "a. Statements per Line b. Single Statement Blocks c. Multiple Statement Blocks d. Levels of Control Structure Nesting e. Goto Statement f. Break Statement g. Null Statement h. Conditional Statement i. Exit Statement j. Default Truth Value k. Increment and Decrement Operators l. Added Statements for Debugging",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 59
    }
  },
  {
    "element_id": "0154a9dc3f8eb0fda3566384f1b55e14",
    "text": "Using the curly braces “{}” is required only when there is a block of more than one statement. However, putting in the braces makes the scope of the control statement very clear and helps to protect the code in the event that a second line is added to the block if the single line contains a macro, which translates into more than one line of code.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 60
    }
  },
  {
    "element_id": "5e413cea973ba25d370f6c953ec147df",
    "text": "statement very clear and helps to protect the code in the event that a line is added to the block if the single line contains a macro, which into more than one line of code. C Example - Single Statement Blocks Single Statement Blocks if (SomeCondition == TRUE) { ThisVariable = SomeVariable; } (1) Statements that affect a block of code (i.e., more than one statement) must either have the opening brace “{”at the end of the line containing the statement, or the opening brace must be on the line immediately below lined up with the ﬁrst letter of the control statement. (2) Indent the body of the block one step from the control statement. (3) Place the ending brace, “}” on a line by itself and at the same indentation as the control statement. (4) Choose one of the two styles and use it consistently: C Example 1 - Multiple Statement Blocks Multiple Statement Blocks 1st Style: If (condition) { statements(s) } else if (condition) { statements(s) } for (loop control expressions) { statements(s) }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 60
    }
  },
  {
    "element_id": "3470a7bf1ac2c231334cb7d16d04855f",
    "text": "(07-10-2020) C Multiple Statement Blocks",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 60
    }
  },
  {
    "element_id": "dafba5f71aa8b9db0051a11ad224df74",
    "text": "C Example 1 - Multiple Statement Blocks Multiple Statement Blocks 1st Style: If (condition) { statements(s) } else if (condition) { statements(s) } for (loop control expressions) { statements(s) }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 60
    }
  },
  {
    "element_id": "86a5428c3ceaf1044eea91c3ac7fa464",
    "text": "and Source Code Standards 2.5.3 page Multiple Statement Blocks while (condition) { statements(s) } switch (expression) { case constant1; statement(s) case constant2; statement(s) default; statement(s) } C Example 2 - Multiple Statement Blocks 2nd Style Multiple Statement Blocks if (condition) { statement(s) } else if (condition) { statement(s) } for (loop control expressions) { statement(s) } while *condition) { statement(s) }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 61
    }
  },
  {
    "element_id": "5fc5c9fa28f51ebe699eb57ba7bb071a",
    "text": "Multiple Statement Blocks while (condition) { statements(s) } switch (expression) { case constant1; statement(s) case constant2; statement(s) default; statement(s) }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 61
    }
  },
  {
    "element_id": "9adab93249cc5d534b3a5e0d79b10b55",
    "text": "C Example 2 - Multiple Statement Blocks",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 61
    }
  },
  {
    "element_id": "cbf2aa5029ba469db24f8a2fdbcb1768",
    "text": "2nd Style Multiple Statement Blocks if (condition) { statement(s) } else if (condition) { statement(s) } for (loop control expressions) { statement(s) } while *condition) { statement(s) }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 61
    }
  },
  {
    "element_id": "dbd517bfea3f552fcb4d73607dfea828",
    "text": "46 2.5 Systems 2nd Style Multiple Statement Blocks switch (expression) { case constant1; statement(s) case constant2; statement(s) default; statement(s) } (1) Do not nest conditional statements, such as “while”, “if”, “else”, more than 4 levels. If more levels are required, consider using a function at one of the of Control higher levels. Nesting (1) Do not use the Goto statement. (1) If a particular case in a switch statement is meant to drop through to the next case (i.e., it has the same effect), the fact that the earlier case has no Statement statement must be explicitly noted with a comment. For example: C Example - Switch & Break Statement Switch & Break Statement switch(switch_form) { case P1040 : /* same action as for 1065; no break */ case P1065: process_1040(); break; default : /* if not 1040 or 1065, no action taken */ break; } (1) Generally, Null statements should include a comment line.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 62
    }
  },
  {
    "element_id": "9c23807344b009e9d0466dc0639e553e",
    "text": "2nd Style Multiple Statement Blocks switch (expression) { case constant1; statement(s) case constant2; statement(s) default; statement(s) }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 62
    }
  },
  {
    "element_id": "07537a92cb109e6c89716b5c1c5b5f05",
    "text": "C Example - Switch & Break Statement Switch & Break Statement switch(switch_form) { case P1040 : /* same action as for 1065; no break */ case P1065: process_1040(); break; default : /* if not 1040 or 1065, no action taken */ break; }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 62
    }
  },
  {
    "element_id": "c20b7ebe8071a445320c9ae8dd051035",
    "text": "C Example - Switch & Break Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 62
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 63
    }
  },
  {
    "element_id": "040fa83f543686276e2423b5ca96eb59",
    "text": "Place the null body of a “for” or “while” loop alone on a line and commented so that it is clear that the null body is intentional and not missing code.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 63
    }
  },
  {
    "element_id": "a5f43193cd026724f42af3fae1ca7548",
    "text": "C Example - Null Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 63
    }
  },
  {
    "element_id": "2f5da73ffba35750837eb74aedd176f8",
    "text": "C Null Statement while (*dest++ = *src++) ; /* VOID */",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 63
    }
  },
  {
    "element_id": "44fd8bc572e14bcaabadb7bc625b70d9",
    "text": "2.5.3.5.9.8 (07-10-2020) Conditional Statement",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 63
    }
  },
  {
    "element_id": "550f028c7e1eee3d0a3e3e0ccc273a32",
    "text": "Break out the function call onto a separate line followed by a new line contain- ing the conditional statement. Often a program will branch based on the success or failure of a function call. Consider the following excerpts of source code, the ﬁrst excerpt is easier to understand than the second excerpt.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 63
    }
  },
  {
    "element_id": "ff09a1ceede7662fb118a5ad43732b0f",
    "text": "success or failure of a function call. Consider the following excerpts of code, the ﬁrst excerpt is easier to understand than the second excerpt. C Example 1 - Conditional Statement Conditional Statement pFileHandle = fopen(“some_ﬁle ”, READ_ONLY); if (pFileHandle == NULL) { printf(“Could not open ﬁle; program terminating.”); TerminateApplication(); } else { DoSomething(); } C Example 2- Conditional Statement Conditional Statement if ((pFileHandle = open(“ some_ﬁle”, READ_ONLY))== NULL) { printf(“Could not open ﬁle; program terminating.”); TerminateApplication(); } Else { DoSomething(); }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 63
    }
  },
  {
    "element_id": "91533e204e6035df25b1425a3034fa02",
    "text": "Systems (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "30695793814be1440e796e7393a550bd",
    "text": ") The preceding “fopen” example demonstrates a style, which helps to avoid internal side effects. “Side effect” as used in this example refers to the fact the reader may focus on the “if (xxx == NULL)” aspect of the statement and not fully realize that there is a call to “fopen()”. The other danger of this type compound statement is the potential for completely changing the meaning if the parentheses around the“",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "a0fb903525dc10dccaa4bd72bed4fe5b",
    "text": "il",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "07f515a70f91a53f94672745c00f3172",
    "text": "andle = open()”part are left off. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "8098e767253afcb8a632a717f4cdd621",
    "text": ") Except for use in error-handling functions, avoid explicit use of the “exit();” statement. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "6a21def27f4c53c410eb0e11e88096b7",
    "text": ") Use explicit comparison even if the comparison value will never change. Value (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "df76b36127f2f310481cd88f0e36d226",
    "text": ") If you include statements to print out information during debugging, use cessor switch(es) in the makeﬁle to allow compile-time control of the debug Statements output, and use #ifdef statements to control inclusion of the debug For example: C Example - Printing Out Statement for Debugging #ifdef DEBUG_",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "6719d5c1e634f4acc61055abc9b7f6f0",
    "text": "printf(some debug statement); Fprint(<pointer to FML buffer>); #end-if (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "b6343d6da1dffd7a2c7e4860a9b8baba",
    "text": ") Do not use the ternary conditional operator, “?:” in the main program, to make the code more readable. It can still be used in macros. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "da4dde69d013790d6d108d882b406f5e",
    "text": ") An increment or decrement operation should be explicitly placed in a statement so it would be clear what is occurring and when. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "7b2dc93b70af6f49ae1f1b2d84b38251",
    "text": ") Ensure that all operators which take two parameters have a single space on either side of the operator. This makes it very handy to use an editor to for a variable assignment; you need only search for “a =” and not “a =” as as “a= ”. It also makes the code more readable. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "ca8ed1f8fe12d1e1d66c75417af2d5cf",
    "text": ") In contrast to binary operators, ensure that all unary operators (e.g., a sign or the address operator, “&”) have no space between the operator and object. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "183b9a43a6b91b12254a10529d53eed7",
    "text": ") Where operator precedence must be known to determine the meaning of an expression, use parentheses to eliminate any ambiguity, which might arise from lack of knowledge of operator precedence. For example, to increment variable pointed to by the pointer “",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "0bfe935e70c321c7ca3afc75ce0d0ca2",
    "text": "u",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "a7aae15040606910df854e80086be40a",
    "text": "imes”, use “(*",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "0bfe935e70c321c7ca3afc75ce0d0ca2",
    "text": "u",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "b20d58ade9a5096e729a859b119f71dc",
    "text": "imes)++”. use of parentheses makes it clear that the contents of location “",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "0bfe935e70c321c7ca3afc75ce0d0ca2",
    "text": "u",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "76bc8186ec0121182c58b5d6f66bb9e9",
    "text": "imes” being incremented and not the address itself. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "defdf5f2cba32aeb5b9a46da07d18c45",
    "text": ") The ternary conditional operator may be useful in parameter lists and as a return value. Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "ee7686acd8558f7d8638ef0b68dfe228",
    "text": "The preceding “fopen” example demonstrates a style, which helps to avoid internal side effects. “Side effect” as used in this example refers to the fact that the reader may focus on the “if (xxx == NULL)” aspect of the statement and not fully realize that there is a call to “fopen()”. The other danger of this type of compound statement is the potential for completely changing the meaning if the parentheses around the“",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "a0fb903525dc10dccaa4bd72bed4fe5b",
    "text": "il",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "f208ec95be8494b9c1d39809ffe65ada",
    "text": "andle = open()”part are left off.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "92b82d5fcbdfb711c170af77727c28a0",
    "text": "Do not use the ternary conditional operator, “?:” in the main program, to make the code more readable. It can still be used in macros. An increment or decrement operation should be explicitly placed in a statement so it would be clear what is occurring and when. Ensure that all operators which take two parameters have a single space on either side of the operator. This makes it very handy to use an editor to for a variable assignment; you need only search for “a =” and not “a =” as as “a= ”. It also makes the code more readable. In contrast to binary operators, ensure that all unary operators (e.g., a minus sign or the address operator, “&”) have no space between the operator and object. Where operator precedence must be known to determine the meaning of an expression, use parentheses to eliminate any ambiguity, which might arise from lack of knowledge of operator precedence. For example, to increment variable pointed to by the pointer “",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "0bfe935e70c321c7ca3afc75ce0d0ca2",
    "text": "u",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "a7aae15040606910df854e80086be40a",
    "text": "imes”, use “(*",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "0bfe935e70c321c7ca3afc75ce0d0ca2",
    "text": "u",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "a2ab9343e8604a9cc6df7c6dd4facfa1",
    "text": "imes)++”. This use of parentheses makes it clear that the contents of location “",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "0bfe935e70c321c7ca3afc75ce0d0ca2",
    "text": "u",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "529f6502100bc1a7613406c281cf75b8",
    "text": "imes” being incremented and not the address itself. The ternary conditional operator may be useful in parameter lists and as a return value.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "ca9cae58b9b7750cb3fea2b3726ff208",
    "text": "Do not use the ternary conditional operator, “?:” in the main program, primarily to make the code more readable. It can still be used in macros.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "1f54834dd6269f2dc2f7154c25628bfd",
    "text": "The ternary conditional operator may be useful in parameter lists and as a",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 64
    }
  },
  {
    "element_id": "4a5932b15bb48b010aa7ce8e71de35f3",
    "text": "Due to the constraint that not more than one database can be open at a time, always check to see if a database is open before there is a call to open one.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "05c97b8020e1928a2f1c51dee792c2c6",
    "text": "name, the ﬁle name, and the error message. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "f6281f3310bf25a072e17037d2ca95ad",
    "text": ") Minimize overhead processing and optimize memory allocations. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "8f295ac701f40a4153506ca313a23534",
    "text": ") Do not pass more than one variable or structure to an ESQL/C function. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "f0e2f126faff9af6c837e62f000cbcbb",
    "text": ") If more than one data value needs to be populated, then create an array. the pointer of the array to the ESQL/C function. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "dd61a702a8453505e92408e5124ddfa3",
    "text": ") If more than one variable needs to be populated, then create a structure or linked list and pass the structure or linked list pointer to the ESQL/C (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "db720f90a563054217681f4ef0befc63",
    "text": ") Two calls must be made to retrieve data for arrays, structures, or linked In the ﬁrst call, there must be an ESQL/C function call that returns the of values to be collected. The calling function will then allocate memory in array or structure to contain the desired data. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "1c51d8304d6b6dea3823182996b34ce9",
    "text": ") In the second call, the data must be populated into the array, structure, or linked list. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "28f80a8c4d454e1487c29a2dcf3e6fb8",
    "text": ") Test SQL statements individually before embedding them in C code. This approach will increase the likelihood that the embedded code will work properly incorporating the tested SQL statements. This should be a fast reducing activity and a great enhancement. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "ce66ba594fe4ecf96ad892fa1ba55c8d",
    "text": ") Capitalize all reserved words, (i.e., SELECT, UPDATE, INSERT, etc.). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "a83e9236e246bd3dbd4cefb1915a8a03",
    "text": ") Use ORDER BY only when absolutely needed – if the calling program not require sorted data, do not use ORDER BY.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "128de59900f9cb8a7c04f502a33adae6",
    "text": "2.5.3.5.11.3 (07-10-2020) ESQL/C Performance",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "876c5388f159b1171f83477eb70f2a67",
    "text": "Minimize overhead processing and optimize memory allocations.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "723a1ad82369b1491f1e64679e1b5af5",
    "text": "If more than one variable needs to be populated, then create a structure or a linked list and pass the structure or linked list pointer to the ESQL/C function.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "2f0f16fddd56d39caf375a012d7bc1a8",
    "text": "Use ORDER BY only when absolutely needed – if the calling program does not require sorted data, do not use ORDER BY.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 65
    }
  },
  {
    "element_id": "f86cbcb940f4560e996ca69ec72ade59",
    "text": "For negative nested subqueries (selecting rows from a table where some condition in another table is not true), experiment with both the NOT EXISTS and NOT IN constructs to determine which is faster in your situation.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 66
    }
  },
  {
    "element_id": "b75593a084e619e7092d7bab29786e02",
    "text": "For discrete lists of values, use the “IN”operator,( e.g. “WHERE city in (‘New York’, ‘Sydney’))” instead of “WHERE city = ‘New York’ OR city = ‘Sydney’”.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 66
    }
  },
  {
    "element_id": "c6c25fc7616c26ecec64a987f50b9f55",
    "text": "Where the select statement does not ﬁt on a single line, align the columns from the various lines as in the following excerpt of code.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 66
    }
  },
  {
    "element_id": "160a658cdd96057275c69b519fc83414",
    "text": "The following excerpt of source code table exhibits the above rules:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 66
    }
  },
  {
    "element_id": "b78e1b3d66a1e0957f3ff50f3592b391",
    "text": "SQL Example - DELETE Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 66
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 67
    }
  },
  {
    "element_id": "cbcb81c276d6d180554195498459fa63",
    "text": "User parentheses rather than the implicit SQL precedence rules for logical operators in a WHERE clause. Consider the following excerpts of source the ﬁrst excerpt is incorrect, the second excerpt is correct.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 67
    }
  },
  {
    "element_id": "5667fd841b4993d73cc0524b9ab01779",
    "text": "SQL Example - Incorrect Use of WHERE Clause",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 67
    }
  },
  {
    "element_id": "087baecb06ffbb8ad7b6c732dd672670",
    "text": "Incorrect Use of Where clause SELECT COUNT(*) FROM emp WHERE job_desc LIKE ’widget%’ AND name LIKE ’J%’ OR city = ’Sterling’;",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 67
    }
  },
  {
    "element_id": "371b9485b1976fa9dd2f493748ffdcf1",
    "text": "SQL Example - correct Use of WHERE Clause",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 67
    }
  },
  {
    "element_id": "df6bbba823f2ba04f8e9101353142845",
    "text": "For further information refer to the Enterprise Standards Proﬁle (ESP) Attach- ment 1 Enterprise Data Standards and Guidelines.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 67
    }
  },
  {
    "element_id": "64cde3363220c404a22d087eb2bf41b3",
    "text": "C Example - Conditional Operators’ Spacing",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 67
    }
  },
  {
    "element_id": "29960450765d94cdf3d675686ea8bf36",
    "text": "Example of Conditional Operators’ Spacing if (foo->next == NULL && total_count < needed && needed <= MAXLLOT && ServerActive(current -input)) { ... }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 67
    }
  },
  {
    "element_id": "423e9c37d95dd0a9d64db14dc41f4ea6",
    "text": "C Example - For Loops Example For Loops for (curr = *listp, trail = pList; curr != NULL; trail = &(curr->next), curr = curr->next) { DoSomething(); DoAnotherSomething(); }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "3f39d5c348e5b79d06e842c114e6cc57",
    "text": "D",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "095f588fac60f6d396a9dc0d878191b0",
    "text": "omething(); D",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "eff282ac11f81bffe1ebf5936f73f385",
    "text": "nothe",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "5a67b7932575c9d5be54e909774fc068",
    "text": "omething(); } (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "de8e5d4ff2347a6954becd27c5faac37",
    "text": ") Do not separate keywords that are followed by expressions in parentheses from the left parenthesis. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "1d7dd5ed8be024e2da6cb84cd004742f",
    "text": ") Put blanks after commas in argument lists to help separate the arguments visually. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "583a7ad32a94d7c369655ab8ab5a3b5a",
    "text": ") Portability for high-level programming represents the usability of the same software in different computer environments. The only changes would be inclusion of possibly different header ﬁles, and the use of different compiler ﬂags. The header ﬁles will contain #deﬁnes and typedefs that may vary machine to machine. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "e272434788c6fd064ef2a4ea67acddb1",
    "text": ") For an application to be considered portable it must have the capability of moving across environments, not just across platforms. This environment consist of: new machine/hardware, different operating system, different compiler, software interfaces, or any combination of these. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "4e949a141fd5a2cbdd67236d66113f92",
    "text": ") Writing code in C does not guarantee portability. The desired target platform must have a working C compiler available. To avoid writing C code that is portable be aware of the following: • Avoid making assumptions about integers and pointers. • Avoid making assumptions about sizes of any data types, other than character. • Avoid making assumptions about how data is aligned in memory, and within structure. • Avoid making assumptions about how data is packed within • Avoid making assumptions about byte ordering. • Avoid making assumptions about the size of a pointer, or that the pointer is the same size as an int. • Avoid making assumptions that software will always be executed on machine for which it is originally designed. • C randomly seems to work in one environment, but perform another environment. • The size of different data types may vary from platform to platform. • C uses a non-standard complier extension, and may not be available all compiler implementations.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "0855f668289bdb2643ac1e4ca4568cba",
    "text": "Avoid making assumptions about integers and pointers.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "03bf170cb6c54db1df90e717ff6614aa",
    "text": "Avoid making assumptions about sizes of any data types, other than character.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "1f48b029ef6de47e2dad6141afadbcfd",
    "text": "Avoid making assumptions about how data is aligned in memory, and within structure.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "bf07912285eb5dfbc79a9a5733a9fd0f",
    "text": "Avoid making assumptions about how data is packed within structure.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "58dee5a2818c20bd7e1d8f6b31779e71",
    "text": "Avoid making assumptions about byte ordering.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "916a93300707076dcac54b7d495922c5",
    "text": "Avoid making assumptions about the size of a pointer, or that the pointer is the same size as an int.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "7bc53529e4d34a8470ee84e28d5c88de",
    "text": "Avoid making assumptions that software will always be executed on the machine for which it is originally designed.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "3aa1e20046f25ad132ac039c0fb44b6b",
    "text": "C randomly seems to work in one environment, but perform unreliably in another environment.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "005591022c0d1b2751d679f92500133e",
    "text": "The size of different data types may vary from platform to platform.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "6b5d9af5845d93ee4daa62f148cbd89a",
    "text": "C uses a non",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "f292542c05bfc939596c4fbb6bda7b6b",
    "text": "standard complier extension, and may not be available on all compiler implementations.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "b33c1371d72a5ed59654513527879413",
    "text": "size of different data types may vary from platform to platform. uses a non-standard complier extension, and may not be available on",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 68
    }
  },
  {
    "element_id": "6b2f7fc00aab0800d426a4dc35f55278",
    "text": "and Source Code Standards",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "2d27c69032a3d5e5a161221891150b52",
    "text": "page • C uses a non-standard library extension, which may not be available all platforms. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "05dd736cc7f073f3e361eb9fd9c4f18b",
    "text": ") The “#ifdef ”and “#ifndef” directives have the same effect as the “#if when it is used with the deﬁned operator. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "0c587517e6005a1d420f4415945d07c9",
    "text": ") Place all machine-dependent code in a separate ﬁle from all machine- independent code. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "0e15711c595daa67f26c879d7806ce02",
    "text": ") Machine-dependent code must use “#ifdef” so that an informative error message will result if the code is compiled on a machine other than for is designed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "38e06e2cb0b4da7912b56ab199ccf96e",
    "text": ") Only write machine-dependent code when necessary. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "f81ff644a8ff5cec9d823162b898e7a5",
    "text": ") Even if, for example, a particular piece of hardware requires that a dependent routine be written, try to write any routines that support the machine-dependent code machine-independent. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "046f2fa3737f462c13a3848babb0cf5f",
    "text": ") C++ is a high performance Object Oriented programming language based C. It was developed and released by Bjarne Stroustrup in",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "f9fbf11086ea5da22795a80da5546b88",
    "text": ", and was standardized in",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "251be374cd51df7843811823834701e2",
    "text": "Standards were issued again during",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "6201111b83a0cb5b0922cb37cc442b9a",
    "text": "and",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "98ab46691225d6c2b98dfd3bd2dcd456",
    "text": "C++ strives to be portable to avoid reliance on features that are platform-dependent and is maintained by the International Standards tion (ISO) committee. C++ is widely used in embedded systems software engineering, and is also popular with industries: federal, health care, and Defense. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "ec29fa820ecabfca60f41e194ee98c86",
    "text": ") This subsection provides establishes controls to ensure coding of C++ programs are reliable, maintainable and portable whether developed by outside vendors. These standards apply to all C++ programming for any project however, these standards and guidelines do not apply to source that is generated by a tool (such as a Graphical User Interface (GUI) or purchased as pre-existing software from a third party. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "d9fee419afc30e47a5a58c4890281d4c",
    "text": ") Classes are a very signiﬁcant part of your C++ programs. Classes are most of the processing in your programs occurs. Classes are also one of C++ constructs where you have choices such as different types of and destructors or different types of operators and assignments. The standards will help you in writing good C++ class code. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "8e433d4ef6ec90b9d3032221ba032483",
    "text": ") All classes must declare an assignment operator. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "fa8a6f3c075a74ebc34a4220616e4a1d",
    "text": ") Headers ﬁles must not contain more than one class deﬁnition. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "1e4bfcb9d7e93786eec9e61b8a2deb6a",
    "text": ") Header ﬁles must not declare variables other than class member data. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "0072738c8491ffa673b6bb5577a04dd5",
    "text": ") Class names must be unique irrespective of case in any namespace the IRS global namespace. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "13685a3c08e3e47ab942a4b7d992f2eb",
    "text": ") Class member data must have a trailing “_” appended to their variable to distinguish them from local variables within member functions. No other variables must be named with a trailing underscore. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "6726c0a6ddbc7e77d189e9318f57a047",
    "text": ") Internal Revenue Manual",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "359452f8d2ae24ac233bd5a3df7ea07a",
    "text": "C uses a non-standard library extension, which may not be available on all platforms.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "85a2e8284e39efd0df0058b59001279b",
    "text": "All classes must declare an assignment operator. Headers ﬁles must not contain more than one class deﬁnition. Header ﬁles must not declare variables other than class member data. Class names must be unique irrespective of case in any namespace including the IRS global namespace. Class member data must have a trailing “_” appended to their variable name, to distinguish them from local variables within member functions. No other",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 69
    }
  },
  {
    "element_id": "a6fc2b09a5b01e0c29a7a575bf7c7d9f",
    "text": "c. Protected members d. Private members C++ Example - Class Declaration Example:of C++ Class Declaration class C // correct access order { public: // ... protected: // ... private: // ... }; (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "447eccabf7a859029825a9fb5a7abdab",
    "text": ") Within the public, protected and private sections of the class declaration following order must be followed: a. Type declarations b. Data members c. Constructors d. Destructors e. Mutators f. Accessors (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "d0d35dbfe09c20039ba7997b8df4e4cf",
    "text": ") The name of the class deﬁnition header ﬁle must match the name of the implementation ﬁle. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "0505fb1f1740369145d93ac20e7b46ce",
    "text": ") Constructors are used to allocate memory (if needed) and has special functions that performs initialization of every object. The Compiler will call Constructor whenever an object is created. The Destructor is a special member function of a class that is executed whenever an object of its delete expression is applied, i.e., used to clean-up when a class object is destroyed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "46f1226db1bf7eb80aa254d7b51b3fe0",
    "text": ") All classes must declare a copy constructor if dynamic memory allocation involved. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "23f7bd12f6b447c549cc2b29e5239fcc",
    "text": ") Classes that are meant to be instantiated only by their subclasses must their constructor(s) and destructor declared protected. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "476f77147e9cb64fc97f62f99722a0fb",
    "text": ") Constructors other than the copy constructor that have only one parameter must be declared explicitly. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "43add01bf753a1eacf04c1c22464424a",
    "text": ") Classes with virtual functions and Classes with children must deﬁne a destructor. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "d8f6c7ee23187b1a5117e18133ade37e",
    "text": ") Data members must be initialized in the order in which they are declared. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "c28cb35512de710e868b8767610d07e4",
    "text": ") Never declare non-const public data variables. Classes must declare data private or protected. Always access non-const data through public methods.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "e44ec55fbb071e481ea99e1a23ba0216",
    "text": "2.5.3.6.2.2 (07-10-2020) C++ Constructors and Destructors",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "b9cda9b3fa0b5afde8dc723c92ecfff2",
    "text": "Classes that are meant to be instantiated only by their subclasses must their constructor(s) and destructor declared protected.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 70
    }
  },
  {
    "element_id": "6b2f7fc00aab0800d426a4dc35f55278",
    "text": "and Source Code Standards",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "ef51e648dfc814b76990088c13114222",
    "text": "page (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "7899aafe7692223340378b05b51536e6",
    "text": ") A member function must never return a reference or a pointer to a local variable. This will result in a pointer referencing a variable that has gone scope when the function returns. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "4aa616c7105e743aeb926a0c64005c18",
    "text": ") A member function that does not modify member data must be declared (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "e862fafeaff730e72d3b4f2b07c7e6f0",
    "text": ") A public member function must never return a non-const reference or to member data. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "24633392c0f3432b70c4a482b5853640",
    "text": ") A public member function must never return a non-const reference or to data outside an object, unless the object shares the data with other (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "00df8e3fd1200658765158064cf46ffc",
    "text": ") No member functions must be implemented within the class header tion. The only exceptions are accessors and mutators (gets and sets). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "803b07df6475fcc08b0b79f661cd2acc",
    "text": ") Data must not to be modiﬁed by const member functions if the behavior of object is dependent on data outside the object. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "083bc4c9009fe2b98b28e91df8b08801",
    "text": ") Avoid overloading on a pointer type. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "3f262f0e6a6b48dc098d650b5ad84100",
    "text": ") An assignment operator must return a reference to the assigning object (as assignment operator returns the left hand side (LHS)). Non-const reference consistent with the behavior of built-in types. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "9b5f26e186ec7726d64da9ab06c6d941",
    "text": ") Assignment to self must be checked by adding the check at the beginning the assignment method when overloading the assignment operator. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "ab6c5ec685d70d1b74ca523ff5b66b3c",
    "text": ") Inheritance must not be used for parts-of relations. Use template classes parts-of relations. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "3ce49cead6233bfcb3857bb5dec5a50d",
    "text": ") Use inheritance to implement a generalization to specialization (kind of) tionships. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "9b61b96a34ff1035f3e4d9db8982ef4d",
    "text": ") Inherited non-virtual member functions must not be overridden. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "59d7d7af4387d617cfed85392118799d",
    "text": ") Uninitialized data present in variables, objects, etc., have led to many problems. Often the problems manifest themselves as the very difficult to reproduce” kind of problem at test time since the behavior of programs is dependent on the content of unitialized variables, which may or may not change with every execution. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "f72b78b47745fba7a756b412d366b4ff",
    "text": ") Initialize all static variables explicitly. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "3cb506dc5f150144313326401bdf86ad",
    "text": ") Always initialize object instance variables of all types. of (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "b6b51fef43cecd30e1dc8bde5c4c297d",
    "text": ") Every variable that is declared must be initialized before it is used. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "9f9576dd11b6067116c7189088c1e7ef",
    "text": ") Use constructor initializer lists to ensure that every instance variable in a has a deﬁned value. of (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "3f3f307a1dc6e265ad9b0b3f53ee661a",
    "text": ") When allocating objects, ensure that all pointers to the objects are via an initializer list or within the body of the constructor. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "a6a9e1d11f727667b0fd1fd71ec22322",
    "text": ") Classes that allocate dynamic storage must deﬁne a destructor that that storage. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "6726c0a6ddbc7e77d189e9318f57a047",
    "text": ") Internal Revenue Manual",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "975b74d32c26f9c7a301b3fbba72aef0",
    "text": "A public member function must never return a non-const reference or pointer to data outside an object, unless the object shares the data with other objects.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "ad6c181a179f62d03381329e0c066b3b",
    "text": "Assignment to self must be checked by adding the check at the beginning of the assignment method when overloading the assignment operator.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "f72b78b47745fba7a756b412d366b4ff",
    "text": ") Initialize all static variables explicitly. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "5197a3c829c45166752f1551557fffac",
    "text": ") Always initialize object instance variables of all types. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "b6b51fef43cecd30e1dc8bde5c4c297d",
    "text": ") Every variable that is declared must be initialized before it is used. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "3ba0f5435ffbbf07437a33d61e393664",
    "text": ") Use constructor initializer lists to ensure that every instance variable in a class has a deﬁned value. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "10b2e434f5f2f6d407097c7dfb2a9502",
    "text": ") When allocating objects, ensure that all pointers to the objects are initialized via an initializer list or within the body of the constructor. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "e98247965875a6e9d9cecbfd0134c82d",
    "text": ") Classes that allocate dynamic storage must deﬁne a destructor that releases",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "0be069774cb609f8429cd68d9be0f3dc",
    "text": "Classes that allocate dynamic storage must deﬁne a destructor that releases",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 71
    }
  },
  {
    "element_id": "3207891891c8132ab29aa4171901dbd1",
    "text": "Use struct when a user-deﬁned type contains only data. Use classes when a user-deﬁned type contains data and code that processes the data.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 72
    }
  },
  {
    "element_id": "4b180a8e70044b7b205d52203ba86b27",
    "text": "Do not declare the structure type and its associated variable in the same statement. Instead, declare the structure type ﬁrst, and then declare a",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 72
    }
  },
  {
    "element_id": "83252ec27781eac1e270206797c86611",
    "text": "Logical expressions of the type if(test) or if(!test) must not be used when test is a pointer, or the test is the return of a function which returns a non-boolean",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 72
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 73
    }
  },
  {
    "element_id": "1769d2dfe296fdc81b7037e43077cf5c",
    "text": "File Type File Name/Suffix C++ Header ﬁle .h C++ Implementation ﬁle (non- .cpp main) C++ Implementation ﬁle (main) main.cpp",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 73
    }
  },
  {
    "element_id": "37278ba89d4de94b4046e05ed9b1282a",
    "text": "Developers must declare classes, data structures, layouts, functions, variables, and constants in a header ﬁle named classname.h.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 73
    }
  },
  {
    "element_id": "033fb3a1195bc6b98960fc2573fd420d",
    "text": "Limit the length of source statements so that complete source statements are visible on the screen without having to scroll right and left repeatedly.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 74
    }
  },
  {
    "element_id": "c51843117224a31ae491bdf2963796be",
    "text": "The “#includes” must precede any declarations or deﬁnitions in a",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 74
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 75
    }
  },
  {
    "element_id": "c5918585b94ec98e925a764ab6c23b42",
    "text": "Function prototypes and external variables must be declared in a header (to avoid multiple declarations), not in implementation ﬁles.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 75
    }
  },
  {
    "element_id": "085f10668e506245934b1ba445ad6762",
    "text": "Calling functions must check for errors reported from functions.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 75
    }
  },
  {
    "element_id": "f04c78fd16cfae24b4a70f5536b949b8",
    "text": "A pointer must not be compared to NULL or assigned NULL without casting the NULL to the proper type.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 76
    }
  },
  {
    "element_id": "9353d9572e0ff2dad5764021714f08db",
    "text": "When memory allocated to a pointer has been deleted, a new value must be assigned to the pointer, or the pointer must be deleted.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 76
    }
  },
  {
    "element_id": "c8830717d3863e5cb18867fcc1801c0c",
    "text": "Class authors must provide default values for dynamic objects within other objects and/or constructors that can be used on initializer lists.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 76
    }
  },
  {
    "element_id": "6b2f7fc00aab0800d426a4dc35f55278",
    "text": "and Source Code Standards",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "035285a9a8bc2b85583dbe64d3ded9d2",
    "text": ") Save the address of allocated memory to prevent orphaned allocation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "c2bb5feb1d69b16b49e96f06ae317319",
    "text": ") Explicitly deallocate a dynamically allocated segment prior to assigning a value. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "5ad3b35dcce7662c7b0b6b5cd34c3584",
    "text": ") Avoid memory leaks in exception handling code. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "87a9471a2fe5c37003767b5204ee1fb4",
    "text": ") Do not use code that can throw an exception in a destructor. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "9ebc4b1f2f253d96af58f0ea8f6974eb",
    "text": ") Avoid memory leaks involving external components. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "c8af6bbd209e776f91e294ee288c3b66",
    "text": ") Avoid memory leaks involving reuse of “dead” objects. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "d2ac09303b0b3470aacd6381fe13d154",
    "text": ") Avoid memory leaks by explicitly clearing memory after use. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "2fa235e8cc219d22123abb695cd3bf71",
    "text": ") Avoid memory leaks by unfreezing frozen stream objects. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "053284b54d677e44a4e3060bab11ae10",
    "text": ") Avoid memory leaks by ensuring that you write the “Operator Delete” whenever the “Operator New” has been written for a class. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "851eb7d43a7966bf3e4a33d4333e6159",
    "text": ") The size of an array must be declared with an enum constant or const. makes modifying the size of an array easier, and is more meaningful to reader. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "95b6e9c8642032f2c28a830517a21db0",
    "text": ") When reading array contents, check to ensure that the index does not the array size. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "b1447a9adaef4bb4ef698e76eed33994",
    "text": ") When adding to an array, check to ensure that the size of the array can the existing content in addition to the new contents to be added. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "640627aa1461a6302b50964e28cc65c3",
    "text": ") Always test a pointer’s value for NULL before using it. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "7f118f4218724865fd4fb3cbca82a2bb",
    "text": ") This section of the IRM established controls to ensure coding of Language Code (ALC) are reliable, maintainable, and portable whether developed by IRS or outside vendors. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "591e7323cfd5a387211641cb4d6b9581",
    "text": ") The controls established are applicable to all ALC programs whether they developed by IRS government or contract employees. These guidelines to all assembler programming within the IRS. System speciﬁc commands, technical information concerning addressing, registers, instructions and language with Assembler should be referenced using IRS, IBM or UNISYS language references or standards. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "da1163bcaef6ddce85606b8f1168b7ba",
    "text": ") Assembly languages have the same structure and set of commands as machine languages, but enable a programmer to use names instead of numbers. Since computers only understands (reads) bits which are of machine language code of (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "6201111b83a0cb5b0922cb37cc442b9a",
    "text": "and",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "7b059c5257b0746a488f91f91d499b42",
    "text": "),. programmers write their symbolic language (Assembly). These symbolic source statements (source code) must be translated into machine language object statements (object code) before the computer can execute these instructions. An operating system program is used for this process. This translation process is known assembling (assembly) the program, and serves to translate the source module (symbolic code) into a machine language object module. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "b960c115b7977cecefdc224b89803910",
    "text": ") ALC programming used within the IRS is developed on two mainframe systems : Internal Revenue Manual",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "e8bf8926dbd944738e9b3e43b4d94b42",
    "text": "2.5.3.6.12.3 (07-10-2020) Buffers Overﬂows",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "09ca23c70bb49d7bf92d4ef34d96092e",
    "text": "adding to an array, check to ensure that the size of the array can hold existing content in addition to the new contents to be added.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "216a5eada36e2374cfd60802d1486edf",
    "text": "(07-10-2020) Assembler Language Code (ALC) Programming",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "98c65838b6695eeec45977c229694dfc",
    "text": "ALC programming used within the IRS is developed on two mainframe",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 77
    }
  },
  {
    "element_id": "2f8c874218e49c8aa195190a42269026",
    "text": "Systems a. IBM operating system - IBM (JCL) Job Control Language b. UNISYS - (ECL) Executive Control Language (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "5dae39bf66402b67e56c84c434e30a46",
    "text": ") Since the processes for each system are unique with different functions, grammers should consult the speciﬁc industry standard language and programming references for speciﬁc instructions, commands, and (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "db16a70e35264a53672b00748c84ab18",
    "text": ") Assembler language is a symbolic language use to code instructions coding in machine language. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "1f3e7d09e0d6189b2dd75295712659d2",
    "text": ") Source statements are interpreted by the Assembler and output as a language version of the program along with messages and listings. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "c8f33260d5135ef8edb363b3d245ac02",
    "text": ") The Binder outputs the Assembler program into an executable module. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "9e4e473c9ceb84a01b8c95d26926744c",
    "text": ") IRS programmers use two mainframe systems and compilers to develop cations using ALC; IBM High Level Assembler (HLASM) and UNISYS Assembler (MASM). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "39b88ec061fe34251f5899138523f29d",
    "text": ") Both systems have individual operating systems and control languages: uses JCL (Job Control Language and UNISYS uses ECL (Executive Language). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "1fd6ce678024a7e59abb1e7fcf55ee08",
    "text": ") Each system has unique commands, instructions, directives, functions, and macros which are included in ALC programs. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "5b7b632a80a87e8c9606e1620ba51c5e",
    "text": ") Programmers write their instructions in symbolic language (Assembly) or level languages such as; (COBOL, C, JAVA). These symbolic source statements (source code) must be translated into machine language object statements (object code) before the computer can execute these (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "abb6201b5c07661a4e43751e9ef27398",
    "text": ") All programs must be commented for quick reference by other Beginning comments must include: a. Project and Run numbers b. Brief description of the run c. Programmer’s name d. Current production assembly numbers and dates (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "8c048bbcc6bfc6ccc113376c476de3cc",
    "text": ") Use Title statements to print the run number on each page. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "44871a56660877d90e858afc4b05dcdd",
    "text": ") Use Page ejects and spacing to separate routines. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "1890991b8705c3fde967a58d7ca2f9ec",
    "text": ") As programs are updated or changed comments should be updated. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "992062bbb8ff2d18e4a4537378702c5c",
    "text": ") Paragraph type comments should not be on instruction statements since structions could be pulled and comments left behind would be Place comments at the beginning of routines they describe. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "5a8fb81ac67113e8ff59f16cec3fb8e2",
    "text": ") Constants that require periodic changes must be avoided. However, if are authorized because of management approval, comments must why and how they are changed.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "4842e93d034d9bfd2e6a9686c5dafd03",
    "text": "Source statements are interpreted by the Assembler and output as a machine language version of the program along with messages and listings.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "7055dafe3567f4462c7ccd3c7e0cc434",
    "text": "Both systems have individual operating systems and control languages: IBM uses JCL (Job Control Language and UNISYS uses ECL (Executive Control",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "19ee15ac1fb9f8dc69504a5d42331a0c",
    "text": "All programs must be commented for quick reference by other Beginning comments must include: a. Project and Run numbers b. Brief description of the run c. Programmer’s name d. Current production assembly numbers and dates Use Title statements to print the run number on each page. Use Page ejects and spacing to separate routines. As programs are updated or changed comments should be updated. Paragraph type comments should not be on instruction statements structions could be pulled and comments left behind would be Place comments at the beginning of routines they describe. Constants that require periodic changes must be avoided. However, if are authorized because of management approval, comments must why and how they are changed.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "104fabf2765786e93e4aebd5fed08ecc",
    "text": "(07-10-2020) Assembler Language Code (ALC) Program Comments and Documentation",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 78
    }
  },
  {
    "element_id": "6b2f7fc00aab0800d426a4dc35f55278",
    "text": "and Source Code Standards",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "ef51e648dfc814b76990088c13114222",
    "text": "page (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "9048fb28203c9c21199ed45590a25420",
    "text": ") Documentation for ALC are Computer Program Books (CPB’s) for each program which contain ﬁle speciﬁcations, run descriptions, and a Computer Operator Handbook (COH) with instructions on all possible messages generated during operation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "63e7de7d8c5c9a0b9423450784ec73b1",
    "text": ") Flowcharts and Pseudocode must be used to map the logical control of sequences and steps using a “Top Down” approach to make the programs main logic path recognizable. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "cd0bcfa366a0af742d91475f9afdb2e3",
    "text": ") Relative addressing is a great way to ﬁx programs that are running out of registers. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "9c94e62f87e17af1d817fd3934560b99",
    "text": ") Do not code RECFM, BLKSIZE, LRECL, TRTCH or DENSITY into program DCB include these parameters in JCL to allow for ﬂexibility. Exceptions to are SYSOUT. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "e958c58c19ea387de5e13cb77df4f112",
    "text": ") To conserve disk space use “GETMAIN” instead of “DS”, “DC”, this space by covering fewer base registers. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "d90aaa6b80dbc54fdb48f86f876128f3",
    "text": ") When writing low volume local (MCC) print data sets such as program use SYSOUT. However; when using SYSOUT datasets for any purpose must be taken to prevent production problems at “checkpoint/restart” time. SYSOUT datasets must be CLOSED or not yet opened when checkpoints taken. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "b74a9214b3c9c0df58425cc6b3484ab0",
    "text": ") Using Abend Codes – in programs where halt issues conditions exist there should be a corresponding user abend condition. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "d542813df652a6f0d1569f973320dcff",
    "text": ") Programs should be setup so that the “Patch” routine is executed ﬁrst. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "0da483e4494a698bae7b18ba807717c0",
    "text": ") Write to Output (WTO’s) are to be used minimally and primarily for required dynamic control of the executing program by operators. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "e4b1ceeb30b18bca4960d8f9b8adcda6",
    "text": ") Unless important traffic should be routed away from the console by issuing WTO’s with a ROUTCD=",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "389eaaad9c8fbc585f8c8b347e051cde",
    "text": "Providing post-execution information for review recommended using SYSOUT datasets instead. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "f59e1e93bbb353e5568a01b859612c95",
    "text": ") Hold “GETS” and “PUTS to a minimum and set them up in closed (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "d24b0c98d4dfccbc52b3138391e3b518",
    "text": ") Use closed subroutines and program modules as much as possible to straightforward logic. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "f084ac2609ac1370277ce8cbf7acb1b2",
    "text": ") Use IRS Standard macros and load modules to take advantage of routines. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "11a7951a4e09de2d44f1667ab01cf511",
    "text": ") Keep related routines together. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "5d21f2f05365441ce8b0d234ad9e6913",
    "text": ") Code programs so that the ﬂow of execution avoids crossing an MVS page boundary (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "91f84da8a01dc6b65aa0b9a565f2994a",
    "text": "k of storage, covered by one base register) if your reading the entire (IMF/BMF). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "cd0bcfa366a0af742d91475f9afdb2e3",
    "text": ") Relative addressing is a great way to ﬁx programs that are running out of registers. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "144391bcc9bac420e0790c3950b4cab6",
    "text": ") Do not code: RECFM, BLKSIZE, LRECL, TRTCH or DENSITY into program DCB, include these parameters in JCL to allow for ﬂexibility. Exceptions to are SYSOUT. Internal Revenue Manual",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "39cd0f2450116d746cbde5080a5ce53d",
    "text": "2.5.3.7.4 (07-10-2020) Assembler Language Coding Conventions (ALC)",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "0ee065649d2d6abd57cb948b0cea3dd6",
    "text": "programs so that the ﬂow of execution avoids crossing an MVS page (4k of storage, covered by one base register) if your reading the",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "a207430139255840eb48a65b3c8b44c5",
    "text": "Do not code: RECFM, BLKSIZE, LRECL, TRTCH or DENSITY into program DCB, include these parameters in JCL to allow for ﬂexibility. Exceptions to this",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 79
    }
  },
  {
    "element_id": "2bb99750938edc80da511ed0fea463db",
    "text": "Using Abend Codes – in programs where halt issues conditions exist there must be a corresponding user abend condition:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "9ec6af813e1d8db9a614ddd6eac7f54f",
    "text": "a. Input File (SYSIN) Exceptions:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "b840d0b2629c5e86aba4fd8912b53b01",
    "text": "- Missing Statement/Record",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "5ffc99d1d2ddacaf9b15b0046722093b",
    "text": "- Bad Date Statement/Record",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "f6aa882e14b16a85cee90583f492bc11",
    "text": "- Bad Segment Statement/Record",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "e240dbbe6ecd79d64a8260310fefcec3",
    "text": "- Bad CP",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "972be40dcb7b5a9949e8c5668050e7e5",
    "text": "Statement/Record",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "6e940c598ed7ffad0adce5a2441dc1e3",
    "text": "(Available) b. Input File Exceptions:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "f6cf544d109d578e02eeac16d1021afc",
    "text": "- Wrong Input File",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "5ffc99d1d2ddacaf9b15b0046722093b",
    "text": "- Bad Date Statement/Record",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "f6aa882e14b16a85cee90583f492bc11",
    "text": "- Bad Segment Statement/Record",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "e240dbbe6ecd79d64a8260310fefcec3",
    "text": "- Bad CP",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "972be40dcb7b5a9949e8c5668050e7e5",
    "text": "Statement/Record",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "6e5a4671d782b97df4d18583c988987f",
    "text": "(Available) c. Data Exception:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "d97cfe5ed9b4b3d0d5fe1aaab80835c4",
    "text": "- Out of Sequence Record",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "595c6c5a5260a054595d56aafa8d2627",
    "text": "- Invalid S.C./D.O./Region Code",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "091fc6efdd36fd84586eae92a0c40bae",
    "text": "- Duplicate Record",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "d2a4d3feff2639a6af5909fb05f49a5a",
    "text": "- Tax Module with no Entity",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "cf213a9cb9e06b23b2b77ec3a3aa62ff",
    "text": "- Invalid TIN",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "27e856fb5989392fae0855976ab48e4f",
    "text": "- Bad Byte Count",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "dc792871d3768e7c1b872dd8a553138a",
    "text": "Bad Year Digits",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "415f1a7da5de46c6ca2ec8166e579fe4",
    "text": "- Bad Name Control",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "6864d5697ebfc09cb8b22482c6e67f8a",
    "text": "- TIN out of Segment Range",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "7a90102aab46b6f04d34d91a68daa24b",
    "text": "(Available) d. End Of File/End Of Job Exceptions:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "fd532f55c75aa6f345a7f55657766d2f",
    "text": "- Controls out of Balance",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "ba5ec51d07a4ac0e951608704431d59a",
    "text": ")",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "85b716ac8053f95cd5ca3daf2a67d3a3",
    "text": "(Available)",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 80
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "45b06e0a5dc18b16fa361418621daa43",
    "text": "Deﬁne and describe storage area to build or modify output Set aside and label work areas to store data for later use.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "62ec716f8a494e1783a0caca8e90fc38",
    "text": ") Constants used are the following: a. As Counters to count the number of records read, written or containing errors. b. Accumulators to track the amount of payments made to an account, or track the total balance for a tax record. c. Headings for printed reports. d. Predetermined messages printed as result of an operation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "c4bbb06bf19cc91d61626f749dac0e8a",
    "text": ") The Assembler generates the formatted data in its assigned address when it processes a DC statement. The assembler is instructed to reserve an area storage that: a. Has a speciﬁed length (either explicitly stated or implied). b. Contains data in a speciﬁed format and contains an initial value.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "a296e935d30ee0610b3518ad1b1d0810",
    "text": "Has a speciﬁed length (either explicitly stated or implied). Contains data in a speciﬁed format and contains an initial",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "206fb4cfba53cba45b44a711c1369ee9",
    "text": "*Example Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "57efb8576409d83f9572aefb1e0923fe",
    "text": "Assembler Language Code (ALC)Example - Using DC Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "b9a29592b3cbe8c58c9e6e577ba24b71",
    "text": "Assembler Language Code Example OBJECT CODE STATEMENT C1C2C3 ALPHAS DC C’ABC’ Implied Length of 3 bytes 1C ONE DC P’1 Implied Length of 1 byte 00000C COUNTER DC PL3’0’ Explicit Length of 3 bytes",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "edab299a4427066fbc5ee84209a90133",
    "text": "The Name ﬁeld gives a symbolic (mnemonic) addressability to the memory location created for the deﬁned constant. They should be helpful, and unique. They are referred to as “Symbols”, or “Labels”. The following rules for name ﬁelds:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "756399d9459ec75d4491b1f0796ad993",
    "text": "a. Use on instructions as well as data ﬁelds b. It must begin in column",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "f3248efcee00869b16f03c6877625c29",
    "text": "c. It can be from",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "ac4b6231e085aac3de290f3c5e6a365f",
    "text": "characters long but is usually",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "cb8688197459505636523317360cc56f",
    "text": "or fewer d. The ﬁrst character must be an alphabetic or national symbol. The ﬁrst character must be (A-Z), (ALC is not case sensitive) or ( $ # @ ). Generally, nationals are avoided as ﬁrst characters because they fre- quently imply special meanings. e. The remaining characters can be alphabetic, numeric, national or score symbol. This includes (A-Z), (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "180eee72e89e2251898cb7a2a5ac941b",
    "text": "), and ($ # @ )",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "90c45e2c5a691836697a69dfc06e464d",
    "text": "The remaining characters can be alphabetic, numeric, national or score symbol. This includes (A-Z), (0-9), and ($ # @ )",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 81
    }
  },
  {
    "element_id": "4ef6867ade046000c0f6b9133206e2f6",
    "text": "No blanks within the name. A blank in the ﬁrst column indicates no name is present. Underscores are commonly used in place of blanks. A unique character combination can only be deﬁned once. It can be used (″referenced″) any number of times as an operand. External labels, (such as the label on the SLINK macro and CSECT statements), may not use the underscore and may not exceed eight char",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 82
    }
  },
  {
    "element_id": "c731c10167e389e617bb3e1f76772e4e",
    "text": "acters.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 82
    }
  },
  {
    "element_id": "add88bd9802161233402dc6c6c2c3e00",
    "text": "(07-10-2020) Assembler Language Code (ALC) Standard Macros",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 82
    }
  },
  {
    "element_id": "b4d0137a62e3ec406a289523f60f9758",
    "text": "ALC Example - Housekeeping Macros and Description",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 82
    }
  },
  {
    "element_id": "9759dda03456f69537c66d0c96896797",
    "text": "Macros Description CNVDATE Performs various date conversions DATE Provides current date in different formats EOVCKPT Takes checkpoints on ﬁle SYSCKEOV EQREG Equates registers to symbolic names IRCKPT Takes checkpoints on ﬁle SYSCKPT SLINK Provides standard linkage and save area STATUS90 Provides status history within a tax module",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 82
    }
  },
  {
    "element_id": "533de407f016c8526e816df89a97ea9c",
    "text": "ALC Example - Data Management Macros and Description",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 82
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "e33e77909c0fc70da540f02812e4755b",
    "text": "ALC Example - Input/Output (I/O) Macros and Description",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "05544c36ab62f0b8b787bcaaf80b36ff",
    "text": "ALC Example - LARS Macros and Description",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "b93712be50b6ae18c7b25f07e311520e",
    "text": "CNVDATE: This macro performs various date conversions (Julian and calendar date formatting) REGISTER Usage: Registers",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "6201111b83a0cb5b0922cb37cc442b9a",
    "text": "and",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "c47782f9844d842fd654929148cab523",
    "text": "are used during the execution of this macro and must be saved by the user. Registers",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "774cfcd5d6c0718df41649c039e9a96f",
    "text": "may be used in the operands, enclosed in parentheses, to point to a date ﬁeld. ABEND Messages: The SVC called by this macro checks for invalid data if found the job abends with a S",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "6b23c0d5f35d1b11f9b683f0b0a61735",
    "text": "C",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "327a27a0f607feca78c154a2440dda73",
    "text": "(register",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "f86da4deb7b6d337febbd0b41db98719",
    "text": "should point to the invalid data) after issuing one of following messages:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "9f7733e5747630531832edb1b87fff39",
    "text": "ALC Example - IBM Abend Message Descriptions",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "9848f5e606422be4f2aa342cdb2bac1c",
    "text": "IBM Abend Message Descriptions IGC0024A DATE PASSED IS NOT UNSIGNED CHARACTER (REG 10). YYDDD or MMDDYY data is not numeric characters. IGC0024A DDD FIELD IS NOT IN 001-366 RANGE (REG 10). The DDD portion of the Julian date you passed was not valid. IGC0024A DD FIELD IS NOT IN 01-31 RANGE (REG 10). The DD portion of the Calendar date you passed was not valid. IGC0024A DD FIELD IS NOT IN 01-31 RANGE (REG 10). The DD portion of the Calendar date you passed was not valid.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 83
    }
  },
  {
    "element_id": "03b9eb4cc6a822c0448dcbf9fa3af49e",
    "text": "h. DATE: Creates the availability of the time, current date in Julian format, and standard MMDDYY format to the programmer. i. EOVCKPT (Similar to IRCKPT): Used to take checkpoints at logical points and saves main storage and job queue information related to the job step. When the checkpoint operation is complete, execution of the program continues. It also generates a DCB for the checkpoint dataset the programmer. The DDNAME for the checkpoint ﬁle is SYSCKEOV. j. EQREG: This macro generates assembler instructions to equate the sixteen general registers to symbolic names. This allows programmers to use the symbolic name “R#” instead of the actual register number when coding. The symbolic names also appear in the cross-reference table of assembly listing and can be easily referenced. k. SLINK: This macro provides the standard IBM linkage conventions in all stand-along programs. • Saves all registers in the calling programs save area. • Provides an",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 84
    }
  },
  {
    "element_id": "e4e88aacf8e817f714104c0f97bb585f",
    "text": "word save are to be used by modules called by the problem program. • Register",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 84
    }
  },
  {
    "element_id": "fd366bef7370f2ce156682b005ad41c1",
    "text": "points to the save area a required when calling another module. • Must be coded as the FIRST executable instruction in the module. • No START statement is necessary since SLINK generates its own START statement. • A label is required. • Operands are not in this macro. • Because this macro generates its own START statement any assembler statements must be coded after SLINK for example: CCW, CNOP, CSECT, CXD, DC, DROP, DS, END, EQU, LTORG, ORG, and USING. l. STATUS",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 84
    }
  },
  {
    "element_id": "82363f38b4995c6a7e55091b3fd0e6cc",
    "text": "(Status Search macro): Locates and makes available to the programmer all status histories within a Tax module. This macro also locates the latest of current status for either IMF or BMF. m. BLKPT: This macro will convert a nine-byte zoned decimal SSN or EIN a block pointer for IDRS. The block pointer will be returned to register at the NSI below the macro. n. DATA DEFINITION: The macros in this category generate DSECT’s deﬁne the ﬁxed portion of the IMF or BMF tax modules or entity The labels generated within the DSECT can be referred in the program stated below: • IMF Entity Module - IETyy • IMF Tax Module - ITXyy • BMF Entity Module - ENTyy • BMF Tax Module - TAXyy o. ETRANS",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 84
    }
  },
  {
    "element_id": "4b3a69d902740b03f39be5bea785e670",
    "text": ": This macro locates and makes available to the programmer all transaction within an entity module either IMF or BMF p. RGTAB and RGTABSM: These macros translate any valid District or Service Center code into the appropriate Region and Service Center codes. Additionally, the RGTAB generates a",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 84
    }
  },
  {
    "element_id": "62d80ccb833655f3208e6ef298f3719d",
    "text": "-byte translate table will translate a character as posted to the IMF to an IBM EBCDIC character. Alpha and numeric remain the same. Special characters are translated. Refer to exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 84
    }
  },
  {
    "element_id": "adaffccdbe9da484060f6ae13b7f0327",
    "text": "for translations. q. TRANSyy – (Tax Module Transaction Search): This macro locates and makes available to the programmer all transactions within a tax module, either IMF or BMF. Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 84
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 84
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "65b94b680a3bc425693387bbf64c8c66",
    "text": "r. BODTAB and BODTABSM: Translate and validate the following: • Universal Location Codes (ULC) • Business Operating Divisions (BOD) • Expanded Area Offices (MF/TIF AO), or File Location Codes (FLC) the appropriate BOD Area Offices (BODAO), MF/TIF AO, Service codes, and the substitute (dump) FLC (when applicable). s. IMF no longer uses",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "16b350a9a77a5b50c2eebe734b107a44",
    "text": "– Funny Pack (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "fe31e84b9df0d3d1809ced37278ff50f",
    "text": ") This section of the IRM provides controls to ensure Java programs are maintainable, and portable. The controls established are applicable to all programming projects whether they are developed by IRS government or contract employees. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "553115d1e5d411b654d525706aa9a512",
    "text": ") Java programming is a robust general-purpose computer programming language that has the ability of running several programs, or parts of a program in parallel. This allows a program to achieve high performance, throughput. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "6aa2a1aba3203eb3ace0ec68c4802567",
    "text": ") Java has its own structure, syntax rules, and programming framework based on the concept of object-oriented programming, and is designed to as few implementation dependencies as possible This allows application opers to “write once, run anywhere” (WORA) which means compiled Java code can run on all platforms that support Java without requiring (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "49a55824052cd412397c7f4f2a54b5c0",
    "text": ") Structurally, Java is comprised of the following: a. Package: This is a namespace mechanism consisting of classes. b. Classes: An user deﬁned template from which objects are created sisting of methods, variables, constants, and constructors. c. Object: Consist of the State (attributes), this behavior is (represented method as an object) pertaining to the following: • An object and response of an object with other objects. • Identity (unique name to an object), and enables one object to with other objects. d. Java compiler: Java platform source code is written to .java ﬁles for compiling, the compiler checks the developers code against the lan- guage’s syntax rules them writes out the bytecode in .class ﬁles. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "75cff39cf8495c241c8321f7676e8834",
    "text": ") Java applications are composed of one or more source ﬁles. Each source must be assigned to a package. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "8d76e22bf7b33dd3beb39ff477f715cc",
    "text": ") A Java assembly contains one or more related packages. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "ada4b2450b78a32aabd945f5f10be6e2",
    "text": ") Java source ﬁles must follow the following structure and naming as listed below. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "b63bdf70bd1b35021351203e85baed0f",
    "text": ") A source ﬁle is composed of the following sections. Each section should be separated by a blank lines and optional comment identifying each section. a. Beginning comments b. Package and import statements c. Main public class declaration d. Private class and interfaces associated to the main class Internal Revenue Manual",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "80a8f053eee9fe146a94f6541e87936b",
    "text": "• Universal Location Codes (ULC) • Business Operating Divisions (BOD) • Expanded Area Offices (MF/TIF AO), or File Location Codes (FLC) into the appropriate BOD Area Offices (BODAO), MF/TIF AO, Service Center codes, and the substitute (dump) FLC (when applicable). IMF no longer uses",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "9d9fb0e7aa9db454cbb93f609a64ef82",
    "text": "– Funny Pack",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "571efaf40d00aaba1c5a0e92029d723a",
    "text": "2.5.3.8.1 (07-10-2020) Java Programming Overview",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "18cda87130bcf9550847a1c8eab0ba7d",
    "text": "Package: This is a namespace mechanism consisting of classes. Classes: An user deﬁned template from which objects are created sisting of methods, variables, constants, and constructors. Object: Consist of the State (attributes), this behavior is (represented method as an object) pertaining to the following:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "9e2c28acd80008f27d5eeb8edd7add06",
    "text": "An object and response of an object with other objects.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "418eef9b02804434136e182b36c0dbc6",
    "text": "Identity (unique name to an object), and enables one object to with other objects. Java compiler: Java platform source code is written to .java ﬁles for compiling, the compiler checks the developers code against the lan",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "d731dd597d3a59420acffad8830327cb",
    "text": "guage’s syntax rules them writes out the bytecode in .class ﬁles.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "75cff39cf8495c241c8321f7676e8834",
    "text": ") Java applications are composed of one or more source ﬁles. Each source must be assigned to a package. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "8d76e22bf7b33dd3beb39ff477f715cc",
    "text": ") A Java assembly contains one or more related packages. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "123d688385b294cccd4b26d19603399a",
    "text": ") Java source ﬁles must follow the following structure and naming conventions as listed below. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "bf2328dcf1c27b1e65e0bbafec80bb73",
    "text": ") A source ﬁle is composed of the following sections. Each section should be separated by a blank lines and optional comment identifying each section. a. Beginning comments b. Package and import statements c. Main public class declaration d. Private class and interfaces associated to the main class",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "8d42525616db7d4bb6b285491e8c43e5",
    "text": "A source ﬁle is composed of the following sections. Each section should be separated by a blank lines and optional comment identifying each section.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 85
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "341d9a6715e88b8ab818744be439e172",
    "text": ") A source ﬁle must contain only one public class, and the ﬁle must be the same as the public class name. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "c01e5bd524d0bf1c51cf64555e697f17",
    "text": ") Avoid source ﬁles exceeding",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "74de90a5d085a321b154604ce7647c1b",
    "text": "lines of code. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "0607d7345c76b0aca4dd39bb1c4a956a",
    "text": ") Begin all source ﬁles with a C-style comment that lists the class name, information and date. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "ab13621a191539848a5ecd1f760c9bb4",
    "text": ") The comment should also include a revision history when the ﬁle is with a brief description of the changes made. Each revision should contain date saved, ﬁrst initial and last name of programmer with SEID, and the change information. Java Programming Example - Comments Java Programming Comment Example /** Clas",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "34d8ea44331aff9c4506a9979da1f34a",
    "text": "ame ** Revision History *",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "8a5edab282632443219e051e4ade2d1d",
    "text": "/",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "8a5edab282632443219e051e4ade2d1d",
    "text": "/",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "d562bbb19c69347a0c9887dbedad0636",
    "text": "A. Programmer (SEID",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "f0adaba65afc42d08a18c6e05e9d363c",
    "text": ") * Initial Release */ (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "c914e93aca3437e12e0c856d28fe9070",
    "text": ") The main package and all sub-packages should be in a single Java distribution. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "2512e082d196e9460a565a06063598b9",
    "text": ") When building web applications, the compiled source code will be bundled web resources and other necessary JAR ﬁles into either a Web Archive or Enterprise Archive (EAR). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "bd08d9c131bbacd83d8ce1d2c2baafda",
    "text": ") Assemblies should only contain compiled Java source (.class ﬁle) that will used by calling applications. They should not include source (.java) or compiled unit test ﬁles. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "f285076f40ffa1ab6d39c2f31eb313dd",
    "text": ") Assemblies must have a manifest ﬁle (META-INF/MAINIFEST.MF) present, more information on Java Manifest ﬁles see https://docs.oracle.com/javase/ tutorial/deployment/jar/manifestindex.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "2e2acb2c7fc34a60c5cf734924dcab84",
    "text": ") The ﬁrst non-comment line must be the package statement. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "8ede36264db95386bdccfc0c2b7a0985",
    "text": ") The package name is always in lowercase ASCII letters and must start “gov.irs.project”, or “gov.irs.program.project .” (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "4964aff318a725ce3559ceabdda9b75a",
    "text": ") List import statements in alphabetic order. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "79b18e710fe29c972d41963aedc7c3d3",
    "text": ") Import statements follow the package statement with a blank line. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "b2b46f3a5f216dbb97d1a7bc85860637",
    "text": ") Import statements must fully qualify the class name imported. Do not use wildcards for importing an entire package. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "f4ca7a4b02086f15e570fe417b30f874",
    "text": ") To import static members of a class, use the static import statement. Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "fe4e52accced8ae9e17fb48ca90d2217",
    "text": "Java Programming Comment Example /** ClassName ** Revision History * 08/24/2013 A. Programmer (SEID1) * Initial Release */",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "a8d0430d05fe74e0f07bb7b4179c2ea1",
    "text": "The main package and all sub",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "3fbad62cbab3b7112d4947c8959809b8",
    "text": "packages should be in a single Java distribution. When building web applications, the compiled source code will be web resources and other necessary JAR ﬁles into either a Web Archive or Enterprise Archive (EAR). Assemblies should only contain compiled Java source (.class ﬁle) that used by calling applications. They should not include source (.java) or compiled unit test ﬁles. Assemblies must have a manifest ﬁle (META",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "520a4d34d16daefbbb3ba63f06857c2a",
    "text": "INF/MAINIFEST.MF) more information on Java Manifest ﬁles see tutorial/deployment/jar/manifestindex.html. The ﬁrst non",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "f912c7f662bc1bb3b34d6461c704df08",
    "text": "comment line must be the package statement. The package name is always in lowercase ASCII letters and must start “gov.irs.project”, or “gov.irs.program.project .” List import statements in alphabetic order. Import statements follow the package statement with a blank line. Import statements must fully qualify the class name imported. Do not use wildcards for importing an entire package. To import static members of a class, use the static import statement.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "dd3d263803ca4ea05042293de45bf1c6",
    "text": "2.5.3.8.2.1.2 (07-10-2020) Package and Import Statements",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "e1800920322c7dfebecf9b8ab6fba906",
    "text": "To import static members of a class, use the static import statement.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 86
    }
  },
  {
    "element_id": "aca7e75f66f05a011d01dc271a8dfa4f",
    "text": "PascalCasing capitalizes the ﬁrst character of each word. Acronyms are always in uppercase. For example, ″MyClass″ and ″URLEncoder″.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 87
    }
  },
  {
    "element_id": "38262107f60aaa510177d10d334903d3",
    "text": "Java Programming Examples -",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 87
    }
  },
  {
    "element_id": "ad53f68c94c6b8ec1c0b83fc3f990cd6",
    "text": "Java Programming Example - Method Naming Convention",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 88
    }
  },
  {
    "element_id": "7d9eee92d54908a709557a7ea9d94672",
    "text": "When accessing attributes of a class, use the get/set method pattern.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 88
    }
  },
  {
    "element_id": "1204a408b8deb9b8231331204464e23f",
    "text": "Java Programming Example - Java Archive Naming Convention",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 88
    }
  },
  {
    "element_id": "fa58c8d40daff3db12dd15552b3f231c",
    "text": "2.5.3.8.2.2.5 (07-10-2020) Package Names",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 88
    }
  },
  {
    "element_id": "32c8406c134cc751eee1cdbb4a72d62e",
    "text": "Package names must always be in lowercase. Preﬁx all package names with “gov.irs.” Follow the preﬁx with the program and project name. Subsequent portions of the package name must be grouped by related nologies. Use plural namespaces where appropriate, e.g., package .models. Resources should be obtained from one of the standard resource classes, e.g., “java.util.Propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 88
    }
  },
  {
    "element_id": "535427fed5154700167e6b6d34237387",
    "text": "esourc",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 88
    }
  },
  {
    "element_id": "45671fff9c3b98a7c49bbc24950000fb",
    "text": "undle”. Bundle ﬁles should be named with a noun or noun phrase indicating resource bundle content, along with a suffix to indicate the language. ally include a country code and platform if differentiation is required, bundle that contains error messages in US English would be called sage_en_US.properties”.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 88
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 89
    }
  },
  {
    "element_id": "f1cb824b4e12682d6e0f070f4e1f482b",
    "text": "Java Programming Example - Primitive Object Usage",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 89
    }
  },
  {
    "element_id": "e7a943be30ab34bf9eebe2934d41e13a",
    "text": "Java Programming Example - Declaration and Statement Formatting",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 89
    }
  },
  {
    "element_id": "865ae45d4825f465a3a50d1d04ac60f1",
    "text": "IRS Standard Java Format Example",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "c912656300f160c8b0145c5a08cd3743",
    "text": "IRS Standard Java Format Example Standard Java Format {public class MyIntStack private ﬁnal Linkedlist fStack; public MyIntStack(); fStack = new LinkedList(); }public int pop() { return ((Integer) fStack.removeFirst()).intValue();} public void push(int elem) {{ fStack.addFirst(new Integer(elem)); }public boolean isEmpty() { { return fStack.isEmpty(); }}",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "57b05d5d2d33933c286a74eac316c5a9",
    "text": "}public boolean i",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "7852712199e4a4513aa09570550decb2",
    "text": "mpty() { { return",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "48588493624624ae30b9604b7d09f328",
    "text": "tack.i",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "daaf3e1a5a48dba7c9efb7c53befea7d",
    "text": "mpty(); }} (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "c9f1135129f168b56d5c0238ffbef8d2",
    "text": ") When an expression will not ﬁt on a single line, break it according to these general principles, see table below: • Break after a comma • Break before an operator • Prefer higher-level breaks to lower-level breaks • For arithmetic statements, try to keep expressions in parentheses together • Align the new line with the beginning of the expression at the same level on the previous line • Indent four spaces if these rules lead to confusing code or to code is up against the right margin (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "ff7ddd31fa78449be0aabde86de2c49f",
    "text": ") Line wrapping of “if” statements should generally use one indent to make easier to see the body of the statement. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "00bf6396a19e0734a5c550f5f0943cf5",
    "text": ") Ternary expressions can be formatting in the following way, see table Java Programming Example - Ternary Expressions Example of Ternary Expressions var alpha = (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "b8d31e852725afb1e26d53bab6095b2b",
    "text": "on",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "bdf253ef178bcf7053d6847418362fde",
    "text": "oolea",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "695da62371bf03018b7b3abae8c5be8e",
    "text": "xpression)? beta : gamma; var alpha = (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "b8d31e852725afb1e26d53bab6095b2b",
    "text": "on",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "bdf253ef178bcf7053d6847418362fde",
    "text": "oolea",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "8460721d0f1816a402931ee135773b19",
    "text": "xpression) ? beta : gamma;",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "ef11f5c98651d8bc9bd5676181ee2e66",
    "text": "(07-10-2020) Java Programming Example - Wrapping Lines",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "2ca428d325ea36343de63af2096ee1e2",
    "text": "Break before an operator Prefer higher",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "ab0d93e1020f6a7415c0271fceed78bd",
    "text": "level breaks to lower",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "dc31014ae40e77433c50ac0695fe3a69",
    "text": "level breaks For arithmetic statements, try to keep expressions in parentheses together Align the new line with the beginning of the expression at the same level on the previous line Indent four spaces if these rules lead to confusing code or to code is up against the right margin",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "bbcf2448f825ea6e54fd3f55dfc02350",
    "text": "Ternary expressions can be formatting in the following way, see table",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 90
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 91
    }
  },
  {
    "element_id": "2f113b3fc4f26daf64c6fde0f1da4164",
    "text": "(07-10-2020) Java Programming Single Line Comments",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 91
    }
  },
  {
    "element_id": "67bc28dac8d1ab3411befff11f6972de",
    "text": "(07-10-2020) Java Programming Block Comments",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 91
    }
  },
  {
    "element_id": "11dac33dc9634e42608ee5578679084d",
    "text": "Systems Java Programming Example - Block Comments Example - Block Comments /* On Windows machines numbers are in little-endian format. */ int wi",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "6487fcb87a3665b49e6a5f30ef2c363a",
    "text": "yte",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "8b3b0cfdc313958705d8e94572a133d0",
    "text": "umber(byte[] digits) { /* This must be done since Windows stores bytes with the least signiﬁcant digit ﬁrst. */ int[] bi",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "8af2819a4473cf283a486bce39253cbe",
    "text": "ndia",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "47f2ca7a1d5d03dd86760fb024cd9041",
    "text": "igits = In",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "aa429b50bc448cc9f2669abf2a987668",
    "text": "tream.rang",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "2b62c2d9097a8806269dc6cc8aad65ec",
    "text": "losed(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "5823e4fabb2f7f4fe525a13ed1a4a2fa",
    "text": ", digits.length) map(i -> digits[digits.length-i]) t",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "81709a9d1b78e91d4f2b1e60c3584118",
    "text": "rray(); return byte",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "4820ea383a1b4dac0ce15d30ff5e05ec",
    "text": "umber(bi",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "8af2819a4473cf283a486bce39253cbe",
    "text": "ndia",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "a99342bc84481a6256c743cfddb3c2cc",
    "text": "igits); } (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "315752b86e65c9b9388ff7d51c28450f",
    "text": ") Place the documentation comment directly above the class or class requiring documentation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "6f1bc744af6045893cfb2c6760ef32e8",
    "text": ") If information about a class, interface, variable, or method that is not ate for documentation is required, use a block comment immediately after declaration. For example, place details about the implementation of a such an implementation block comment following the class statement, not the class doc comment. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "00f82d688afc8923dab4f13bc56d0a63",
    "text": ") Examples for use in documentation should have no more than",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "befdd7bcab1e30d25569d1b5565e1e96",
    "text": ") Include any security-related information such as required permissions, related exceptions, caller sensitivity, and any security related preconditions postconditions. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "5d8781a0736febe9fb196595d36f6619",
    "text": ") For additional information about writing documentation comments, see docs.oracle.com/javase/",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "a7614c6ecff472e1980987d3bc75808b",
    "text": "/docs/technotes/tools/windows/javadoc.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "5c313c8a40e00da332d058f34405d81a",
    "text": ") A class is deﬁned as a template/blueprint that describes the behavior/state the software object. A software object’s state is stored in ﬁelds and shown via methods. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "319b8121150f471e0cbea8791910936d",
    "text": ") An important class design goal is to have self-contained classes with code that is more maintainable, testable, and reusable. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "c140ebb18cbe8acc89ef32a83a37355d",
    "text": ") All classes must be assigned to a package. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "90d5548d86a88d5e8af95162d92e3f83",
    "text": ") A package helps organize classes into logical chunks of functionality. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "ef165e180d92d85ff650e7bce55dbe97",
    "text": ") Classes and other top-level objects that do not have an access modiﬁer only visible to any other object in that package. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "1ab1632532bd06e1aae8385e1f906715",
    "text": ") Mark the package as sealed in the manifest when creating the JAR ﬁle for package. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "8a8aa73f8324327ba3c67a6484d138c1",
    "text": ") Set the security property “package.access” to prevent untrusted classes other class loaders to use reﬂection, and access the package through APIs. Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "233b4661cfc874f827f820c2fcd9c716",
    "text": "Java Programming Example - Block Comments",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "1b9ba40c7467bccf9f49777c5aa1842f",
    "text": "For additional information about writing documentation comments, see https:// docs.oracle.com/javase/8/docs/technotes/tools/windows/javadoc.html.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "580eb6dbdac601e08151e27debd77348",
    "text": "An important class design goal is to have self-contained classes with functional code that is more maintainable, testable, and reusable.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "b15a8f66a5ab9e4f14ae435bed361694",
    "text": "Set the security property “package.access” to prevent untrusted classes from other class loaders to use reﬂection, and access the package through private",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 92
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "34e9a51ed333ce0d136b25c499041b59",
    "text": "Java Interface Example Example - Java Interface interface Drivable { public int MAXIMUM_SPEED =",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "c39d72dba14aa4feafb90e889b3043c5",
    "text": "; void toggl",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "b8469655f312c64238ce9a126968a58a",
    "text": "ignal(boolean state); void se",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "0609f2ed55a87018a147daabc3bcdb1a",
    "text": "irection(int degrees); int ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "efb5f73d80d0467fb4defc1cb792be36",
    "text": "peed();stati",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "688e9152ac1381ff1ded4e43339e3f21",
    "text": "tringge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "9d8adeba55997532553531869bc29b05",
    "text": "escription(int whee",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "e7ea718d6f4365fa2eb15a33b6a96162",
    "text": "ount) { } default int ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "970eaf0d4dc9bec3d74134fa3d69e6f8",
    "text": "evolution",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "3f79bb7b435b05321651daefd374cdc6",
    "text": "e",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "84b003753ea115afd31c22725fda8ae0",
    "text": "inute(int whee",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "c824df59d0bfb01546d5415058f605e2",
    "text": "ize, int speed) { } } Any class that implements the interface as shown above must implement two methods with the same signature, like a contract. That class can also safely recast as an instance of that interface. The implemented methods be “public” in scope. Interfaces may extend from one or more interfaces. In addition to empty method signatures, interfaces may also include: • Constants – values that cannot change once deﬁned in the interface • Default Methods – default implementations of methods that can be ridden by implementing classes • Static methods – public methods that implementing classes cannot override Additional information on Class interfaces can be found at com/javase/tutorial/java/Ian",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "0bcdda7d997fbff1804b67e39094fc5d",
    "text": "/createinterface.html A type that is deﬁned as a class is a reference type. Variables assigned to a reference type initially have no value, or “null”. To assign a value to a reference type, either use the “new” operator, use a to an existing reference, or use a method that creates new reference type instances. Java Programming - Reference Type Example - Reference Type // [access modiﬁer] - [class] - [identiﬁer] public class Customer { // Fields, properties, methods and events go here",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "057b16289d9b53c67e21f04693ca4b32",
    "text": "Java Interface Example",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "35c0595e467318be6debdca05be0dd97",
    "text": "Example - Java Interface interface Drivable { public int MAXIMUM_SPEED = 200; void toggleSignal(boolean state); void setDirection(int degrees); int getSpeed();staticStringgetDescription(int wheelCount) { } default int getRevolutionsPerMinute(int wheelSize, int speed) { } }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "7a0cb583a2d61ee62890d2574891f2f5",
    "text": "Java Programming - Reference Type",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 93
    }
  },
  {
    "element_id": "91533e204e6035df25b1425a3034fa02",
    "text": "Systems (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "5500a0bc2a285be8994fb9552dc1ca95",
    "text": ") Classes may only extend from one class, but may implement one or more terfaces. If a class does not explicitly extend from another class it extends “java.lang.Object”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "d7a22cfc2e63d0f4fe2e9be18aefed84",
    "text": ") Provide the ability to create safe copies of the class. Do not implement the interface “java.lang.Cloneable”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "0d1b50ae95be6dd097c0e6c1d58b85e9",
    "text": ") Do not rely on the method “Object.equals” as the sole determination that objects are equivalent. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "6087685d1fb951a1f7fd40fc5a63956a",
    "text": ") Always override the methods “equals()” and “has",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "e490f43b663e7fa0dcd8cb124f1c89d1",
    "text": "ode()” so that two instances of the same call are functionally equivalent. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "4ba1983a8c51997223667a14570a8909",
    "text": ") Follow the general contract when overriding the method “compar",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "e51d31967464ca36386f4595d29f835f",
    "text": "o()”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "6402d5a733300552441c438e7920c025",
    "text": ") Compare class instances and not class names. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "8c556736972c3dd2eb3200c6e62c8ed6",
    "text": ") For more information see, classes.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "384466bbda1ce42a3722b108fc39c79d",
    "text": ") The purpose of an abstract class is to provide a common function set that multiple derived classes can share. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "a584baa683928fb5891801d68f9683fe",
    "text": ") Abstract classes may also deﬁne abstract methods. Abstract methods must implemented in any class that extends from the abstract class. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "b0b65e2b21f20edabea69a1dfe2d324e",
    "text": ") Use an abstract class over an interface if: • Code must be shared over several closely related classes if classes will implement your interface. • Classes that extend the abstract class have many common methods ﬁelds, or require access modiﬁers other than public (such as and private). • Declare non-static or non-ﬁnal ﬁelds, allowing a common set of that can access, and modify the state of the object to which they belong. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "ad79afc49ff6a3bc3a1eedc069edb7fe",
    "text": ") Use an interface over an abstract class if the interfaces “Comparable” and “Cloneable” are implemented by many unrelated classes. • Behavior of a data type must be speciﬁed, but not concerned about implements its behavior • Use multiple type inheritance (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "cf86c83f44948398be3c0064261d10cc",
    "text": ") For more information see, https://docs.oracle.com/javase/tutorial/java/Ian",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "7df2d21beee24b57ed246b01d6874ed7",
    "text": "/ abstract.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "bef7cb60d36a1dd2042ece7e072d9a83",
    "text": ") Sealed, or “ﬁnal” classes, cannot be extended like other classes. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "c73d82f9e9a051d37121fe601893ded5",
    "text": ") Immutable classes, like “java.lang.String”, must always be sealed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "100d50a4f8e6ecd459b3af11d4dce4da",
    "text": ") While a static class may have non-static methods, only one instance of a class exists. All references to a static class point to that one instance. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "9ef0a4cf4130d176a55b219e68e87bad",
    "text": ") Unlike other inner classes, static classes do not have access to members of the enclosing class, see table below for example: Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "30dd784ecd586be3ceff1cfc2104204e",
    "text": "Always override the methods “equals()” and “hashCode()” so that two instances of the same call are functionally equivalent.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "06178875689ca7e63378c02334ff030f",
    "text": "2.5.3.8.5.3.1 (07-10-2020) Abstract Classes",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "bd9aad42cf3596a536ab1b0e5da450fa",
    "text": "Abstract classes may also deﬁne abstract methods. Abstract methods must be implemented in any class that extends from the abstract class.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "dd5b2424e032b3db77bf2d393709673c",
    "text": "Code must be shared over several closely related classes if unrelated classes will implement your interface.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "1dbcf660dbaf2f069a0292dc41cd2b58",
    "text": "Classes that extend the abstract class have many common methods ﬁelds, or require access modiﬁers other than public (such as protected and private).",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "586c26eab095e0bee40a6b1b0e63b015",
    "text": "Declare non",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "d75cf6a909a8370b0262e6b1758a7e33",
    "text": "static or non",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "220c4118ed32dd970e7196bd931ab4fa",
    "text": "ﬁnal ﬁelds, allowing a common set of that can access, and modify the state of the object to which they belong.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "3a710c3ce1501de20c47484f85990412",
    "text": "(4) Use an interface over an abstract class if the interfaces “Comparable” and “Cloneable” are implemented by many unrelated classes.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 94
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "9a8e308f793bc0abf94fc2f6aa75a731",
    "text": "Java Programming Example - Sealed Classes Example of Sealed Classes class OuterClass { public OuterClass() { StaticNestedClass.setProperty(“color”);}staticclassStaticNestedClass{privateStringprop;voidsetProperty(Stringprop){this.prop = prop; } void String getProperty() { return prop; } } }public static void main(String[] args) { OuterClass.StaticNestedClass.setProperty(″color″); }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "18b40cfc64ab575073539eb121c6b3b7",
    "text": "Java Programming Example - Sealed Classes",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "eddf3148a54feb4fab1abffa99b5bca5",
    "text": ") In object-oriented programming a static class is any class variable that declared with a static modiﬁer where a single copy exists regardless of many instances of the class exist. Static classes also have the following acteristics: a. Static classes like sealed classes, cannot be extended. b. A static class may only exist inside another class. c. While a static class may have non static methods, only one static class can exist. d. Unlike other inner classes, static classes do not have access to of the enclosing class. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "d37cb751e0d8ae87c257f0001d50865e",
    "text": ") Use a non-static nested class (inner class) if you require access to an enclosing instance’s non-public ﬁelds and methods. Use a static nested you don’t require this access. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "fc69736603f4eb4fc3374c0858619f6b",
    "text": ") Inner classes, unlike static classes, have access to the private members enclosing class. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "20127842fa751755171b1967de42b1e1",
    "text": ") Use inner classes when: • It makes sense to logically groups classes that are only used in place • It increases encapsulation • It can lead to more readable and maintainable code (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "669708ab6c7e41bc7ab7d28b602f5a83",
    "text": ") While permissible, avoid shadowing member variables in inner classes, table below:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "b5639e32bbdc8875ba66fee65e5ff5bc",
    "text": "In object",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "590530bc91de50f21e9dd83dd8a85579",
    "text": "oriented programming a static class is any class variable that is declared with a static modiﬁer where a single copy exists regardless of how many instances of the class exist. Static classes also have the following char",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "0f08e361d2aeae65e57ed2022bb0d106",
    "text": "acteristics:",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "5d6cdbf89ed0452376af5e138bde0c76",
    "text": "a. Static classes like sealed classes, cannot be extended. b. A static class may only exist inside another class. c. While a static class may have non static methods, only one instance of a static class can exist. d. Unlike other inner classes, static classes do not have access to members of the enclosing class.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 95
    }
  },
  {
    "element_id": "b933241a2e9c216f20047ef6b9d53eb8",
    "text": "Java Programming Example - Inner Classes",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "a44e79e9668b2c88bcd4868639342340",
    "text": "Example of Inner Classes public class ShadowTest { public int x = 0; class FirstLevel { public int x = 1; void methodInFirstLevel(int x) { System.out.println(″x = ″ + x); System.out.println(″this.x = ″ + this.x); System.out.println(″ShadowTest.this.x = ″ + ShadowTest.this.x); }}public static void main(String... args) { ShadowTest st = new ShadowTest(); ShadowTest.FirstLevel ﬂ = st.new FirstLevel(); ﬂ.methodInFirstLevel(23);}}x=23this.x=1ShadowTest.this.x=0",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "2075d2fcae5220c07478fe5fbc65ab13",
    "text": "2.5.3.8.5.3.5 (07-10-2020) Immutable Classes",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "65dc12e0e7ae39f49d2851e561b53372",
    "text": ") Consider making classes immutable to prevent member data from changing after creation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "724cfc7d0f9c9d934c05158bebfa5d71",
    "text": ") Immutable classes should be sealed (marked “ﬁnal”). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "1146ee06bd02ce4a5585ab3ffe88ece3",
    "text": ") Hide default constructors and provide only constructors that populate the properties. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "72ace05423b3b954a746c36cb54a81ee",
    "text": ") Mark property accessors as ﬁnal. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "c0dc3ea3c12182cd1a28dcacebec7216",
    "text": ") If a class property is a mutable reference value, create copies of those (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "9425b21aa02e0d6574a2901f85cf46f3",
    "text": ") A class deﬁnition is like a blueprint that speciﬁes what the type can do. An object is basically a block of memory that has been allocated and conﬁgured according to the blueprint. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "09d0dd54ac64ab74713d4f18bf59297f",
    "text": ") Except for static classes, a program may create multiple instances of a class that exist independently of each other. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "b92d110d9d9b4d37d574142c15edd8de",
    "text": ") Since classes are reference types, assigning a variable to an existing reference type instance simply assigns a pointer to that class instance. Changes made through either reference affects both references., see Exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "aca615843fcc037063fd52d368b37ddf",
    "text": "Exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "bdb88939e3f45a3dc0deed6ad4f2886e",
    "text": ") Classes that inherit from abstract classes must implement any members marked as abstract. An abstract class that inherits from an abstract class not have to implement those abstract members from the base class.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "a0949f74cba02036a901185d821781c9",
    "text": "Classes that inherit from abstract classes must implement any members marked as abstract. An abstract class that inherits from an abstract class not have to implement those abstract members from the base class.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 96
    }
  },
  {
    "element_id": "6b2f7fc00aab0800d426a4dc35f55278",
    "text": "and Source Code Standards",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "2b22920e8a5618c6ae40993aec6f720c",
    "text": ") An object can be recast to any of the object’s base classes. The recast will no longer have access to the derived classes members. If recasting an object to a derived class, the class must be explicitly speciﬁed in the ment. If the recast is invalid, a runtime exception of “java.lang.Clas",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "f4bf9f7fcbedaba0392f108c59d8f4a3",
    "text": "as",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "a2f5dbc5657c0871e35409d31967b718",
    "text": "xception” is thrown. a. Point pt = new Point b. Object o = pt; c. Point pt",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "513b61815bcbaccd61cba167378b7949",
    "text": "= (Point)o (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "f6ba84201ed960c53c334c8e05fcc727",
    "text": ") If an object is recast to a base class, the actual class instance is used to determine which overridden method to use. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "01871df8530ed81f8146957913146522",
    "text": ") To ensure a cast is valid, wrap any explicit casts using the “instanceof” (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "5ab3de6cc2062ff152be169b67c6b0c5",
    "text": ") For more information, see https://docs.oracle.com/javase/tutorial/java/Ian",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "56f314eedc74bc873bb4062868a18197",
    "text": "/ subclasses.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "7606c45a99d79582afd8c2eac7973032",
    "text": ") Top level classes may only be accessible by other classes within the same package (no modiﬁer), or available outside of the package (“public” (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "d4049cfac69284b61707072f673c6338",
    "text": ") Inner classes have the same set of permissions as other members of a “public”, “protected”, “private”, or package-access permission. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "9fa7a5e4d7e74806e0e89f59f1a304f0",
    "text": ") For more information, see accesscontrol.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "71ba1a0fcac0a9a720111523c43c0f57",
    "text": ") A ﬁeld is a variable that is declared directly in a class. Use ﬁelds when shared between methods and must be available beyond the lifecycle of a single method. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "e65b1e623aa5c7285d57861a50ed27ec",
    "text": ") A class can have ﬁelds that are unique for each instance of the class or shared between all instances (“static”). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "348a38aa7253d5a8b5faecfa903ac9c8",
    "text": ") Unique ﬁelds should only have “private” or “protected” scope. To access or modify a ﬁeld outside of the class hierarchy, use “get” and “set” methods. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "f1011b507deaef66fa9c883ec776e0f6",
    "text": ") While a ﬁeld with “protected” scope is visible to all classes within the same package, do not modify that ﬁeld directly except from derived classes. protected get/set methods so derived classes can modify the ﬁeld if (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "77696cb3a05cc261736459aba47342f2",
    "text": ") To make a ﬁeld read only, add the modiﬁer “ﬁnal” to the ﬁeld. There is no striction to the initial assignment: it may be a constant or use a “new” statement to create a new instance, see table below.. Java Programming Example - Creating a Read-Only Field Java Programming - Example of Making a Field Read-Only class Animal { private String name; protected int number; ﬁnal Animal defaul",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "946c7ed1dffed5f96efcfef9f9adc7c4",
    "text": "nimal = new Dog(); public String ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "edf8c14169573db60f5e0879221264e7",
    "text": "ame() { return name; } public void se",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "f65dbe20efb3ea3d06bdc611aca772cc",
    "text": "ame(String name) { this.name = name; } }",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "7a1e6f456567a3dc4add1518685dfd24",
    "text": "page 81",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "03a645c43b66d976f76aba2252007877",
    "text": "Top level classes may only be accessible by other classes within the same package (no modiﬁer), or available outside of the package (“public”",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "526f0fea00507d2fe3ca1a69ee081cb3",
    "text": "Unique ﬁelds should only have “private” or “protected” scope. To access or modify a ﬁeld outside of the class hierarchy, use “get” and “set” methods.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "51d96de75ba5490a11499dd2fb7515df",
    "text": "Java Programming Example - Creating a Read-Only Field",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "6b1427ac333e0b1c1159a53eb4d4e4ca",
    "text": "class Animal { private String name; protected int number; ﬁnal Animal defaul",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "946c7ed1dffed5f96efcfef9f9adc7c4",
    "text": "nimal = new Dog(); public String ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "edf8c14169573db60f5e0879221264e7",
    "text": "ame() { return name; } public void se",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "71d8271bd2ac57fef2452926e0ef0825",
    "text": "ame(String name) { this.name = name; }",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 97
    }
  },
  {
    "element_id": "740fb5fd53d5b7fe2df3daf117370d6b",
    "text": "Java is a strongly-typed language. Every ﬁeld, every expression that evaluates to a value, and every method has explicitly typed input parameters and return",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 98
    }
  },
  {
    "element_id": "0d9063bc0a621b1ce27ef792aaaa61ad",
    "text": "Java Programming Example - getClass Method",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 98
    }
  },
  {
    "element_id": "3d03ff799ce0b81d01049b43658b73d4",
    "text": "Java Programming Example - Type Assigned to Variable",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 98
    }
  },
  {
    "element_id": "c846b8cce5f0859828f313f70358000f",
    "text": "Java Programming example - Type",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 98
    }
  },
  {
    "element_id": "66be2db8171ff57d61ad041ebba6070f",
    "text": "Java Programming Example - Use of Underscores",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 98
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 99
    }
  },
  {
    "element_id": "52a858fb740422d1ccc18bca7012b52c",
    "text": "Generic types require reference types as the generic type parameter. You add the appropriate primitive values directly and the value is automatically",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 99
    }
  },
  {
    "element_id": "7299ce5ed1d32deec43028e4c3759a4e",
    "text": "Java Programming Example - Using Autoboxing Type",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 99
    }
  },
  {
    "element_id": "65a5972edccaa44600167bbfae227633",
    "text": "Java Programming Example - Unboxing Type",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 99
    }
  },
  {
    "element_id": "648b353208934205b3cf8c4888b063e4",
    "text": "In general, use the primitive data type unless the number needs to be converted to another number type such as “byt",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 99
    }
  },
  {
    "element_id": "37bd9397beebdd74fb437035215473be",
    "text": "alue()” or working generic classes. Do not use equality operators (“==” and “!=”) to compare object data values. For more information: https://docs.oracle.com/javase/tutorial/java/data/ autoboxing.html. An enumeration is a special data type that limits the value of a predeﬁned set of constants. Use an enumeration over a set of constants. Enumerations may contain additional methods and constructor see Exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 99
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 99
    }
  },
  {
    "element_id": "814042acc7c155e54c3ff38ad03d3178",
    "text": "may contain additional methods and constructor parameters, Exhibit 2.5.3-6",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 99
    }
  },
  {
    "element_id": "a55ad795bacbc6bd437861a111ddd641",
    "text": "The use of the “Optional” class eliminates potential null pointer exception checking and runtime errors, making more readable code.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "97b2a065ae94a9dbd136cf067eabebbc",
    "text": "checking and runtime errors, making more readable code. Apply the “Optional” as return types as shown in Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "3c25852358bc7f42680adbf141a79bed",
    "text": "Do “Optional” as method parameters or in constructors. Consider using as ﬁeld variables for reference types that are settable by outside For more information : https://www.baeldung.com/java-optional. Java Programming Example - Optional Class Optional Class import java.util.Optional; class Account { private Optional<String> name = Optional.empty(); public Account(String name) { this.name = Optional.o",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "53201fc5b8ff4193113141f572c5a742",
    "text": "ullable(name); } public Optional ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "81ffce60ef0cee778c8d953abf3feb20",
    "text": "ame() { return Optional.o",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "17d7d6f998d825ad7f203d28103c3c44",
    "text": "ullable(name); } }public class Optiona",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "c7fbe1127ccc8d90b07e20b635cfa21e",
    "text": "est { static public void main(String[] args) { Optiona",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "09aaa36b2c3554f734f1ddace0ab6cc9",
    "text": "est test = new Optiona",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "c0ab31a64c8728218695d18a029f83ea",
    "text": "est(); System.out.printf(″Valid account name: [%s]″, test.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "297260d536520abcc5d189429760eff0",
    "text": "ccount- Name(new Account(″john″))); System.out.printf(″Null account name: [%s]″, test.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "0f16bb30ee9e57d7e2e7e5b89edb0b34",
    "text": "ccount- Name(new Account(null))); System.out.printf(″Null account: [%s]″, test.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "e754dac8e914d04ed8a8adf48b1c5720",
    "text": "ccoun",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "8c4853d0d151811e6cf4e4af2989138b",
    "text": "am- e(null));}public String ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "e754dac8e914d04ed8a8adf48b1c5720",
    "text": "ccoun",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "d23fe917537eeb4fce6f836f4fbb59a3",
    "text": "ame(Account acct) { Optional accoun",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "b27e52de1453ae655728d5caa013b0be",
    "text": "ptional = Optional.o",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "4e3c4fc4cdcba091a454dd43f2d76b82",
    "text": "ullable(acct); return accoun",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "4ae7ce3bc0d0e8e645aeca38480bf7d9",
    "text": "ptional.ﬂa",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "e27bb3d0ccd79c7bce8c3a169390692d",
    "text": "ap(Account::ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "adee5cc9e9ced0f0302cf66721ff5d6d",
    "text": "ame).o",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "e6b86dfb2a7fa3624202a85b02962bec",
    "text": "lse(″″); } }",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "6febb2433a6e1ebf7a086e429b8f9653",
    "text": "Apply the “Optional” as return types as shown in Figure 2.5.3-27 Do not use “Optional” as method parameters or in constructors. Consider using “Optional” as ﬁeld variables for reference types that are settable by outside callers .",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "b66a89c2bb645183dd8b393f369c538b",
    "text": "For more information :",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "0bae31d24e8b1019420e576d3ac843aa",
    "text": "Java Programming Example - Optional Class",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "f0d6cc96ab6f630df4c4be066a5e1bd1",
    "text": "Figure 2.5.3-25",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 100
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "aea53804b76469227e8fab7997359c99",
    "text": "Java Programming Example - Anonymous Class Java Programming Anonymous Class interface Greeting { public String getMessage(String name); }public class AnonymousClassExample { static public void main(String[] args) { Greeting englishGreeting = new Greeting() { public String getMessage(String name) { Optional nameOptional = Optional.ofNullable(name); return ″Hello ″ + nameOptional.orElse(″Anonymous″); } }; System.out.println(englishGreeting.getMessage(″Bob″));System.out.println(englishGreeting.getMessage(null)); }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "faa7e1f0a71b9553993958d79b624068",
    "text": "Java Programming Example - Anonymous Class Java Programming Anonymous Class Greeting { String ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "fb4367e18d91d6e79b626c5bc8cd2db7",
    "text": "essage(String name); }public class Anonymou",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "02d5d0522a76608d64a5d329e13a2f86",
    "text": "las",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "f24e3ac321a1c4249ab799d3f4a59d17",
    "text": "xample { static public void main(String[] args) { Greeting englis",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "7750cbb20a3ba3fae69bbd6d303ffa60",
    "text": "reeting = new Greeting() { public String ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "629fb3d496d374d0109c0d9548ca5e9a",
    "text": "essage(String name) { Optional nam",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "b27e52de1453ae655728d5caa013b0be",
    "text": "ptional = Optional.o",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "563d0454b665abaef65543fae9b24c92",
    "text": "ullable(name); return ″Hello ″ + nam",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "0b6935327cb9b3dbb5ec7c49a7a555b3",
    "text": "ptional.o",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "a6a329d3a1efd16f2f71b2a21cbcffcc",
    "text": "lse(″Anonymous″); } }; System.out.println(englis",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "89e2e6f0fe036e0dfe290617f2c87ea2",
    "text": "reeting.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "be5de75e935e8f187a78c57417804db6",
    "text": "essage(″Bob″));System.out.println(englis",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "89e2e6f0fe036e0dfe290617f2c87ea2",
    "text": "reeting.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "3a0e1207c47087f902bf2b4c11dc4afa",
    "text": "essage(null)); }",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "37254bc25cb946b1ab99c7d3999a675c",
    "text": "Anonymous Class Output // Output Hello Anonymous",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "ae1fd52bbb0b7dbfe4110194a58cfce1",
    "text": ") Lambda expressions utilize anonymous classes that have only one method signature, like the example above. A typical usage is applying a lambda expression over a list. import java.util.Arrays; import java.util.List; import java.util.Optional; import java.util.function.Consumer; import java.util.function.Function; i}",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "d945d29499773fbfab40117dcec13b17",
    "text": ") A class may contain either inner classes or static inner classes within a class deﬁnition. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "e456b609e8e965e88a179329833fbb0a",
    "text": ") While permissible, do not create fully deﬁned local classes within a method. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "8ed9ab711f1d33dc9bcd92012eb0da07",
    "text": ") It is acceptable to create anonymous classes from interfaces from within a method. import java.util.Optional; (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "22920eab572205d195b89b1983dc9a2b",
    "text": ") Lambda expressions utilize anonymous classes that have only one method signature, see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "f597d1edc24b9c304146e3f225f2c15f",
    "text": "and Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "7eadbd31376f396531ec67064354a5bd",
    "text": ". A typical usage is applying a lambda expression over a list. import java.util.Arrays; import java.util.List; import java.util.Optional; import java.util.function.Consumer; import java.util- .function.Function",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 101
    }
  },
  {
    "element_id": "ac1d6fb9893b941b231e641d8bf3da1a",
    "text": "Java Programming Example - Lambda Expressions Using Anonymous Class and Output",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "f5f6f5df57cb2d64b9ef9d3403274102",
    "text": "Anonymous Class and Output Example of Anonymous Class import java.util.Arrays; import java.util.List; import java.util.Optional; import java.util.function.Consumer; import java.util.function.Function; interface Greeting { public String getMessage(String name); } public class AnonymousClassExample { static public void main(String[] args) { Greeting englishGreeting = new Greeting() { public String getMessage(String name) { Optional nameOptional = Optional.ofNullable(name); return ″Hello ″ + nameOptional.orElse(″Anonymous″); }};List nameList = Arrays.asList(″Bob″, ″Sally″, null, ″Fred″); nameList.stream().map(n -> englishGreeting.getMessa- ge(n)) forEach(msg -> System.out.println(msg)); } }// Output Hello Bob Hello Sally Hello Anonymous Hello Fred",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "1c7aa736a95ba618539329ac323ced0d",
    "text": ") Use local classes when creating more than one instance of a class, access constructor, or introduce a new named type to invoke additional methods (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "f37b6b8df477a25627aeb6925f05f49e",
    "text": ") Use anonymous classes when implementing an interface is enough, and instance does not have to exist outside of the method. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "ee94088439abcd66495178db03838c6b",
    "text": ") Use lambda expressions when encapsulating a single unit of behavior that needs to be passed to other code. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "733c0acee43f2fb0c73914e62e2ee94a",
    "text": ") Create nested classes when the inner class should be shared with other classes, and access to local variables or method parameters is not (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "0c5e5e027a580cf5127c2d02c2d62d63",
    "text": ") Do not expose the parent class private ﬁelds though a public interface in inner class. For more information:https://docs.oracle.com/javase/tutorial/java/jav",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "91c9331a4d4944b60b12ee56655a1240",
    "text": "O/ whentouse.html .",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "ce141c2763f55897e754d9e42db87c48",
    "text": "Use local classes when creating more than one instance of a class, access its constructor, or introduce a new named type to invoke additional methods later.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "d4e45c04fc122de7bc9e1920cdf3da9c",
    "text": "Create nested classes when the inner class should be shared with other classes, and access to local variables or method parameters is not",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 102
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 103
    }
  },
  {
    "element_id": "a506d5af6211fb034c4e4b00c344d9a9",
    "text": "The generic parameter must be a reference type and not a primitive",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 103
    }
  },
  {
    "element_id": "8ebd0791e7bd6c7fce39d4eab51506ed",
    "text": "Java Programming Example - Generic Class Example of Generic Class class GenericClass <T> { private T item; public GenericClass(T item) { this.item = item; } public T getItem() { return item; }}public class GenericExample { static public void main(String[] args) { GenericClassintExample = new GenericClass<>(15); System.out.println(intExample.getItem() + 22); GenericClass textExample = new GenericClass<>(″Hello″); System.out.println(textExample.getItem() + ″ World″); } } // Output37HelloWorld Figure 2.5.3-29 (5) The most commonly used type parameter names are:",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "03d0bc3487a10a9af76bfe4878c15698",
    "text": "Java Programming Example - Generic Class",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "034905ec2f2103c9faa606b08eb7b99d",
    "text": "}}public class Generi",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "4ad6a62027a712993602df695995eae6",
    "text": "xample { static public void main(String[] args) { Generi",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "d3a0701abd9c6c6cfbbe052dfab6009a",
    "text": "lassin",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "6d5e2fffb6fbe2ac2d6f6841553f4cb2",
    "text": "xample = new Generi",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "69710bdb35b4acdbc4d9b08d8ac7df22",
    "text": "lass<>(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "282d96c88d9991fa36cb40cbfddf9b27",
    "text": "); System.out.println(in",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "14443fce28cba1567b178992ee15804c",
    "text": "xample.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "4bc5d2d25b622d09046fe78db36c3222",
    "text": "tem() +",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "a06c2151ccae943d50e6f878218ced6f",
    "text": "); Generi",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "93696df1c08ce337df98b27b782e0722",
    "text": "lass tex",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "6d5e2fffb6fbe2ac2d6f6841553f4cb2",
    "text": "xample = new Generi",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "fd2724c31446f289d29727acee48607d",
    "text": "lass<>(″Hello″); System.out.println(tex",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "14443fce28cba1567b178992ee15804c",
    "text": "xample.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "adcb1bc185eb3464589ed4e2c8779e7a",
    "text": "tem() + ″ World″); } } // Output",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "8d586f8b60df1ad7502b52fc50d2e0b6",
    "text": "Hell",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "634fa05101b591fdf20880ceded6ef2e",
    "text": "orld Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "d8d3b98ed36b8e4ecb70172a739629cf",
    "text": ") The most commonly used type parameter names are: • E - Element (used extensively by the Java Collections Framework) • K – Key • N – Number • T – Type • V – Value • S, U, V etc. -",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "fecb035622027511311e49c76ccf74d0",
    "text": "nd,",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "79a08d5ff56d9cac2a07c56ab2916767",
    "text": "rd,",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "cef04765d77ef3760e7fa0a50b8dd61c",
    "text": "th types (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "bc03054d9503f279c4958fc28596e921",
    "text": ") Use the diamond notation as shown above when instantiating a new of the generic type (only specify the generic type on the left-side of the sion). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "97e9da1e8d5dfbcb6ff7c203d16f5dc2",
    "text": ") Generic types may include more than one type, such as “java.util.Map”. the number of generic types in the class deﬁnition to no more than three (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "ffdbaded33b849f9146a71fc16cbab55",
    "text": ") Generic classes may have methods that utilize a different generic than deﬁned at the class level. The parameter must be enclosed in angle",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "465371f5cb2ab221a330eabd5b9609ea",
    "text": "Figure 2.5.3-29",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "f07a6ee94a78ac9104003e9b5f5e8be5",
    "text": "Generic types may include more than one type, such as “java.util.Map”. Limit the number of generic types in the class deﬁnition to no more than three .",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 104
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "2827404b11eee8bc69383f13a8b85b97",
    "text": "Java Programming Example - Generic Class using Generic Parameter",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "0a720b9529edf74507bef22d871e5565",
    "text": "} Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "da07e206969471b254b1e6af56aa458c",
    "text": "A generic method can be restricted further by specifying that a method parameter must optionally extend a class and implement one or more faces. A wildcard can be used in generics to specify an upper bound or lower A wildcard with no qualiﬁer will permit any reference value, including not derived from “java.lang.Object” such as “java.lang.Number” and null Consider applying an upper bound to generic method parameters. Consider applying a lower bound to generic method return values. When using the collection library, methods that accept an “Object” instance should be cast to the same object type as the parameter type used to the collection. For more html Program actions are expressed in statements. Common types of statements include variable declaration, assigning through expressions, conditional statements, iteration statements, handling, jump, and multithreading statements. Use only one statement per line, see ﬁgure Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "d03bf20576c326b1bc1cc64c17d6c685",
    "text": "Java Programming Example",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "f44918f9d3bb67f758794510f2b58d4c",
    "text": "- Statement Use Statement Use // Correct Usage counter++;item",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "12f151521d01f30914bc68fd8eac7042",
    "text": "emaining--; Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "b038d28b49e478f8530427e28c94f970",
    "text": ". Do not perform additional assignments in an assignment statement, see",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "2261e51b8d4cc825a7d08e3930742c5a",
    "text": "A generic method can be restricted further by specifying that a method parameter must optionally extend a class and implement one or more",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "45c145fd31696706be412c39a64c612d",
    "text": "A wildcard can be used in generics to specify an upper bound or lower bound. A wildcard with no qualiﬁer will permit any reference value, including classes not derived from “java.lang.Object” such as “java.lang.Number” and null",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "318de3ff76142ef88e5a940f2dd0a95c",
    "text": "Java Programming Example 1- Statement Use",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "357397400aed6c867c11eab7ca719206",
    "text": "Do not perform additional assignments in an assignment statement, see Figure",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 105
    }
  },
  {
    "element_id": "fcf6078c000190bc17b8a6111d1613d3",
    "text": "Java Programming Example 2 - Statement Use",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "c278c4d10065a6ecb308680810d771ae",
    "text": "Correct Use of Statement // Correct Usage ﬁnal int authnum = get(); number = ((",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "e413f0c26d16f6970b87396fc67867a5",
    "text": "* (number +",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "c620f0cf3c4cf123d13ce7f095bc9032",
    "text": ")) * authnum) + (authnum > threshold ?",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "8f6cfbae8f4be0bcd815edbc08b5f34d",
    "text": ": -",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "87feac786a10783f72a740b13a6b08a9",
    "text": "); // Not this number = ((",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "1b23c69abed8d582a761e5bcfd8856c8",
    "text": "* ++number) * (number=get())) + (number > threshold ?",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "8f6cfbae8f4be0bcd815edbc08b5f34d",
    "text": ": -",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "9d8b2b5670d18da8a99f6152f7ee7555",
    "text": ");",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "cfd5fe003f1b43dfb60734e122f56801",
    "text": ") Variable declaration statements consist of the variable type, name, and ally an initial value. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "25b3ab96bc1fbb56ca8c96b6037e5e60",
    "text": ") Unless the variable will be deﬁned immediately after declaration, always provide an initial value to the declared variable. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "0f982792dbf8532dcb0a716012910164",
    "text": ") If a method variable, declare the variable immediately prior to usage and not the top of the method with all the other method variables.see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "13ec2f2fe3601a4eafda8bcf0e33ee34",
    "text": "If a method variable, declare the variable immediately prior to usage and not at the top of the method with all the other method variables.see Figure 2.5.3-33",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "9dd98093f37ee84a1c7fbfe8e7eb41f1",
    "text": "Java Programming Example - Declaring Variables",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "8586d5526fe54bb313c36a0e42b135b6",
    "text": "Expressions statements may include assignment, object creation with assign- ment, and method invocation and end with a semicolon",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "9b995dc59269cc3bd3bb025715c72efa",
    "text": "Java Programming Example - Using Expressions",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "b4a68e1ab12f425e60785fe1a2559efe",
    "text": "Conditional statements allow certain blocks of code to run based on a certain condition. Two types of structures exist: if/else and switch statements.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 106
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "430938bda03ec026109849673bd3f467",
    "text": "For “If/Else” statements, always surround the embedded statements in curly braces.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "bc89c76c43d471912b35e196b75ca03e",
    "text": "Java Programming Example - Using Conditional Statements",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "1f5be66894e5ef6a6919e1f6499a7c1e",
    "text": "Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "ca814b79b7f29bab10558c14ee1a28c8",
    "text": ") For “switch” statements, all potential values of the variable must be in the “case” blocks. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "a448eeded79441e9bee4a15db6f46658",
    "text": ") Consider always using an enumeration in a “switch” statement. If add a static method in the enumeration to convert the non-enumerated to an enumerated value. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "16f633d9c43c06cb70e41524756bbbc2",
    "text": ") A “default” block should used to catch any value not explicitly considered. separate “default” block should (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "efa86e0bfb65b19c03006d7f50622456",
    "text": ") Explicitly provide a comment if one “case” block falls through to another block, Exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "c7a84ddbad3d07fd7a2324724ef7e251",
    "text": ") Iteration statements are used to loop over a block of code repeatedly until termination condition is met. Statements in an iteration statement are in order unless a jump statement is encountered. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "f743bc1ba15cddc8eccc5bcfa2a6ef4d",
    "text": ") Valid jump statements include:. • “break”: exits the iteration to the next statement outside the statement • “continue”: goes back to the evaluation statement • “return”: exits the function • “throws”: throws an exception to be caught in the function or outside the function. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "bcb6718e4cbbcc43341b52e835eebb55",
    "text": ") An iteration statement may be labeled. If an iteration statement is labeled, “break” and “continue” statements should reference the label unless it is intended to exit / return to the top-level iteration statement.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "18b38a6689af0be563903edc6a25ac70",
    "text": "2.5.3.8.6.4 (07-10-2020) Iteration Statement",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "3a8d093e9147a48a7f9488ae406c7f1d",
    "text": "“break”: exits the iteration to the next statement outside the iteration statement",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "a1501e56a200c43914456e2f14550d66",
    "text": "“continue”: goes back to the evaluation statement",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "a3f3f3b9eeff2f4d7a2754711fe72118",
    "text": "“return”: exits the function",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "accaf8a6058c53eacaf4399840d61e3c",
    "text": "“throws”: throws an exception to be caught in the function or thrown outside the function.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 107
    }
  },
  {
    "element_id": "08ac0e465cf9361ff17f0925c59570f2",
    "text": "Java Programming Example - Iteration Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 108
    }
  },
  {
    "element_id": "df9c987e9f55a33eeecf9cb7b4f9bde6",
    "text": "Iteration loops: for (int i = 0; i < 5; i++) { for (int j = 0; j < 3; j++) { System.out.printf(″[i=%d,j=%d]″, i, j); if (i == 1) { continue loops; }else if (i == 2 && j == 1) { break;}elseif (i == 3 && j == 0) { break loops; }}} // Output [i=0,j=0][i=0,j=1][i=0,j=2][i=1,j=0][i=2,j=0][i=2,j=1][i=3,j=0] (4) The “For” statement is typically used to iterate over a ﬁxed index range. In form, it is composed of an initialization statement, condition statement, and update statement.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 108
    }
  },
  {
    "element_id": "5f8259d380e488b096798f0c03b73001",
    "text": "The “For” statement is typically used to iterate over a ﬁxed index range. In this form, it is composed of an initialization statement, condition statement, and update statement.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 108
    }
  },
  {
    "element_id": "d5091018814e523bfc50cbbe5fcd3720",
    "text": "Readability purposes - consider doing non-trivial work inside the “for” block instead of doing it all in the update statement, see Figure 2.5.3-36",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 108
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 109
    }
  },
  {
    "element_id": "03922786a5d55d890e9e2649f0ee30da",
    "text": "Java Programming Example 1- For Statement For Statement // More readable. for (int i = 3; i > 0; i--) { displayCounter(i);}privatevoiddisplayCounter(int counter) { System.out.print(counter + ″...″); }// Consider using a different iteration statement. private int timeToLaunch = 3; public void liftOff() { for (startTime();isReady();countDown(),displayTime()); }private void startTime() { timeToLaunch = 5; } private boolean isReady() { return timeToLaunch > 0; } private void countDown() { timeToLaunch--; } private void displayTime() { System.out.print(timeToLaunch + ″...″); }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 109
    }
  },
  {
    "element_id": "ea2c946939565af76ef6f024c695dda3",
    "text": "Java Programming Example 1- For Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 109
    }
  },
  {
    "element_id": "7cc8cf9e0501fb95a6369ec135e60a9c",
    "text": "For statements may contain more than one variable but limit the number to no more than three (3) variables., see Figure 2.5.3-37",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 109
    }
  },
  {
    "element_id": "c51ae835100cdedfacc14c3a42300418",
    "text": "Programming Example 2- For Statement with Multiple Variables",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 109
    }
  },
  {
    "element_id": "be3be5c8034953888b4805693c88f6fb",
    "text": "A “for” statement may also be used to iterate over a collection. In this form, is composed of a reference variable and a collection. When iterating over a collection, do not modify that collection, see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 109
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 109
    }
  },
  {
    "element_id": "a46435f4df9898ded3dfea399c1f4ae9",
    "text": "below.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 109
    }
  },
  {
    "element_id": "2c5366ededbccca8f466ff2f405c1e7b",
    "text": "A “for” statement may also be used to iterate over a collection. In this form, it is composed of a reference variable and a collection.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 109
    }
  },
  {
    "element_id": "e0720161daf46a62495511b220623295",
    "text": "For Statement with Reference Variable and Collection.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 110
    }
  },
  {
    "element_id": "f9cb022487e6913c728158cfdd398506",
    "text": "Java Programming Example - Do While Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 110
    }
  },
  {
    "element_id": "5f7fdbe0f4a9ddeb2a7876fe1e037839",
    "text": "2.5.3.8.6.5 (07-10-2020) Empty Statement",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 110
    }
  },
  {
    "element_id": "22eada98801175efc351aa31f7e9b88e",
    "text": "Java Programming Example - Empty Statement",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 110
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 110
    }
  },
  {
    "element_id": "443e79ed12f134240c1d8bf0c00ab5cb",
    "text": ") Use assertion statements in test projects only. Do not use assertions in of exception handling or other validation methods. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 110
    }
  },
  {
    "element_id": "7ff0b6f2eb6606e51681eb36dccaa4e3",
    "text": ") Do not modify the state of any local or class variable in an assertion statement.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 110
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "09f66b7c2da09928f549107d664fc183",
    "text": "Java Programming Example 1 - Using Expressions",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "7c8584c4417916b029a14da4841df321",
    "text": "Expressions and Output public class ExpressionExample { static public void main(String[] args) { int largeNumber = Integer.MAX_VALUE - 10; largeNumber += 20; System.out.println(largeNumber);}} // Output -2147483639",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "a2c08525eb2e3788711b7dee165b44b0",
    "text": "Java Programming Example - Expression Rules",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "120603353f56cd9eef042c8739187633",
    "text": "Figure 2.5.3-42",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "232b0a69d299b59acfbd02c7949652e3",
    "text": ") Do not ignore values returned by methods. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "909f29e8358a5522af118680d14d038a",
    "text": ") When trying to pass functionality as an argument to another method, lambda expressions treat functionality as a method argument, or code as data. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "d95925e69fd26791f7fc1d20d369d7c6",
    "text": ") Lambda functions have the following functionality blocks: • Collection: one source collection to process, like a list • Predicate: zero to many ﬁlters to apply to the collection • Function: optional method that transforms the collection item to something else • Consumer: single function or code block that processes the item",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "daa50380ee0eaea50e3a46611535d873",
    "text": "2.5.3.8.7.1 (07-10-2020) Lambda Expressions",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "02096653d8198cea12610207d48bc41c",
    "text": "trying to pass functionality as an argument to another method, treat functionality as a method argument, or code as data.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "cf12b1002b78643e284e7c583fd2979d",
    "text": "Collection: one source collection to process, like a list Predicate: zero to many ﬁlters to apply to the collection Function: optional method that transforms the collection item to something else Consumer: single function or code block that processes the item",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "f5ebeaa4e6d51e281fdd018e2edeade3",
    "text": "Consider using aggregate operations that accept lambda expressions as pa- rameters over creating boilerplate code that iterates over the collection.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 111
    }
  },
  {
    "element_id": "ff083a2531abb447ef125ee4be03d730",
    "text": "lambdaexpressions.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "03fba43b1b0702f9cf594e2dc5682e07",
    "text": ") An operator is a program element that is applied to one or more operands in an expression or statement. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "07b2cd28cb48f66976d54d0697681259",
    "text": ") A unary operator contains a single operator and operand, e.g. y++; (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "e952589534c4895bd9aa89f5ba6f0540",
    "text": ") A binary operator, typically an assignment operation, contains the variable being assigned and the expression that is assigned to that variable. The ex- pression can contain one or more operands. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "3af3b5277743fd48bdd6b775b8b1231e",
    "text": ") To avoid exceptions and increase performance by skipping unnecessary com- parisons, use “&&” or “||” instead of “&” and “|” respectively. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "4067aab8bc123c5424bdcdb29935eed2",
    "text": ") A ternary operator contains a condition expression, followed by expression if the condition is met and an expression if the condition is not met. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "13da48a6f7b4aa887d250d183c73979d",
    "text": ") If the condition expression contains a binary operator, surround the in parentheses, see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "b78853082782612e2e7673da825b5db0",
    "text": "Java Programming Example - Using Operators",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "7f55ec58944e4f56d78441f5cb894a53",
    "text": "A ternary operator contains a condition expression, followed by expression if the condition is met and an expression if the condition is not met.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "b78853082782612e2e7673da825b5db0",
    "text": "Java Programming Example - Using Operators",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "9993056e678a5446d3285a0a9c633c56",
    "text": "Member overloading is the process of using the same member name for different members that vary only by the input parameters.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "29d6bb4df54fe21568c5773a442297eb",
    "text": "Overloading by parameter count makes it possible to provide simpler of constructors and methods by chaining them together",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 112
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "9474f041679c8ae3ebcbc8ad7fa175aa",
    "text": "Java Programming Example - Member Overloading Example of Overloading by Parameter Type public class PrintStream { public PrintStream(File ﬁle) { }public PrintStream(File ﬁle, String csn) { }public format(Locale l, String format, Object… args) { }public format(String format, Object… args) { } }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "08580831586c11461fe5a2ea68877d35",
    "text": "Use descriptive parameter names to indicate the default used by shorter overloads. Avoid varying parameter names in overloads. If a parameter in one represents the same input parameter in another overload, they should the same name. Avoid being inconsistent in parameter order in overloads. Subclasses should only override the longest overload since the shorter overloads should simply call the longer one with default values. Do not have overloads with same type and position as other overloads have completely different meanings. Allow “null” to be passed for optional arguments. Constructors can either be an instance constructor or a type constructor. Constructors are the most natural way to create instances of a type. velopers will search and try to ﬁnd a constructor before looking for methods, such as factory methods. Constructors can either be an instance constructor or a type constructor. Exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "bfb2d508c65e681cc7a38b81b8798f61",
    "text": "and Exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "daa8b46c731090f88403421bc12f902a",
    "text": "Always provide a default (no parameter) constructor. Consider providing simple constructors containing primitive parameters properties that are commonly populated. Consider using a static factory method instead of a constructor if it seem natural to use a constructor. For example: class method “ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "7c9744dc4cf509720d756b330363d7ee",
    "text": "nstance()”.. Do use constructor parameters as shortcuts for setting main properties. Do use the same name for constructor properties and a property if the structor simply sets the property.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "02b9c7488e99a986d989d124e3926bf5",
    "text": "Subclasses should only override the longest overload since the shorter overloads should simply call the longer one with default values.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "8a379c40a3fe44678997fa285ea4128f",
    "text": "2.5.3.8.9.2 (07-10-2020) Constructor Design",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "40a5a06f325a71f1b6c52fcc85210ea8",
    "text": "Do use the same name for constructor properties and a property if the con- structor simply sets the property.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 113
    }
  },
  {
    "element_id": "612ab7600f127b98f4b9dcc5bdf1c466",
    "text": "Java Programming Example 1 - Constructor Design",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "a9c7ffc3ab240a9193996f019af37b45",
    "text": "Example - Constructor Design public DesignExample(LocalDateTime instanceDate) { this.instanceDate = instanceDate; } { return instanceDate; }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "35435405f16a69a1b1d2c25fb95478a4",
    "text": "{ return instanceDate;",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "d73b5dc0038ad7786410a441e41ceca7",
    "text": ") Do minimal work in the constructor. This eliminates the need to throw tions when trying to create instances. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "f8d4676c0e8f199b5a63f448e65c0fea",
    "text": ") If appropriate, do throw exceptions from instance constructors. Do not throw exceptions from type constructors. Instead of type constructors, consider initializing static ﬁelds when",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "75f2a93d88b64b7729c331a89c7e1e3d",
    "text": "Instead of type constructors, consider initializing static ﬁelds when",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "060da5252e990ca2b4f2be714e5db199",
    "text": "Java Programming Example 2 - Constructor Design",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "f5d61938a45f2fbaab63cdedbcefefe6",
    "text": "// Do this static Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "929aaae7140e6af246341fef4eb092fc",
    "text": "ime ﬁrs",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "44aec6e382dbca9cb007808e063a6e8f",
    "text": "ate = Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "3df665408f6484fea9580696f6f2f694",
    "text": "ime.now(); // Instead of this static Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "929aaae7140e6af246341fef4eb092fc",
    "text": "ime ﬁrs",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "22d911c77d3b81616fa96378e57ed234",
    "text": "ate; static { ﬁrs",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "44aec6e382dbca9cb007808e063a6e8f",
    "text": "ate = Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "4a8bfe1f53c5956e1004c6d9c46e5b81",
    "text": "ime.now(); }",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "e3a1f873ff6f07f5ee204972c5fbd160",
    "text": "static { ﬁrs",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "44aec6e382dbca9cb007808e063a6e8f",
    "text": "ate = Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "86eef9a63fcfcfc1627b7b00a037168c",
    "text": "ime.now(); } Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "9e59c3e6e10eabfb00c23c5dfcbc2fa2",
    "text": ") For sensitive classes, utilize a static method to create instances over a structor. This allows for security checks to take place for an object is Return null if an exception occurred during creation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "79551e43957e73c4393675685e6b9e46",
    "text": ") Prevent the construction of sensitive classes. Pre-create instances and them with classes that need that instance. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "49a5d8e3289f1969b1d9a266f6852a49",
    "text": ") Do not call methods that can be overridden in a constructor. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "b7296679d886ed21746e13170435b407",
    "text": ") For more information: https://docs.oracle.com/javase/tutorial/java/jav",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "ade0331f45ca597cbdf4e13bf39a2eb7",
    "text": "O/ constructors.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "c4a682edbd7db82f8dd353fa0fc309cb",
    "text": ") The “Object.ﬁnalize()” method is intended to be called just prior to an being claimed by the garbage collector. However, use of the “ﬁnalize” leads to performance issues, hangs, and deadlocks. It is completely when the garbage collector will pick up an inaccessible object. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "b8aca53103df89f926d853f14be84725",
    "text": ") If using a pooled resource, always explicitly release the resource when using the resource. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "fe35f6496dff44030becf8b04389a682",
    "text": ") For example, a database connection is needed to work over several non- concurrent operations. Instead of creating a new connection on each call, connection pool can be established on instance creation / “open” method.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 114
    }
  },
  {
    "element_id": "2867fbb76f33c285706fff1c20fe8c17",
    "text": "Source Code Standards",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "e0cb5d3bca2275ed4b3ac59c6d7b8620",
    "text": "page sequent calls to that instance use the connection pool established. When instance is no longer needed, call a “close” method that disposes all the nections in the pool. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "a2559d937892312f87c32f3a654adb72",
    "text": ") To prevent malicious classes from implementing or overriding the method “ﬁnalize” and obtaining sensitive information in an instance, perform a manager check before calling the super constructor. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "b41b60fb47f460cb5f76de35014f96f9",
    "text": ") The principle of encapsulation, a cornerstone of object-orientated program- ming, states that data stored within an object should be accessible to only object. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "8edc7e3213a8fa7788ba1ba3a1a7f353",
    "text": ") Do not provide instance ﬁelds that are public or protected. Use property methods for accessing ﬁelds. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "3d1bf4367474c8b4a8f2ab5d4f103897",
    "text": ") Do use public constant ﬁelds that cannot be changed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "6d46709660621a8cb03a395720f50375",
    "text": ") For more information guidelines/ﬁeld (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "b5cac67840e05a5ad9a049d1c4854e1e",
    "text": ") Java properties are accessible using the “ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "f26a3230d87583dcb1ae6108782b0969",
    "text": "roperty()” and “se",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "fd40e46eb883b19ca08a72f826fbd4aa",
    "text": "roperty()” methods. For boolean properties, use “i",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "9e1813accd64099ccad1c2035085159d",
    "text": "roperty()” instead of (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "0adfd392d264bf57b401929f45faaf00",
    "text": ") If explicit element control is needed for a collection property, replace erty()” with “ad",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "7d1123dfd0edc072401d2acb378179f4",
    "text": "tem()” and optionally “remov",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "27e385271b2ba05705328837679b8d8d",
    "text": "tem()” methods instead. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "e0062f5874229ead42f4f2ea4d46cf90",
    "text": ") If the property should not be changed after creation, require the property in instance constructor and only provide a “ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "ec99f3f53d307476f279777e9b5a4dd7",
    "text": "roperty()” method. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "59d76d1d44770d174cc1aec193351b9e",
    "text": ") Do not make the “se",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "c2ccf2400c22bfd3c76b5d9f8468eccd",
    "text": "roperty()” method more accessible than the “ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "10120d56536562f4383f94b2a19017d8",
    "text": "rop- erty()” method. For example, do not make the setter “public” and the getter “protected”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "648eb2a5c2617c07230241c5255f0124",
    "text": ") Provide only property methods that are needed and assign them with the restrictive modiﬁer permissible. Provide only property methods that are and assign them with the most restrictive modiﬁer permissible. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "315c44916785cc4f73a02d95710280ff",
    "text": ") Provide sensible default values for all properties, ensuring that the defaults not result in a security hole, inefficient code, or lead to null pointer (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "2006ec1f75e17cc201b2587913f06338",
    "text": ") If two or more properties need to be set together, consider providing a that sets them at the same time instead of two individual setter methods. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "8323ec8b504eb25bb2ba709106f86480",
    "text": ") If a setter method throws an exception, preserve the previous value of that property. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "772f8a5b3c83f19d01bad925f9f74495",
    "text": ") Avoid throwing exceptions from getter methods. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "eb67c0039b9c6e37c4bd24947646b096",
    "text": ") If necessary, collect a list of callers that can listen for property changes. the property changes, notify the listeners that the event occurred. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "f77502e90b06bb7cda15f04599735e53",
    "text": ") Follow input validation and data sanitization rules listed below. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "833d062418ab9fc23aae3df11a581430",
    "text": ") Create abstract properties where a family of classes have a common but the base class cannot actually implement the property, see Exhibit Internal Revenue Manual",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "4c84ffb71cc3da596e42d91f73a1f0db",
    "text": "sequent calls to that instance use the connection pool established. When the instance is no longer needed, call a “close” method that disposes all the con- nections in the pool.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "bfe69767eb39f90d8eaeccbdb1e876c9",
    "text": "Java properties are accessible using the “getProperty()” and “setProperty()” methods. For boolean properties, use “isProperty()” instead of",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "70859999919c20d7fec91542d90e8de7",
    "text": "If explicit element control is needed for a collection property, replace erty()” with “addItem()” and optionally “removeItem()” methods instead.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "5d2b1d0020cab28a8f05fd31514410c4",
    "text": "If the property should not be changed after creation, require the property in instance constructor and only provide a “getProperty()” method.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "5ab41925f4d5e452b2f3e494c484a4d8",
    "text": "Do not make the “setProperty()” method more accessible than the erty()” method. For example, do not make the setter “public” and the getter",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "2ba35027963ced798ac58dbf88b672ab",
    "text": "Provide sensible default values for all properties, ensuring that the defaults do not result in a security hole, inefficient code, or lead to null pointer exceptions.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "c3eabe088f00eebe0fd24b67e7263142",
    "text": "If two or more properties need to be set together, consider providing a that sets them at the same time instead of two individual setter methods.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "a9f2ac35e139276b8e222d13fee7b812",
    "text": "If necessary, collect a list of callers that can listen for property changes. the property changes, notify the listeners that the event occurred.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "87b6a4d2263c8417fbc785eb6009395f",
    "text": "Create abstract properties where a family of classes have a common property but the base class cannot actually implement the property, see Exhibit 2.5.3-11",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 115
    }
  },
  {
    "element_id": "698a59e0a7bb049b94b3006a8bef482d",
    "text": "static ﬁnal int READ_ONLY =",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "e2aef3c3fabd7be354b899884114c5e3",
    "text": "; ﬁnal class Physica",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "5dc00b5796c0202b1ad031530d852da3",
    "text": "onstants { static ﬁnal public int SPEED_OF_LIGHT =",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "d2e2adf7177b7a8afddbc12d1634cf23",
    "text": "_",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "d2e2adf7177b7a8afddbc12d1634cf23",
    "text": "_",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "241e50be88902303f454409193b5563c",
    "text": "; // m/s static ﬁnal public double GRAVITATIONAL_CONSTANT =",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "1a1cf166bf890449f3a7a48a4cde7dfb",
    "text": "e-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "1039bed5280ae2021e9c845b371b768d",
    "text": ";//Nm^",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "22bfd60d007b05f36e57873b23c9d325",
    "text": "/kg^",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "48b8e35b3724273ba6af184d8b303feb",
    "text": "staticﬁnalpublic double PLANCK_CONSTANT =",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "d2e2adf7177b7a8afddbc12d1634cf23",
    "text": "_",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "d2e2adf7177b7a8afddbc12d1634cf23",
    "text": "_",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "1a1cf166bf890449f3a7a48a4cde7dfb",
    "text": "e-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "fc1c30c8aa1fdaa3d8125dcf04373a31",
    "text": "; // J*s }",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "397204397279f092b45c11c7a61527db",
    "text": ") Parameters are primitives and reference variables that are part of a method constructor member. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "899499be1ae669d0201bec49bd8eeccc",
    "text": ") Use the least derived parameter type that provides the functionality required the member. For example, if a parameter consists of a list and the method does not need to access elements by index, have the method accept a “java.uil.Collection” instance instead. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "2e95463b3489ff980991a4f3b6018f4c",
    "text": ") Do not use reserved parameters. Every parameter passed into a member should be used in some way within that member. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "e4bd8984bc4271f2d7771f6a12ab13aa",
    "text": ") Do not have public methods that use multi-dimensional arrays as parameters. Redesign the API to pass a collection of an object that contains a collection. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "af697536728759baf92553da2832acb7",
    "text": ") Be consistent in naming parameters when overriding members or implement- ing instance members. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "92a020b0bfae602eb573d9c74102dd94",
    "text": ") If a method requires two or more boolean parameters, consider using an enu- meration value instead. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "4de5e83cf22aaa4d14d6ed69f7b0403f",
    "text": ") Do not use boolean parameters unless it is absolutely certain that the parameter will never need two states.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 116
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "190fbfb5b977c77ce128c5cdc252c052",
    "text": "Consider using boolean values for constructor parameters that are truly two- state values and that initialize boolean properties.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "34bf603ed89540630cd9594fea0f9cea",
    "text": "Java Programming Example - Variable Length Parameter Using a Variable Length Parameter class Polygon extends Shape { int[] sides = new int[",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "d27949631b6ca9a19d6255f963fd814a",
    "text": "]; public Polygon(int… sides) {this.sides = sides; }}Polygon poly = new Polygon(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "fd0f38844b9901d3a4e7c44630346145",
    "text": "); (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "b05f8a3084d370cdff136f2dc4208294",
    "text": ") If callers will typically pass in large quantities of a particular type or always pass in a collection of items, consider having the method simply accept a lection instead of a variable length parameter. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "0dce190302092564e6121802f0697cf9",
    "text": ") Do not use the single parameter form above if the array will be modiﬁed by member. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "7aabde95c238a9fd121e484a39472cde",
    "text": ") Consider using a variable length parameter in a simple overload, even if a more complex overload could not use it. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "3e3be972aa6104b30c1aa0fc5125d65c",
    "text": ") Try to order parameters to make it possible to use a variable length (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "6c959710dc10964713f5cc0926908751",
    "text": ") Consider providing special overloads and code paths for calls with a small number of arguments instead of variable length parameters when is critical. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "a98c5c941278708fe0550ac4074a1991",
    "text": ") Do check a variable length parameter for “null” values. Polygon poly = new Polygon((int[])null); (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "993fcd84d4fd66c89aea16401b9c3447",
    "text": ") Events are the most commonly used form of callbacks. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "20237ce84a36ebc1046711daf2dcd6fe",
    "text": ") Two common groups of events include events raised before state changes events raised after state changes. Most events in the AWT are in the latter category, such as in the class “Mous",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "ba339dfb9979a960a331183383ebe3e3",
    "text": "npu",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "2b12185e58790d4cf30b818564a33ef4",
    "text": "istener”: “mous",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "6e8e1d1c73533bde3728b91913fb10d0",
    "text": "ragged”, and “mous",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "68e24790aa64e6e055a5b09296aa057c",
    "text": "oved”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "3f18d6a50204b1c4d9d7d7abebfc1afc",
    "text": ") To create a new event: • Create an event object • Create a listener interface that has one or move events that could triggered with the event object. • A class that holds a set of listeners that are notiﬁed when an event triggered",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "490cc3bc776f9f76c3106bc5731222aa",
    "text": "Java Programming Example - Variable Length Parameter",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "e4a898871600245eb73e7643a71226f0",
    "text": "Create a listener interface that has one or move events that could be triggered with the event object. A class that holds a set of listeners that are notiﬁed when an event is triggered",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 117
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "4addd08d4e9755a0407df75575b942b8",
    "text": ") If a listener interface contains several events, create a listener adapter that provides no-operation implementations for each event and subclasses then override only the events that the class is interested. For example, the interface “Mous",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "ba339dfb9979a960a331183383ebe3e3",
    "text": "npu",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "ca8162903df5af2825d47c72628ec779",
    "text": "istener” is implemented by the class “Mous",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "3168743d21f50b088ec387be2dc6939e",
    "text": "nput- Adapter” (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "1ec26439a9a25830856f8a7f61ac0856",
    "text": ") Use the term “raise” for event notiﬁcation methods instead of “ﬁre” or (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "41e0a8a74cd736b81a1529f07b19c843",
    "text": ") Consider extending the event class from “java.util.Even",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "a6642b7b602d4d9a0460408fac6a3728",
    "text": "bject” instead of using the base class. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "b51cd5ce89d28e3cc1cac233a4724363",
    "text": ") Make the event notiﬁcation method protected for subclasses to override event method. Use private only when the class cannot be subclassed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "763d0813204eb46970fee0eb4f744620",
    "text": ") Only pass in the event object into the event notiﬁcation method. If properties are needed, enhance the event object to contain those The parameter name should be “e”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "3af426f055bf421458a54ac86faeac26",
    "text": ") Only pass “null” as the event object source only for static classes when instance object is unavailable or not important. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "16bba069a37bde821354cc18e30a9782",
    "text": ") Do not pass “null” into event properties. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "bfcd538e934c9b017aef91bd839c20ee",
    "text": ") If the event raised is a pre-event, consider adding a mechanism that can cancel the event from ultimately taking place. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "8caf85d7129fb95c43584e271518c4fe",
    "text": ") Event methods should always return “void”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "4eb6fc983f6357df7bb8f4a075fe3890",
    "text": ") The ﬁrst parameter in an event should always be of type “Object” and be named “source”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "c85ffe26c247cba648dd1accbc1b260d",
    "text": ") Do not use deprecated or obsolete methods. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "373d5443f16b42e180af901fab00e752",
    "text": ") Do not increase the accessibility when overriding methods. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "c473a8b485899fd9507a6e37647eee4c",
    "text": ") Coding conventions for creating: arrays, exceptions, improve the the software, allowing engineers to understand new code more quickly thoroughly. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "023364a781c74d93c8dac31fa5d9cd44",
    "text": ") Use concise syntax when initializing arrays., see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "a169dab4d3bcbddac84aa1bf3459a762",
    "text": "Java Programming Example - Syntax Readability Readable Code // Preferred notation. String[] nam",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "3009d58e58e8c53018f9f6e90a29fbfc",
    "text": "rray = { ″Bill″, ″Joan″, ″Ted″ }; String[] nam",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "d5e7eb21e4c9125ea12b7d6d19f782f7",
    "text": "rray = new String[] { ″Bill″, ″Joan″, ″Ted″ }; / / Have to initialize each element one at a time.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "cc225ffb1a85a77c95ec2dc22d0b846d",
    "text": "Use concise syntax when initializing arrays., see Figure 2.5.3-48",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "d5d944c37c113957ceaccc7ea56a9a00",
    "text": "Java Programming Example - Syntax Readability",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 118
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "3fabe9e7162e8e64d4e815fc208e7a21",
    "text": "Use exception handling when execution failure occurs, disrupting the normal ﬂow of statements in a member. Do not return error codes.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "052f68cd56b027c70aad199deaa91293",
    "text": ") Use exception handling when execution failure occurs, disrupting the ﬂow of statements in a member. Do not return error codes. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "430aebd75665697bc33e40149b84ea3c",
    "text": ") Use exceptions to separate error-handling code from regular code. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "efea9d51dee0c96a6b74d884ec725a31",
    "text": ") Errors thrown are propagated up the call stack. If a method chooses not to resolve the exception thrown by a statement, the method can simply throw exception to its caller. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "57cdc9690a3cbb565f0b7198c3de48cc",
    "text": ") Exceptions can be grouped by execution failure type, such as input/output illegal argument errors. Avoid using general purpose exception handlers as “java.lang.Exception” as the sole exception handler. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "6a763ae29ce75ff72df0794e5142a1d4",
    "text": ") Checked exceptions must be caught and handled as described below. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "9466c014200e3de9febc45f920a905fc",
    "text": ") Exceptions that are external to the application that cannot be anticipated or recovered from extend from “java.lang.Error”. Applications should not try to catch these exceptions except to perform logging or display a notiﬁcation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "61058ced472cd0e5169e7d5ae8adc18c",
    "text": ") Exceptions that are internal to the application that cannot be anticipated or recovered from extend from “java.lang.Runtim",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "b46ee7b80b1ee57ad17416369a92ead8",
    "text": "xception”. Consider the application to eliminate the sources of these exceptions rather than catching them. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "f0a6f5a5db6a77fdbffbe3db94d27ceb",
    "text": ") Do not use exceptions for the normal ﬂow of control. By their name, should be raised only in exceptional circumstances. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "7f16a8cf1a5411b2134b4a638085328c",
    "text": ") When logging exceptions, always sanitize content that came from an source. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "9de9787fbd96d2c4baf2d47b091700fd",
    "text": ") Consider another mechanism instead of exceptions if the application will more than",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "c67923d0f807a43b0717cd0924788d86",
    "text": "exceptions per second. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "be51b1be99675174a0bdbcf5ce7fd948",
    "text": ") Document all exceptions publicly thrown in the documentation comments. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "1798c1061955cacf08ae17433f717e5f",
    "text": ") Do not have public members that can turn off a thrown exception by parameter. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "23e25f4549f0f96e289bfeda0918db2c",
    "text": ") Do not return exceptions in the return value. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "7c5aebd9377376fca803da489465c096",
    "text": ") Consider using exception builder methods to create a new exception before being sent. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "661ae9168f5c4b9394e249c0beeac4d2",
    "text": ") Avoid throwing exceptions from “ﬁnally” blocks. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "7593aef9e0b2398cc1a62ea9e71e0fe9",
    "text": ") For more information:https://docs.oracle.com/javase/tutorial/essential/ exceptions/catc",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "f569a39bf10cf81ba4b713a57fe1c7d5",
    "text": "eclare.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "cbfaec7f63ad8f2357b447bbdbdbdbc3",
    "text": ") For more information on errors More information on errors: com/javase/",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "87c1b5d74848629608058dca57ef04ee",
    "text": "/docs/api/index.html?java/lang/Error.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "9f52ac48c23af7401bc1d745cf102960",
    "text": ") A “try” statement starts a block of code where exceptions may be thrown",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 119
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 120
    }
  },
  {
    "element_id": "83f76060a73b2d35e7a51fb7f813be25",
    "text": ") Exception handlers can handle more than one type of exception that are related to each other by using the pipe “|” operator. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 120
    }
  },
  {
    "element_id": "867adb6fb53c720dadfde4b908ac93c9",
    "text": ") Organize exception handlers from most speciﬁc to most general. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 120
    }
  },
  {
    "element_id": "0b4e9572aa1a70185852cd9c27d90e23",
    "text": ") Always use the ﬁrst letter of the exception name parts as the exception handler variable name. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 120
    }
  },
  {
    "element_id": "1ee3447be8e62c860da90b7a17f3c15d",
    "text": ") When a using a resource that is only needed in a “try” block, specify the resource with the “try” statement to insure it is closed on exit. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 120
    }
  },
  {
    "element_id": "dc0fcfdb6a50d311f1b9b366e83eec0a",
    "text": ") Optionally, the method can choose to simply pass the exception to the with or without handling the exception ﬁrst. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 120
    }
  },
  {
    "element_id": "84e950f11c39af6379daa78809e518f7",
    "text": ") Always do something with the exception, catch or throw it up to the caller, never both, see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 120
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 120
    }
  },
  {
    "element_id": "f0da81ce552e308b1e1f332c76362c68",
    "text": "for more guidance. Java Programming Example - Catching and Handling Exceptions Catching/Throwing an Exception",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 120
    }
  },
  {
    "element_id": "a36c062ebbfe6ef0c7ee9de49b8e0077",
    "text": "Java Programming Example - Catching and Handling Exceptions",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 120
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "a62e85ed347ecafcd9d6d58a99c13b2b",
    "text": ") Clean up any resources not controlled in the resource section of the “try” (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "0a82e01534db84e6784be235ee3aa26b",
    "text": ") Never explicitly catch “Nul",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "defb5808c6d1c77aa347756f55f2d46a",
    "text": "ointe",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "8bf28a5d1b10574f69f20b557fa7bbd7",
    "text": "xception”. Rewrite the code to mitigate null condition. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "1b97479ca170b539f78cb90120025a19",
    "text": ") Never throw an exception from the “ﬁnally” block. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "0c7035529e00df2e052b9487741feba4",
    "text": ") When creating custom exception classes, use the initial exception as a parameter to the custom exception instance so the stack trace is not lost. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "2c73ecf4f6914a2f8ef260318adac2c7",
    "text": ") Always provide context of what occurred in the exception thrown with the trace information for development purposes. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "2cd8d8cab8657701498bb427fa7a139f",
    "text": ") .Only include known, acceptable information in exception details rather trying to ﬁlter out the sensitive properties. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "a844d7cf99e2168c83cbcfc992910f4a",
    "text": ") Do not include ﬁle path information, account names, or home directory mation that enable hackers to guess the underlying ﬁle or data structure. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "b82d98526f96cabdaa7c2fc1328869ba",
    "text": ") Consider sanitizing the exception type name, such as tion”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "60300ec516988985ce043a53b3cb6ddf",
    "text": ") Don’t convert checked exceptions to unchecked (runtime) exceptions. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "f4b961b7c19e2e9490fdacf33abb431a",
    "text": ") If the method emits unchecked exceptions, such as a document when that will occur but do not speciﬁcally indicate that in the method deﬁnition. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "7a247da9c89612e9453d5ba1c823b9eb",
    "text": ") Do not create exceptions that are extended classes of ception”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "89cb0a8876ccc1de18cc70f85782c877",
    "text": ") General rule: if the caller can recover from an exception, make the throw a checked exception. If the caller cannot recover from an exception, make the method throw an unchecked exception. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "cb0ae0feae0ab550ef96fcc672862dbc",
    "text": ") Applications can utilize multiple threads of the executing processor using current programming techniques. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "ab1cd5094bf37d0ede9f51e7e9a65fd9",
    "text": ") Threads are lightweight processes that enable different blocks of code to concurrently (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "8e995d77e6d44af8cfc98f24863b8c19",
    "text": ") To directly control thread creation and management, create instances of “Thread” to initiate an asynchronous task.. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "420920396c124a8f4538d12d451b988b",
    "text": ") To create a thread, create a class that implements the interface nable” and use it to create a new “Thread” instance. Do not subclass from class “java.lang.Thread”, see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "44a2b12c3e439e1c23654c77cd0f7461",
    "text": "for more guidance.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "484ae4e7755cdfa7c4a136872644a8a9",
    "text": "When creating custom exception classes, use the initial exception as a parameter to the custom exception instance so the stack trace is not",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "c8709f0b5727b781ba6215ee1dac3abc",
    "text": "Do not include ﬁle path information, account names, or home directory mation that enable hackers to guess the underlying ﬁle or data structure.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "73d500b9f440bb4579ace3d8864e0ec4",
    "text": "(07-10-2020) Unchecked Exception Best Practices",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 121
    }
  },
  {
    "element_id": "7a93de1aa1b87a1d3ea2c849e7326779",
    "text": "Java Programming Example - Thread Creation",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "1f5be66894e5ef6a6919e1f6499a7c1e",
    "text": "Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "1997e4af8c42c34157a0577161bfa790",
    "text": ") A thread can be paused, or put to sleep, for certain duration. The thread pause for at least the speciﬁed amount of time but not guaranteed to be precise. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "1e83d08ddc818a0d73528bd701a3c82b",
    "text": ") When a thread is interrupted, the thread should terminate and clean up any used resources. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "df587908795360d9e3b9526c4977fca6",
    "text": ") A thread can be paused by waiting on another thread to complete by them together. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "dc2b5351577155a20831545d78f8c0ec",
    "text": ") Use synchronized methods to prevent shared data from being modiﬁed by multiple threads or receiving inconsistent views. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "66350ec0b10d58227490e2bb10f7a3ad",
    "text": ") Consider using synchronized blocks only when it is safe to interleave the affected ﬁelds. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "7120ddd6f745c7aee95c611d9777f6d5",
    "text": ") Insure thread operations are independent of each other to avoid a condition. Insure that threads lock resources only when necessary and promptly the lock to avoid starvation by other threads. If a thread must react to the action taken by another thread, do not have original thread react to the action taken by the other thread. Always invoke the method “wait” inside a loop that tests for the condition waited for. Do not assume that the interrupt was for the particular condition that the condition is true. Use the method “Object.notif",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "affaad20049be2d8fac9a7318c1f3fc0",
    "text": "ll” method to notify every thread that the resource has been updated., see Exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "acb339b0e11b051cf6f52cfcc493fa94",
    "text": "Consider deﬁning immutable classes so that the properties of an object change once created. This eliminates the concurrency issues when working with threads. Avoid starting a new thread with an untrusted object of type “Runnable”.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "05247f8d8e9398fb7dafb160af86eaf3",
    "text": "Insure that threads lock resources only when necessary and promptly the lock to avoid starvation by other threads.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "b98c795e69aa3ff8c06195eab574848b",
    "text": "Avoid starting a new thread with an untrusted object of type",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 122
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "8dff4d4e3123df04ad9e2506e1cb0f02",
    "text": ") For more information about threads see, essential/concurrency/threads.html. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "2d31139a0ac80170e87263938a8cb4ea",
    "text": ") High-level concurrency features are located in the package rent”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "6f4b52339704251602d9fbba0f24a27d",
    "text": ") Unlike implicit lock objects in synchronized blocks, the class “Lock” thread to try to get the lock and back out if it cannot. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "e56d473e3bd70eaa12df3511590170d7",
    "text": ") Instead of managing threads directly, speciﬁc implementations of the “Executor” determine when and how the thread is created. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "6f64f8f142bd62f0100660ace17e9ea1",
    "text": ") To process independent tasks according to the scheme “one thread per use the interface “Executo",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "49cd202436250196af72aca2cd1026a5",
    "text": "ervice” to run standard “Runnable” tasks, not return a value, and “Callable” tasks which do return a value. This can manage the status of tasks, submit large quantity of tasks, and shut down tasks within the executor. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "c0289d36c5dd31d1680e430750916aa2",
    "text": ") To schedule a task to run in the future, use the interface to",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "e7e9a3e0375e4c04f574bd1821e17c2f",
    "text": "ervice”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "8063f2e35786d85d3556db7255b77c6c",
    "text": ") Always shutdown an executor service when it is no longer needed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "28c9ab9ac4bcfe3fdcb69277186d20d2",
    "text": ") Consider creating thread pools with a ﬁnite number of threads managed executor. Be sure to size the thread pool properly to optimize the pool overhead with the number of concurrent requests expected to be see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "bedc9dc2ef233c955db3e5e55e1a4e7f",
    "text": "For more information about threads see, https://docs.oracle.com/javase/tutorial/ essential/concurrency/threads.html.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "056d0664443cc3ed14f765625585735b",
    "text": "Instead of managing threads directly, speciﬁc implementations of the interface “Executor” determine when and how the thread is created.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 123
    }
  },
  {
    "element_id": "8dfd81ce24b0c72ef36fc3bb57bad5db",
    "text": "Java Programming Example - Creating Thread Pools and Output Thread pools with a Finite Number of Threads import java.util.Arrays; import java.util.List; import java.util.concurrent.Callable; import java.util.concurrent.ExecutionException; import java.util.con- current.ExecutorService;importjava.util.concurrent.Executors;publicclassExecutorExample{staticpublicvoidmain(String[]args) { Runnable helloTask = () -> { System.out.println(″Hello from a thread.″); }; Callable callbackTask = () -> { return ″Here is your sign.″; }; ExecutorService service = Executors.newFixedThread- Pool(10);List > callbackList = Arrays.asList(callbackTask); try {service.execute(helloTask); String result = service.invokeAny(callbackList); System.out.println(result);} catch (InterruptedException e) { } catch (ExecutionException e) { } service.shutdown } } // Output Hello from a thread. Here is your sign.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 124
    }
  },
  {
    "element_id": "04f5d5d878bad4ce4fcd0b44926f1081",
    "text": "Java Programming Example - Creating Thread Pools and Output",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 124
    }
  },
  {
    "element_id": "63b7359336d33665ab032a192d07a376",
    "text": "Thread pools with a Finite Number of Threads",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 124
    }
  },
  {
    "element_id": "f701981305e39acd8b80d6abe7132bf9",
    "text": "Utilize “Future” instances from the executor when it is necessary to cancel a long running task. Use “Completabl",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 124
    }
  },
  {
    "element_id": "0db0ea4fdf376acfb053f61dcce72e6e",
    "text": "uture” instances when the following conditions are • The task may need to be manually completed • Further action may be needed on a “Future” result without • Need to chain or combine multiple features together • Require exception handling Consider using the fork/join framework instead of an executor service for breaking down a task into recursively smaller tasks and then have the collated. For more information on executors, se",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 124
    }
  },
  {
    "element_id": "bd2c0a767f55c1e86ff7e130cd05b77d",
    "text": "ore information on executors: www.baeldung.com/java-executor-service-tutorial.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 124
    }
  },
  {
    "element_id": "e67a3721bee56cb6e2c400c3b03b7099",
    "text": "For more information on executors, seeMore information on executors: https:// www.baeldung.com/java-executor-service-tutorial.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 124
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 125
    }
  },
  {
    "element_id": "0214fe7345d3039b3e0b28e20dbcfe3e",
    "text": "• Integrate with code best written in C or C++ • Address special circumstances that must be resolved by leaving the Java Virtual Machine When accessing ﬁelds and methods in Java objects, cache any results ﬁnding resource identiﬁers. Get or update only the parts of an array that the native method needs. Get or update as much of the array at one time. Provide all the information the native method needs to execute in method rameters. Minimize the transitions between native code and Java callbacks. This structuring the data, so it exists on the correct side of the boundary. Delete local references when no longer used and not wait until the native method call ends. If many local references are needed (more than",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 125
    }
  },
  {
    "element_id": "fa39ef138c834e0dc550c8458929489b",
    "text": "), notify the JVM to the handling of local references. Only use the “JNIEnv” with the single thread to which it is assigned. Always check for exceptions after making JNI calls that can raise Always check the return value from a JNI method and include code paths handle errors. For each “Ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 125
    }
  },
  {
    "element_id": "c8aaf6a88011b6c65d516430fb87c637",
    "text": "XX” call, always call “Releas",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 125
    }
  },
  {
    "element_id": "f51bb76dbd140c0011fb29e2a72da4ed",
    "text": "XX” when the resource is no longer required. Never make and additional JNI calls or block code running between the “Ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 125
    }
  },
  {
    "element_id": "f38d8947e0c0d1642245b13682420679",
    "text": "XXCrtitical” and “Releas",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 125
    }
  },
  {
    "element_id": "5f62ff88bd9af0ea3d78f4eb010057c9",
    "text": "XXCritical” statements. Always keep track of global references and delete them when the no longer needed. Deﬁne wrappers around native methods by making the native method call private and use a public Java method that calls the native method. For more information see, https://www.ibm.com/developerworks/library/j-jni/ index.html. Exhibit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 125
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 125
    }
  },
  {
    "element_id": "f8880d52898c4f402f79462dfa59df9f",
    "text": "Minimize the transitions between native code and Java callbacks. This includes structuring the data, so it exists on the correct side of the boundary.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 125
    }
  },
  {
    "element_id": "e3ab01f577d58b2fe6f6e42e881359d6",
    "text": "Deﬁne wrappers around native methods by making the native method call private and use a public Java method that calls the native method.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 125
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "dc50805bfbf225fe4f7abc811ea5808e",
    "text": ") Carefully consider how the framework can be extended over time. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "c632c37005d2869022e03d0b5177a2ec",
    "text": ") Always choose the least costly extensibility mechanism that meets the ments. Adding more extensibility later is easier than attempting to take it The sections below are organized from least costly to most costly. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "10c82a2209791fe2bc7adcbb6823c939",
    "text": ") Consider making all new classes unsealed without protected members and make public methods “ﬁnal” to prevent overrides. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "1aa0daecf3724ac89655bf75cf249293",
    "text": ") Consider using protected members for advanced customizing without features to classes outside the package or class hierarchy. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "4934256713981cdde496a0038799292d",
    "text": ") Use the same defensive coding practices on protected members as public members. This includes documentation, security, and compatibility analysis. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "97060e6630d76c6b8f121b4b2b808284",
    "text": ") Throw standard checked exceptions on methods when it makes sense to so. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "0929be9741fb81c79d91a0d56e030f38",
    "text": ") Throw custom checked exceptions when the callers can reasonably to operate if the exception is thrown. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "718c1f3f5bc9348793a3cefa6a80c686",
    "text": ") Avoid throwing runtime exceptions and instead sanitize the input or throw a checked exception. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "2b86e5dbd875d8abc94f67cea074f5e0",
    "text": ") Consider accepting standard lambda expressions as parameters to execute custom code when useful. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "ec6ca7249c52df14d1571ef024dfc045",
    "text": ") Consider by accepting standard lambda expressions or custom functional faces, arbitrary code is being executed, leading to potential security, correctness, and compatibility issues, see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "54f46f5a0e92bcffc4f5f10d6592a5ab",
    "text": "consider how the framework can be extended over time.",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "148da591fcd1363143ece80681f9a77b",
    "text": "Always choose the least costly extensibility mechanism that meets the require- ments. Adding more extensibility later is easier than attempting to take it away. The sections below are organized from least costly to most costly.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "9e4124acd5c347a2e8afda243ad32cf6",
    "text": "Consider using protected members for advanced customizing without exposing features to classes outside the package or class hierarchy.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "e898c254708d6dfae40a47632eb92180",
    "text": "Use the same defensive coding practices on protected members as public members. This includes documentation, security, and compatibility analysis.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 126
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 127
    }
  },
  {
    "element_id": "359c17ced5a46b1ff4f73f158aff3d95",
    "text": "page Java Programming Example - Events and Callbacks Events and Callbacks class NamedEmployee { private LocalDate loginDate = LocalDate.MIN; private String name = ″″; public NamedEmployee() { }public NamedEmployee(String name) { this.name = name; }public String getName() { return name; }public LocalDate getLoginDate() { return loginDate; } public void setLoginDate(LocalDate loginDate) { this.loginDate = loginDate; } }public class PassByFunction { static public void main(String[] args) { Map<String, LocalDate>employeeData = new HashMap<>(); employeeData.put(″Fred″, LocalDate.of(2018, 5, 4)); employeeData.put(″Sally″, LocalDate.of(2018, 10, 16)); Function<Map.Entry<String, LocalDate>, NamedEmployee> convert- Function = (entry) _> { NamedEmployee emp = new NamedEmployee(entry.getKey()); emp.setLoginDate(entry.getValue());returnemp;}; PassByFunction app = new PassByFunction(); app.writeToDatabase(employeeData.entrySet(), convertFunction); } public <T> void writeToDatabase(Collection<T> source, Function<T,NamedEmployee> func) { source.stream().map(func).forEach(this::writeRecord);}privatevoidwriteRecord(NamedEmployeeemp){System.out.printf(″Name=%s,Date=%s\\n″,emp.getName(),emp.getLoginDate());}} // Output Name=Sally,Date=2018-10-16Name=Fred,Date=2018-05-04 Figure 2.5.3-52 (1) Overriding members, like methods, seems natural to object-orientated design by changing the behavior of the base class.",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 127
    }
  },
  {
    "element_id": "91e68d5e17dbb2057a13cfe649062352",
    "text": "Java Programming Example - Events and Callbacks",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 127
    }
  },
  {
    "element_id": "a24ae1b90c58fae392f61949dc021364",
    "text": "An overridden method is costly to design, test, and maintain because of the potential impact on related methods in the base class.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 127
    }
  },
  {
    "element_id": "28b67277f054754cd225b41f160ac5e2",
    "text": "Java Programming Example - Overriding Members (Methods)",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 128
    }
  },
  {
    "element_id": "bf6a2ff32e69adf43a8661bf2eac217a",
    "text": "Using Protected Accessibility over Public Accessibility for Methods Overridden",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 128
    }
  },
  {
    "element_id": "bfd2c6a90b8f289ea8536c822d29dd75",
    "text": "public int getRadius() { return radius; } ﬁnal public void setRadius(int radius) { this.radius = radius;",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 128
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 128
    }
  },
  {
    "element_id": "789073da880899eb0515dcacc9093bcf",
    "text": ") Abstract classes provide a contract with partial implementation details. It is extremely difficult to design an abstraction that provides just the right amount of functionality and no more for subclasses to use. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 128
    }
  },
  {
    "element_id": "5b21e9e7ee8b042122e00c564a4b3af2",
    "text": ") Too many abstractions make the overall framework difficult to understand and use. In addition, poor naming choices can lead to confusion over which classes are abstract and which are not. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 128
    }
  },
  {
    "element_id": "309b87b251d9903b2578cf033dc80b6c",
    "text": ") Abstractions are an essential part of many architectural patterns and extremely important for framework testing. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 128
    }
  },
  {
    "element_id": "f4e44e230f986531026d7c9301785031",
    "text": ") Do not provide abstractions unless they are tested by several concrete imple- mentations and the APIs that consume the abstractions.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 128
    }
  },
  {
    "element_id": "406b7a3f32c9d47a9786d7d7e42fb30e",
    "text": "Do not provide abstractions unless they are tested by several concrete imple- mentations and the APIs that consume the abstractions.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 128
    }
  },
  {
    "element_id": "6b2f7fc00aab0800d426a4dc35f55278",
    "text": "and Source Code Standards",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "ef51e648dfc814b76990088c13114222",
    "text": "page (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "f70edf2b0ef4cb7096b9ac0808807a4d",
    "text": ") Unless the abstract class provides signiﬁcant reusability to subclasses, consider using an interface instead. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "184475e69aa767363f9f9d801d6dcc60",
    "text": ") Provide reference tests for concrete implementations of abstract classes. These tests will enable developers to test that their implementations implement the contract. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "83cd6a0aee75b90f5cc440be85719337",
    "text": ") Base classes are abstract classes that extend from another base class. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "7c108b13ee74c2b1a8f65f6fd514e013",
    "text": ") Base classes add complexity to the framework and increase the depth of for inheritance hierarchy. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "e1956e8103ac8dd55828ad457ebaf544",
    "text": ") Only create base classes that provide signiﬁcant functionality from its base class to developers using the framework and not for other framework nents. For internal framework components, delegate the functionality to an internal implementation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "0eeb56877162ead70568c50a0715d63f",
    "text": ") Make base classes abstract even if they do not contain abstract methods clearly indicate the call must not be used directly. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "e242efa9790a2c8506a3b3cc9fb43cea",
    "text": ") Place base classes in a separate namespace from the mainline scenario types. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "868c3b6cba5a7a1a5fc962cebc4d2e39",
    "text": ") Be aware that secure subclasses may become unsecure by adding new tionality to base classes, or default interface methods. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "ae60af704edbcaaaaabb0b04e8d2f510",
    "text": ") Consider making a class ﬁnal to prevent malicious subclassing or for the following reasons: • The class contains only static methods and cannot be instantiated. • The class stored security-sensitive secrets in inherited protected members. • The class contains many overridable members, and the cost of them individually is an expensive operation. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "6c752a3fcbee605ecf5479da3d4c9b44",
    "text": ") Do not declare protected or overridable members in sealed classes since additional extension classes can exist. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "abaac3ceb67d78e9420e13d156d251bd",
    "text": ") Consider sealing overridden members. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "04973b7e7d4a6029a5e5f6d97307e6d9",
    "text": ") The following guidance is for the standard edition (Java SE). (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "8cb60bb0f398cff77cd36512ecac70d3",
    "text": ") For more information on secure coding see,: https://www.oracle.com/ technetwork/java/seccodeguide-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "f6336223518a13785052a1f62d8d2ad3",
    "text": "html and https://wiki.sei.cmu.edu/ conﬂuence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "907af9f3cba7ba86b1b6b83e3d73c9b7",
    "text": ") Design and write code that does not require clever logic to see it is safe. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "7dc46e4555a189bdaa11a3aa4fd2e4f0",
    "text": ") Insure that only vetted classes are used in the framework design. Using a subclass from an unknown source may contain malicious code that adds izers or overrides random methods. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "14092bf82fbae82adf579a7f67af70f7",
    "text": ") Inspect any method or class that utilizes the class “Securit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "b2e8a36b79053f8188142758df66f40c",
    "text": "anager”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "3d1011453a2f0e1442164ddde6a1f3de",
    "text": ") Refactor any duplicated code or data so that changes are uniformly and modiﬁed throughout the application. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "6726c0a6ddbc7e77d189e9318f57a047",
    "text": ") Internal Revenue Manual",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "6e98ac26d136084f4cb983634e81197a",
    "text": "Base classes are abstract classes that extend from another base class.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "f6ce17a783266ee2a01672cfc45068da",
    "text": "Be aware that secure subclasses may become unsecure by adding new func- tionality to base classes, or default interface methods.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "ed84c1d0c8ef4ebe6d660c511faa0f94",
    "text": "The class contains only static methods and cannot be instantiated. The class stored security",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "c3c6510d740a5d294a494a79beffea75",
    "text": "sensitive secrets in inherited protected members. The class contains many overridable members, and the cost of them individually is an expensive operation.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 129
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "c3193125df849e168f47b9374f671c02",
    "text": ") Restrict privileges of the Java Virtual Machine by assigning policy ﬁles that restrict permissions. Avoid running applications with all permissions. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "5f806878dcf66f697ab750ae88b3d27c",
    "text": ") Sanitize and validate all data crossing a trust boundary. For example, data contained in a web request must be validated before business logic is Permanent storage, like a database, must validate that the business layer is correct before updating the storage facility. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "0079e2f7c9c6adb4b7985509c67378bc",
    "text": ") Minimize the number of security checks to “Securit",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "f2023213c38e2847358f5061fbec25f2",
    "text": "anager” by getting a of permissions only at key points and using that information when needed. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "5c3b72ab8e40adc39694ffc35f982a6d",
    "text": ") Classes, packages, and modules should only contain a coherent set of behaviors and nothing more. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "d490a446211a0772bda7f239773f98ff",
    "text": ") Test all code by performing: peer reviews, unit testing, and regression This will ensure all application defects, design, and security ﬂaws are (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "cfb7b6fdfb2d68ba5b07942ef6837e3d",
    "text": ") Be cautious of the following: • Large vector images such as SVG and font ﬁles • Creating object graphs from a text or binary streams • Highly compressed ZIP ﬁles • XML ﬁles that dynamically grow on entity expansion • Inserting large numbers of keys in a map with the same hashcode • Regular expressions that may have catastrophic backtracking • XPath expressions that consume arbitrary amounts of processor time • Deserializing malicious data • Integer overﬂow errors • Detailed log entries that produce excessive output • Parsing corner case data that results in inﬁnite loops (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "0da8e760a5c4ecf25741bb8bba086312",
    "text": ") Always release resources when they are no longer needed. Consider using “execute around method” and “try with resource” idioms for handling Use the standard resource and acquisition and release pattern for that cannot use either idiom,see Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "681f1795be33774581841fc7803e279b",
    "text": "Java Programming Example - Releasing Resources Using “Try with Resource” public R locked(Action action) { lock.lock();try{returnaction.run();ﬁnally{lock.unlock();}} Figure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "20c66bf61edfcd31f0b81a6cc1fb7122",
    "text": ") If outputting data to a stream, always ﬂush the buffer before closing the stream. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "0c9a8dbe984167fea9e6ffc311ca6309",
    "text": ") Insure that accessing a resource cannot indeﬁnitely block or uses untrusted",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "8066b689dafae22febdb625adb6376c9",
    "text": "Restrict privileges of the Java Virtual Machine by assigning policy ﬁles that restrict permissions. Avoid running applications with all permissions.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "6d85286828f31f0e0aa15cca56e406d2",
    "text": "Minimize the number of security checks to “SecurityManager” by getting a set of permissions only at key points and using that information when needed.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "783e5100ecef25f5191ee6373071802a",
    "text": "Test all code by performing: peer reviews, unit testing, and regression testing. This will ensure all application defects, design, and security ﬂaws are mitigated",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "0e80ce133e59e9f251f6955cf8762b65",
    "text": "Large vector images such as SVG and font ﬁles Creating object graphs from a text or binary streams Highly compressed ZIP ﬁles XML ﬁles that dynamically grow on entity expansion Inserting large numbers of keys in a map with the same Regular expressions that may have catastrophic backtracking XPath expressions that consume arbitrary amounts of processor Deserializing malicious data Integer overﬂow errors Detailed log entries that produce excessive output Parsing corner case data that results in inﬁnite loops",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "569b14b1107b2770cdf1176cea650c92",
    "text": "Java Programming Example - Releasing Resources",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "294bafd3144be58b697991f91fbb3adc",
    "text": "Using “Try with Resource” public R locked(Action action) { lock.lock();try{returnaction.run();ﬁnally{lock.unlock();}}",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "a00413725b8d2c206fefdaa2386e9679",
    "text": "If outputting data to a stream, always ﬂush the buffer before closing the stream.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 130
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "93c0e9038d15b0f2d93caac5c29a08b5",
    "text": "Consider using the methods in the class “java.util.Math” for arithmetic tions if there is a possibility for integer overﬂow errors. Do not log sensitive information, such as social security numbers or passwords. This includes working with low-level libraries that utilize text. Consider using only one-way hashes for password checks and object content directly rather than waiting for the garbage collector to of the object. Validate return values from called methods before using them. Do not expose collections that can be modiﬁed outside of the class providing either a copy or making the collection unmodiﬁable. Validate all arguments passed to public, protected, or explicitly members. If an argument is not valid, throw an appropriate runtime https://docs.oracle.com/javase/",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "303b30264730100b84d16d0dd29455b5",
    "text": "/docs/api/java/lang/Runtim",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "f944fdd2c832be0885ac6a5db2e2fcb1",
    "text": "xception.htmlsuchas“Inde",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "0bfe935e70c321c7ca3afc75ce0d0ca2",
    "text": "u",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "4291f16daaca5f42c42e7a9e06e465df",
    "text": "ound",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "4b5400dd3e6fceaf8a4ad4d58c4df324",
    "text": "xception”or“Illega",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "abb2431e398fffdb30b9ab71fb3d43a8",
    "text": "rgumen",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "3a1c9cbf05ade782f74be38b0b8589da",
    "text": "xception”. Be aware that mutable object content may change while using the object. is especially true in multi-threaded situations, but even in normal the object properties may change during the lifecycle of a method. Always validate input from untrusted sources. This includes method and external streams. Always make a defensive copy of reference values before performing ing input. Consider making copies of internal reference properties prior to sending to external methods. Normalize string values and do not form strings with partial characters Canonicalize path names and use a safe subset of ASCII characters validating them. Safely extract ﬁles from a compressed source. Exclude unsanitized user input from format strings. Sanitize untrusted data passed to the method “Runtime.exec()” and regular expressions If dealing with locale-dependent data, specify an appropriate locate during comparison. Use compatible character encoding on both sides of ﬁle or network input/ output. When working with web forms, never trust the content of hidden ﬁelds. If a method accepts a collection, validate both the collection and elements within the collection are not “null”.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "521bb99c6cb7c2aabbfa8c7feb20ed0c",
    "text": "Consider using the methods in the class “java.util.Math” for arithmetic calcula- tions if there is a possibility for integer overﬂow errors.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "aa5a851cf7355f3b0c12924ad396af17",
    "text": "Do not expose collections that can be modiﬁed outside of the class without ﬁrst providing either a copy or making the collection unmodiﬁable.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 131
    }
  },
  {
    "element_id": "91533e204e6035df25b1425a3034fa02",
    "text": "Systems (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "5a6f5b79ab0724a8592b13712d9c1ad7",
    "text": ") Parse data that requires a certain input and perform only limited correction such as converting quotation marks to an acceptable pattern. In all other Inclusion cases, reject the data if it does not meet the input requirements before (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "a205b94ea0be952a5e50342e7211ad91",
    "text": ") Use well-tested libraries instead of ad-hoc code. Use the standard library creating XML or JSON ﬁles instead of raw text. Create classes that only handle formatting of unusual formats. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "1ec9f5f86f2af5ece36134e5a036716f",
    "text": ") Avoid dynamic SQL statements. When accessing a database using JDBC, always use “java.sql.Prepare",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "25c92487eeb90246aceaee82311e649b",
    "text": "tatement” and “java.sql.Callabl",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "18eb63cdbe6a9bd2eb72ec365ced5bcf",
    "text": "tatement”. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "d0ac0e2d7422f4b487c9fbed691ba54b",
    "text": ") Consider using a well-tested library to output HTML and XML to clients untrusted data sources such as input from an HTML form. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "6953749c9071238b4bed058d66677e97",
    "text": ") Avoid entering or expecting untrusted data on the command line. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "9366779d0e276ae759754fb8f6985690",
    "text": ") Restrict XML inclusion by preventing local or intranet ﬁles from being added an XML ﬁle. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "0eec1db9ec734a7c7bef8d06d86abbd4",
    "text": ") Take care when processing BMP ﬁles by restricting privileges to read ﬁle references. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "75af97e978b38877bf3f86f3c4f652e0",
    "text": ") Disable HTML functionality in Swing components. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "fad59c39db344660cf563b2d1f929e27",
    "text": ") Take care interpreting untrusted code. Some examples include: • Interaction between browser Jav",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "1eda50c205440884eccb321caf4c571f",
    "text": "cript and native code • XSLT interpreter runs with extensions to call Java code • Long Term Persistence of Jav",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "f0edcc7688ec6d7cd35ca26f0daab196",
    "text": "eans components supports Java statements • Playing sounds • Remote Method Invocation may allow loading of remote cade by the remote connection. • LDAP allows loading of remote code in a server response. • SQL implementations allow execution of code with effects outside of database (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "dd3c583f704d90383de07924c8fd5f39",
    "text": ") Prevent injection of exceptional ﬂoating-point values. Use the and “Double.i",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "bfa462538ee28bdb80d522291f18f4fb",
    "text": "nﬁnite” methods to check if a number is valid. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "1c4ee1b96aef3b6206a1ab0379dad830",
    "text": ") Isolate unrelated code by keeping code from different origins separated. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "a3a726bcd21a4c60bb3e95267b03d6f7",
    "text": ") Limit the exposure of Clas",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "0951ce6c0ff9ef8bf85a0467759ff25d",
    "text": "oader instances. and (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "e193affbbea0e4d02073ae36144b8854",
    "text": ") Purge sensitive information from exceptions. For example, if a method calls java.io.Fil",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "ba339dfb9979a960a331183383ebe3e3",
    "text": "npu",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "2d2e07a69c70d512e6469a71cd94111d",
    "text": "tream constructor to read an underling conﬁguration ﬁle that ﬁle is not present, a java.io.Fil",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "65c74c15a686187bb6bbf9958f494fc6",
    "text": "o",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "8a03c5dfcfdb593dfb13fbe9087549a2",
    "text": "oun",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "47227ea45c8158e9ca88b6f62296f601",
    "text": "xception containing the ﬁle is thrown.for more information see, seccodeguide-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "76df689a3f8ff3d4baea9cdc1a233f07",
    "text": "html (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "24484e51ecbdd9bcc03464fe5757f380",
    "text": ") Avoid deserializing untrusted data. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "25c58fd2d6cc095d737cdba59d381187",
    "text": ") Avoid serializing security sensitive classes. and (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "28b95f424fffc8fc8bf2c7614d29aad2",
    "text": ") Do not include sensitive data during serialization. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "cec32272775678ee007f80ab0cafce7e",
    "text": ") Follow the same guidance for object constructors when deserializing data. Internal Revenue Manual Cat. No.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "fcb5f40df9be6bae66c1d77a6c159688",
    "text": "W",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "0e3ec2bead8746d0fb997a6337528aca",
    "text": "Avoid dynamic SQL statements. When accessing a database using JDBC, always use “java.sql.PreparedStatement” and “java.sql.CallableStatement”.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "21ad45ac85d247a12bd5ed223058bd6c",
    "text": "Prevent injection of exceptional ﬂoating-point values. Use the “Double.isNan” and “Double.isInﬁnite” methods to check if a number is valid.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "24484e51ecbdd9bcc03464fe5757f380",
    "text": ") Avoid deserializing untrusted data. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "f4374f676cb0e6558937c6c40977bd50",
    "text": ") Avoid serializing security sensitive classes. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "28b95f424fffc8fc8bf2c7614d29aad2",
    "text": ") Do not include sensitive data during serialization. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "4716aab9dee95f85339e8bbb9c785a0d",
    "text": ") Follow the same guidance for object constructors",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 132
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "187e9639847ab4fd4c93d0b1b0787a98",
    "text": ") Duplicate the security manager checks enforced during serialization and rialization. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "a51c53462706998f607ab88200406f9c",
    "text": ") Consider applying security manager limitations if serializing and deserializing classes. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "71d0c3902804843790bff17eb36c1a30",
    "text": ") This section covers utilizing the security manager feature, pertaining to the below. • Understand how permissions are checked. • Properly transfer context when using callback methods used in sensitive classes. • Understand how to safely invoke and restrict privileges in the method “d",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "44110a6b2d545b64c7f8714208bc8945",
    "text": "rivileged”. • Do not cache the result of privileged operations. • Consider carefully the security ramiﬁcations of using reﬂection on untrusted objects. • Methods that perform a security check must be declared “private” or “ﬁnal”.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "cabd864ae1bbfc86407abbf6c25c933b",
    "text": "Consider applying security manager limitations if serializing and deserializing",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "814df9803008a5ebccf75f8dd38c08f8",
    "text": "Understand how permissions are checked. Properly transfer context when using callback methods used in sensitive classes. Understand how to safely invoke and restrict privileges in the method “d",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "044a8f95a09b574e5cb76f703179de55",
    "text": "rivileged”. Do not cache the result of privileged operations. Consider carefully the security ramiﬁcations of using reﬂection on untrusted objects. Methods that perform a security check must be declared “private” or “ﬁnal”.",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "11508bafcff5946a1134e7c371184a2e",
    "text": ") Only use JNI when necessary. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "56a0c91772f21a3fd9536e6629182e6a",
    "text": ") Be aware of the C/C++ threat model. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "dc508e974de2ed46b8a82474f8289e85",
    "text": ") Expect that JNI code can violate visibility and isolation rules. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "179a2f532bc98321746a548c53f7211c",
    "text": ") Secure the JNI implementation from the Java side. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "62fcb957c3ade54c12b0b854a97ce636",
    "text": ") Properly test JNI code for concurrent access. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "3bdd8ba9fca576d6977488b816480b25",
    "text": ") Secure library loading. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "87b16de16fd7ea9fd3a84b290fb0496e",
    "text": ") Perform input validation at the language boundary. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "642c675476dfd8b6c723ec71045affc9",
    "text": ") Expect and handle exceptions when calling JNI into Java. (",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "cc890acba154c1045bfcaf629612b807",
    "text": ") Follow secure development practices for the native target Ensure any bundled JVMs and JREs meet Java’s secure",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "b0b56c21c2ced90bbf16be7da30826be",
    "text": "(07-10-2020) Defensive Use of the Java Native Interface (JNI)",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 133
    }
  },
  {
    "element_id": "33c1e29902d678cbcff13d561dbfd825",
    "text": "This Page Intentionally Left Blank",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 134
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "1bae48fcfbccc01a9fda79558c6e3cc9",
    "text": "Example of Wrapping Lines comma break computeResult(String parameter1, String parameter2, parameter3, String parameter4) InvalidOperationException, NumberFormatException, { } operator break specialCharacteristic = longOperand1 + longOperand2 + longOperand4; leveled break accountName = accountPreﬁx + “ “ getFullName(accountFirstName, accountLastName) “ “ + accountSuffix; numericResult = longName1 + longName2 (longName3 – longName4 + longName5) longName6; indent four space rule aVeryLongMethodNameThatIsHardToCompress(String parameter1, parameter2) IOException {",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "e4f5cf22fa17297c141edf283d919508",
    "text": "/ comma break void comput",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "237dd9d554f7c2f3ccc43d97ff599934",
    "text": "esult(String parameter",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "3f886f1a731113d591ddbeda2a5d071e",
    "text": ", String parameter",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "3f886f1a731113d591ddbeda2a5d071e",
    "text": ", String parameter",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "3f886f1a731113d591ddbeda2a5d071e",
    "text": ", String parameter",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "4c1de3faf8c3ae4d078a9093e8c3d15f",
    "text": ") throws Invali",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "33bc31e61417bfc94184ccbbbd6c8670",
    "text": "peratio",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "121d8a8d7a70d66c3e3b18b2063b26e0",
    "text": "xception, Numbe",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "b9f59456ce5c36f26d4410b1859e078c",
    "text": "orma",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "af89f4cfe08daa1e0d3b395a0bae083d",
    "text": "xception, Illega",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "abb2431e398fffdb30b9ab71fb3d43a8",
    "text": "rgumen",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "b3a6944d78b4de06abbb3a6bdcc6c09c",
    "text": "xception { } // operator break int specia",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "38178d499b18f14f3c6c792a04082283",
    "text": "haracteristic = lon",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "a8558bdf0be4c9d5717e6cc36ffc1c50",
    "text": "perand",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "8af41dce1a33e4d93551c424bbe1781f",
    "text": "+ lon",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "a8558bdf0be4c9d5717e6cc36ffc1c50",
    "text": "perand",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "33975037706d6b6cde528f56aba33c40",
    "text": "lon",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "a8558bdf0be4c9d5717e6cc36ffc1c50",
    "text": "perand",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "8af41dce1a33e4d93551c424bbe1781f",
    "text": "+ lon",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "a8558bdf0be4c9d5717e6cc36ffc1c50",
    "text": "perand",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "d4cac4e3648270447bd0d1ae7c4224f3",
    "text": "; // leveled break String accoun",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "de5cba761c126792b100e496e3fd587c",
    "text": "ame = accoun",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "eead233f232e7b42a929c4518d16931d",
    "text": "reﬁx + “ “ + ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "51db253425817abff5f9d6cb749a42d8",
    "text": "ul",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "5564f173efc7c5d147eb8023007fed99",
    "text": "ame(accoun",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "384c0b6dc96e6cefe4c53959267583d2",
    "text": "irs",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "9d91bd61f46f809f43db3f99de1afc4c",
    "text": "ame, accoun",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "f4bf9f7fcbedaba0392f108c59d8f4a3",
    "text": "as",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "3cf8ffab959885de067b58903d0c1e6d",
    "text": "ame) + “ “ + accoun",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "08a1e970ae44107cb3de7fc16fd767fe",
    "text": "uffix; int numeri",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "327dce98bfc7e37c9deba8f6aa8c6224",
    "text": "esult = lon",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "f42130b3f114a7a8c1c8c2f2bbf984d2",
    "text": "ame",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "8af41dce1a33e4d93551c424bbe1781f",
    "text": "+ lon",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "f42130b3f114a7a8c1c8c2f2bbf984d2",
    "text": "ame",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "e6b665dfab0864fceb9f9da7aa03110d",
    "text": "* (lon",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "f42130b3f114a7a8c1c8c2f2bbf984d2",
    "text": "ame",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "8e0f1a25adfef0700a9edc1a035b5724",
    "text": "– lon",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "f42130b3f114a7a8c1c8c2f2bbf984d2",
    "text": "ame",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "8af41dce1a33e4d93551c424bbe1781f",
    "text": "+ lon",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "f42130b3f114a7a8c1c8c2f2bbf984d2",
    "text": "ame",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "2a81b76a02674856d413d99d0f924ef9",
    "text": ") / lon",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "f42130b3f114a7a8c1c8c2f2bbf984d2",
    "text": "ame",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "6451044ebe0c397ce9601fe734cd2add",
    "text": "; // indent four space rule void",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "cc7e4412564ba8a761bd32ab4cc6086b",
    "text": "er",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "b8d31e852725afb1e26d53bab6095b2b",
    "text": "on",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "22fb0e34ec28ee3cab266418e131295f",
    "text": "etho",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "ab6db599234d2636659cba1aa191bd01",
    "text": "am",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "8693873cd8f8a2d9c7c596477180f851",
    "text": "ha",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "ab5b62081b1d305e78d0daadb2cd2347",
    "text": "ar",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "ad3535aec4f5121333d095bfcbf7819c",
    "text": "ompress(String String parameter",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "3ef811994f59940bc12200fa1065756f",
    "text": ") throws IOException {",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 135
    }
  },
  {
    "element_id": "4e72831a210c22e7dcdb8d2bbaa4247b",
    "text": "Exhibit 2.5.3-2 (07-10-2020) Java Programming Example of Objects",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "0da316330a75a108c6017b448fa6ef1e",
    "text": "of public class ObjectTest and class Point class ObjectTest { static void main(String[] args) { p1 = new Point(4, 6); p2 = new Point(7, 9); p3 = p2; System.out.println(″Before change:″); 1 = (%d,%d)″, p1.getX(), p1.getY()); 2 = (%d,%d)″, p2.getX(), p2.getY()); 3 = (%d,%d)″, p3.getX(), p3.getY()); change:″); 1 = (%d,%d)″, p1.getX(), p1.getY()); 2 = (%d,%d)″, p2.getX(), p2.getY()); 3 = (%d,%d)″, p3.getX(), p3.getY()); Point { int x; int y; Point(int x, int y) { = x; = y; int getX() { return x; } void setX(int x) { this.x = x; } int getY() { return y; } void setY(int y) { this.y = y; }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "1273b8b9f93daeec75781f815f181a3b",
    "text": "Comparison of public class ObjectTest and class Point",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "13177dc075f6e4f57ad6b1aec53a985e",
    "text": "public class Objec",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "c0b2b760055dfcffcac36e1894a46e67",
    "text": "est { public static void main(String[] args) { Point p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "a22509c64dd3966ebeb039e3a87d3de6",
    "text": "= new Point(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "55f406b71c16fa4950aeb972925a0121",
    "text": "); Point p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "a22509c64dd3966ebeb039e3a87d3de6",
    "text": "= new Point(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "d03502c43d74a30b936740a9517dc4ea",
    "text": ",",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "55f406b71c16fa4950aeb972925a0121",
    "text": "); Point p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "5a3a020e17abbdb25a1e7d000ee5a3c4",
    "text": "= p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "a401cc1d165f143267cc2e1f117f787c",
    "text": "; System.out.println(″Before change:″); System.out.printf(″Point",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "9a91b5f3f156c54b1fd21ad195b13cf9",
    "text": "= (%d,%d)″, p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "fff96977df98bb4622260ca437a21920",
    "text": "(), p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "7927b4ab3d9880dda8171d66137f15ba",
    "text": "()); System.out.printf(″Point",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "9a91b5f3f156c54b1fd21ad195b13cf9",
    "text": "= (%d,%d)″, p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "fff96977df98bb4622260ca437a21920",
    "text": "(), p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "7927b4ab3d9880dda8171d66137f15ba",
    "text": "()); System.out.printf(″Point",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "9a91b5f3f156c54b1fd21ad195b13cf9",
    "text": "= (%d,%d)″, p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "fff96977df98bb4622260ca437a21920",
    "text": "(), p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "46758494edadcff268f3b1a5759e989e",
    "text": "()); p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "ad9a67fefa847de87753df6794a0ae46",
    "text": "se",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "55ec89d9e3aa7678b912ac8e3ee81d86",
    "text": ");p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "ad9a67fefa847de87753df6794a0ae46",
    "text": "se",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "32ebb1abcc1c601ceb9c4e3c4faba0ca",
    "text": "(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "6c39d80580c4a2a535d19b2d7a602b8b",
    "text": ");System.out.println(″After change:″); System.out.printf(″Point",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "9a91b5f3f156c54b1fd21ad195b13cf9",
    "text": "= (%d,%d)″, p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "fff96977df98bb4622260ca437a21920",
    "text": "(), p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "7927b4ab3d9880dda8171d66137f15ba",
    "text": "()); System.out.printf(″Point",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "9a91b5f3f156c54b1fd21ad195b13cf9",
    "text": "= (%d,%d)″, p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "fff96977df98bb4622260ca437a21920",
    "text": "(), p",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "1f99daa8d2ab5041ba6a48c354604e7d",
    "text": "());",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 136
    }
  },
  {
    "element_id": "3e9342ecc25258df397564ee5b34695e",
    "text": "Before change: After change: Point 1 = (4,6) Point 1 = (4,6) Point 2 = (7,9) Point 2 = (10, 20) Point 3 = (7,9) Point 3 = (10, 20)",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 137
    }
  },
  {
    "element_id": "9a0d7910bd836d522d02d5c67ec17285",
    "text": "Exhibit 2.5.3-4 (07-10-2020) Java Programming Example of “instanceof”",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 138
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "09ed3786f999915d9fe3545ee0b951ce",
    "text": "Java Programming Subclass Example",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "015185c0fba3b4b38075bf5c586c01e0",
    "text": "Java Programming Subclass class Animal {private String name; public String ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "edf8c14169573db60f5e0879221264e7",
    "text": "ame() { return name; } public void se",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "ba19fbf0de589dd87bfede62cd3e8623",
    "text": "ame(String name) { this.name = name; } } class Fou",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "0f9b5c425cf688d4e7328df218cf4974",
    "text": "egge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "63866cf6f177690ef9e37f513baea6f3",
    "text": "nimal extends Animal { public int ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "5373e8999854d131eb5dc70bb42d8cdb",
    "text": "egs() { return",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "eaada8e19e94f95c15dfb2952d6bd15f",
    "text": "; } } class Dog extends Fou",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "0f9b5c425cf688d4e7328df218cf4974",
    "text": "egge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "463dcb9a9076653c2c32d02be81b32b6",
    "text": "nimal { @Override public String ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "5e68a96f9f204d91b3fc46ce1441955f",
    "text": "ame() { return ″Shaggy ″ + super.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "e108952fda1b19721279940b3a545901",
    "text": "ame(); }}",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 139
    }
  },
  {
    "element_id": "9b377340203ce16ebb29599d827d7d85",
    "text": "Exhibit 2.5.3-6 (07-10-2020) Java Programming Example - Enumeration Type",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "44036a3c627cebb97654fe1168f216f6",
    "text": "Enumeration Type Example enum Month { JANUARY(31), FEBRUARY(28), MARCH(31), APRIL(30), MAY(31), JUNE(30), JULY(31), AUGUST(31), SEPTEMBER(30), OCTOBER(31), NOVEMBER(30), DECEMBER(31); private int days = 0; private Month(int days) { this.days = days; } public int getDays(int year) { if (days == 28) { if (year % 4 == 0 && year % 100 > 0) { return 29; } else if (year % 100 == 0 && year % 400 > 0) { return 28; } else if (year % 400 == 0) { return 29; }else {return 28; } } else {return days; } } } public class EnumTest { static public void main(String[] args) { System.out.printf(″Days in January 2020: %d″, Month.JANUARY.getDays(2020)); System.out.printf(″Days in April 2020: %d″, Month.APRIL.getDays(2020)); System.out.printf(″Days in February 1900: %d″, Month.FEBRUARY.getDays(1900)); System.out.printf(″Days in February 2000: %d″, Month.FEBRUARY.getDays(2000)); System.out.printf(″Days in February 2019: %d″, Month.FEBRUARY.getDays(2019)); System.out.printf(″Days in February 2020: %d″, Month.FEBRUARY.getDays(2020)); } } // Output Days in January 2020: 31 Days in April 2020: 30 Days in February 1900: 28 Days in February 2000: 29 Days in February 2019: 28 Days in February 2020: 29",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "ecddfb40064e4e26d6f658a58d085671",
    "text": "static public void main(String[] args) { System.out.printf(″Days in January",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "07c8d7589203bfad22befbf3026b69bc",
    "text": ": %d″, Month.JANUARY.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "24f0e987c56f1d3487097c3d601fa718",
    "text": "ays(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "5c6d18ed446676c6f59965becdb454e7",
    "text": ")); System.out.printf(″Days in April",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "b2d2f4b21af6c3f83468befcfc4c4b8e",
    "text": ": %d″, Month.APRIL.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "24f0e987c56f1d3487097c3d601fa718",
    "text": "ays(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "d0b7668fa628ecc1e2a0e8577078a712",
    "text": ")); System.out.printf(″Days in February",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "ec000cf324638770b568126e3525e8dd",
    "text": ": %d″, Month.FEBRUARY.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "24f0e987c56f1d3487097c3d601fa718",
    "text": "ays(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "d0b7668fa628ecc1e2a0e8577078a712",
    "text": ")); System.out.printf(″Days in February",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "ec000cf324638770b568126e3525e8dd",
    "text": ": %d″, Month.FEBRUARY.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "24f0e987c56f1d3487097c3d601fa718",
    "text": "ays(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "d0b7668fa628ecc1e2a0e8577078a712",
    "text": ")); System.out.printf(″Days in February",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "ec000cf324638770b568126e3525e8dd",
    "text": ": %d″, Month.FEBRUARY.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "24f0e987c56f1d3487097c3d601fa718",
    "text": "ays(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "d0b7668fa628ecc1e2a0e8577078a712",
    "text": ")); System.out.printf(″Days in February",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "ec000cf324638770b568126e3525e8dd",
    "text": ": %d″, Month.FEBRUARY.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "24f0e987c56f1d3487097c3d601fa718",
    "text": "ays(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "0c049cf1444bfb9b41131eea0a974d8e",
    "text": "));",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "57fac8660dfe847323ee76798a97964b",
    "text": "Days in April 2020: 30 Days in February 1900: 28 Days in February 2000: 29 Days in February 2019: 28 Days in February 2020: 29",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 140
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 141
    }
  },
  {
    "element_id": "b9f03302a97d4e114f1d239fc9dcab25",
    "text": "Exhibit 2.5.3-7 (07-10-2020) Java Programming Example - Nested Classes",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 141
    }
  },
  {
    "element_id": "2de07bf75e72845d6398d2a654ea0998",
    "text": "Java Programming Example of Nested Classes import java.util.Optional; interface Greeting { public String getMessage(String name); } interface Greeting { public String getMessage(String name); } public class AnonymousClassExample { static public void main(String[] args) { Greeting englishGreeting = new Greeting() { public String getMessage(String name) { Optional nameOptional = Optional.ofNullable(name); return ″Hello ″ + nameOptional.orElse(″Anonymous″); }}; System.out.println(englishGreeting.getMessage(″Bob″)); System.out.println(englishGreeting.getMessage(null));} } // Output Hello Bob Hello Anonymous",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 141
    }
  },
  {
    "element_id": "6e64b75caf403c260365fb3145b60aa8",
    "text": "Java Programming Example of Nested Classes",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 141
    }
  },
  {
    "element_id": "f28fb9de792ff2a96d5b13ef6ea258a4",
    "text": "Exhibit 2.5.3-8 (07-10-2020) Java Programming Class Switch Example",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 142
    }
  },
  {
    "element_id": "aaec2ff4f304b7f5cdbe08d3d6b01c6b",
    "text": "Java Programming Class Switch enum Quarter { Q1, Q2, Q3, Q4; static public Quarter getQuarter(int index) { if (index == 1) { return Q1; }else if (index == 2) { return Q2; }else if (index == 3) { return Q3; }else{return Q4; }}} public class SwitchExample {static public void main(String[] args) { Quarter q1 = Quarter.valueOf(″Q1″); Quarter q4 = Quarter.getQuarter(4); displayRequirements(q1);displayRequirements(q4);} static private void displayRequirements(Quarter currentQuarter) { boolean taxesDue = false; boolean runAudit = true; switch (currentQuarter) { case Q2: runAudit = false; break;caseQ1:runAudit= false; /* falls through */ case Q3: taxesDue = true; break;caseQ4:break;}System.out.printf(″%s: taxesDue=%s, runAudit=%s″, currentQuarter.toString(), taxesDue, runAudit);",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 142
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 143
    }
  },
  {
    "element_id": "197b50c4e6c6720f4d0854e09166e1b3",
    "text": "Exhibit 2.5.3-8 (Cont. 1) (07-10-2020) Java Programming Class Switch Example",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 143
    }
  },
  {
    "element_id": "7c56948c3103a2475f4a7bc1507702c7",
    "text": "Java Programming Class Switch // OutputQ1: taxesDue=true,runAudit=falseQ4:taxesDue=false,runAudit=true",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 143
    }
  },
  {
    "element_id": "8873253668a6e4e163d21019a2852c3c",
    "text": "Exhibit 2.5.3-9 (07-10-2020) Java Programming Design Example",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "ffb6a5d32678c573074685ccedfb3867",
    "text": "import java.time.Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "12e37d0892631e2830844acfe961093a",
    "text": "ime ; public class Desig",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "08a9a8fdb1db0e80323e933e809f3369",
    "text": "xample { private static Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "4147dfc2f9a6feb1f386e5357b18ad64",
    "text": "ime private Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "07506d03c6f9284bab4dd61430e0f709",
    "text": "ime instanc",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "9253a3b9ebf86673b22829a97f4cbc64",
    "text": "ate; // This is the type constructor static { ﬁrs",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "44aec6e382dbca9cb007808e063a6e8f",
    "text": "ate = Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "0b3d63c43ee16680271b5e08483607cf",
    "text": "ime.now();",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "853a24dfa4d7e514d0d46c235dcde3fa",
    "text": "public LocalDateTime getFirstDate() { return ﬁrstDate;",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "afeeb461376519b3ac4e195475390001",
    "text": "public void main(String[] args) { DesignExample ex1 = new DesignExample(); System.out.printf(″Example 1: First=[%s],Instance[%s]″, ex1.getInstanceDate());//Putinanexecutionpause so a date difference can be detected. try {",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "346f72551ebece0d03ab089af08e45e5",
    "text": "ex2 = new DesignExample(); System.out.printf(″Example 2: First=[%s],Instance[%s]″,",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "35435405f16a69a1b1d2c25fb95478a4",
    "text": "{ return instanceDate;",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "13ac8be4a7e57cff730e4e84c7e62a30",
    "text": "1: 2:",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 144
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "e655d6b769c8343a8a8b0d02946846a7",
    "text": "public class Desig",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "08a9a8fdb1db0e80323e933e809f3369",
    "text": "xample { private static Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "4147dfc2f9a6feb1f386e5357b18ad64",
    "text": "ime private Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "07506d03c6f9284bab4dd61430e0f709",
    "text": "ime instanc",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "9253a3b9ebf86673b22829a97f4cbc64",
    "text": "ate; // This is the type constructor static { ﬁrs",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "44aec6e382dbca9cb007808e063a6e8f",
    "text": "ate = Loca",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "b1d6b91b67c2afa5e322988d9462638d",
    "text": "at",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "0b3d63c43ee16680271b5e08483607cf",
    "text": "ime.now();",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "853a24dfa4d7e514d0d46c235dcde3fa",
    "text": "public LocalDateTime getFirstDate() { return ﬁrstDate;",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "bd83d3e1676f9402654e222fc630c9d0",
    "text": "Desig",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "728e04fe6a7ff4fe76a81ac80ecfa425",
    "text": "xample ex",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "96e465691327b5f19e414e42c6dc882e",
    "text": "= new Desig",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "8c7c071d619f67a33d52485ae0392f58",
    "text": "xample(); System.out.printf(″Example",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "a8b888a6de0fdebdc1e92d813e73d7a8",
    "text": ": First=[%s],Instance[%s]″, Desig",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "14443fce28cba1567b178992ee15804c",
    "text": "xample.ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "384c0b6dc96e6cefe4c53959267583d2",
    "text": "irs",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "f402d435825cb9a372bd844ca5329e71",
    "text": "ate(), ex",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "309d20864f274b097f64106ec08fde76",
    "text": "ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "b00b0e06241bfc4ca2b411a6d3672654",
    "text": "nstanc",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "c85cb4419016edb73e983fc3d2511bec",
    "text": "ate());//Putinanexecutionpause so a date difference can be detected . try { Thread.sleep(",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "0913bb6cc38a86eee62d1948fd85f308",
    "text": ");}catch(Interrupte",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "068b2885ef706eda4de212703c647063",
    "text": "xception e) { // TODO Auto-generated catch block",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "aec1ed1d1a54348df48e0fcc2876d50c",
    "text": "= new DesignExample(); System.out.printf(″Example 2: First=[%s],Instance[%s]″,",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "d62c1750c5107d0c0742a30a0f9c1ee9",
    "text": "public DesignExample() { instanceDate = LocalDateTime.now();",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "b15447ee4429b686b22cf6a3c4da3c55",
    "text": "LocalDateTime getInstanceDate() { return instanceDate;",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "e3b0c44298fc1c149afbf4c8996fb924",
    "text": "",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 145
    }
  },
  {
    "element_id": "811576705cd712e988322055b9013002",
    "text": "Exhibit 2.5.3-11 (07-10-2020) Java Programming Abstract Properties",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 146
    }
  },
  {
    "element_id": "ca2c21d366b5212379733c2724903a38",
    "text": "Abstract Properties abstract public class Shape { abstract public double getArea(); }class Circle extends Shape { private int radius = 0; public Circle() { }public Circle(int radius) { this.radius = radius; }public void setRadius(int radius) { this.radius = radius; }public int getRadius() { return radius; } @Override public double getArea() { return Math.pow(radius, 2) * Math.PI; }} class Rectangle extends Shape { private int width = 0; private int height = 0; public Rectangle() { }public Rectangle(int width, int height) { this.width = width; this.height = height; }@Override public double getArea() { return width * height; }}class Square extends Rectangle { public Square() { }public Square(int size) { super(size, size); }}",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 146
    }
  },
  {
    "element_id": "ac5c1f5a57e1078c968548579a7aa291",
    "text": "Square extends Rectangle { public Square() {",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 146
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "850b7afaa0ea7011e9e16ac1e8af380e",
    "text": "Exhibit 2.5.3-12 (07-10-2020) Java Programming Example of Event Design",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "ce8bba72ef49f8d9772264177c83946c",
    "text": "Propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "598cf61fbfdba13a932112125e25b9e5",
    "text": "vent extends Even",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "6985bd7524378627a03cd502983a623a",
    "text": "bject { private static ﬁnal long seria",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "e960d3f86dffd17b84e2f0b31f420d2f",
    "text": "ersio",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "753be317f6896ebf697a72f2a880e818",
    "text": "ID = private String name = ″″; public Propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "90f01e130202f46c23b9e2ab3062e837",
    "text": "vent(Object source, String name) { super(source);this.name=name;}publi",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "688e9152ac1381ff1ded4e43339e3f21",
    "text": "tringge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "19749ff3cc1cc3d4ea5db55142e25a2c",
    "text": "ame() { return name; } }interface Propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "41347e302b66f7501bf42fe00d3bf2eb",
    "text": "istener extends Even",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "b930e827b607865a11ba64748a6c7f2f",
    "text": "istener { void propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "0379f81bb468a6f38691079b6d54c344",
    "text": "hanged(Propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "33e3c06da9a1dd1af538d071777077f8",
    "text": "vent e); }public class Listene",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "beb565ec2624b212146f737765fe1d3d",
    "text": "xample { private Listener listeners = new Arra",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "b5843aa35bb368544463f1307e60af53",
    "text": "ist<>(); private String prop = ″″; public void ad",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "0a860ec9987e65716f0b3785860f6a94",
    "text": "istener(Propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "185ecfe420de0341a506ddedb52f2f3a",
    "text": "istener listener) { listeners.add(listener); } public void remov",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "0a860ec9987e65716f0b3785860f6a94",
    "text": "istener(Propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "a72ce45b0141dbebf916908ddd1eb387",
    "text": "istener listener) { listeners.add(listener); } public String ge",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "adfe1f028e656f93056dd5ba640ea026",
    "text": "roperty() { return prop; void se",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "22a9f4b8d820ffe3c5c3db8c47e568a1",
    "text": "roperty(String value) { prop = value; rais",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "89a548b39a78b19ba4850f2a9f18d353",
    "text": "ropert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "ad557159bd6133e88c2d47a5dcc01842",
    "text": "hange",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "0e3c0eecb3507da7e171e7fa31c82198",
    "text": "vent(new Propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "eaac0b54f145efb50e549f8c725a091f",
    "text": "vent(this, }protected void for (Propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "3b92fbc37473200541f37638b713692a",
    "text": "istener listener : listeners) { listener.propert",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "36d216939bb3bec6d28ce5670971c662",
    "text": "hanged(e); } }",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 147
    }
  },
  {
    "element_id": "48b82e7f2371a7822875a6286337ff95",
    "text": "Exhibit 2.5.3-13 (07-10-2020) Java Programming Thread example",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 148
    }
  },
  {
    "element_id": "7953c0695fcb8ecb6c82261973e85713",
    "text": "public void run() {",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 148
    }
  },
  {
    "element_id": "021fb596db81e6d02bf3d2586ee3981f",
    "text": "{",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 148
    }
  },
  {
    "element_id": "f3e1ad4b03b5f379f470e1daab0da003",
    "text": "and efficiency have been achieved!″);",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 148
    }
  },
  {
    "element_id": "2511d5a038f66c45bd2c6b0dca4e2b3b",
    "text": "synchronized void notif",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 148
    }
  },
  {
    "element_id": "b6ea43abc273acb592454b769154d6f9",
    "text": "oy() { joy = true; System.out.println(″Reached joy!″);",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 148
    }
  },
  {
    "element_id": "c3ba58c1678c1bae3e1ebfbd29e2000f",
    "text": "Joy and efficiency have been achieved!",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 148
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 149
    }
  },
  {
    "element_id": "dc7009ed7a25c20d7a5231ca1dc777ce",
    "text": "Java Programming Single Words used for Capitalization Purposes",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 149
    }
  },
  {
    "element_id": "5bc03e7efdb6d4609024ed6e989f1631",
    "text": "Pascal Camel Not BitFlag bitFlag Bitﬂag Callback callback CallBack Canceled canceled Cancelled DoNot doNot Don’t Email email EMail Endpoint endpoint Endpoint FileName ﬁleName Filename Gridline gridline GridLine Hashtable hashtable HashTable Id id ID Indexes indexes Indices LogOff logOff LogOut LogOn logOn LogIn Metadata metaData MetaData, Multipanel multipanel MultiPanel Multiview multiview MultiView Namespace namespace NameSpace Ok ok OK Pi pi PI Placeholder placeholder PlaceHolder SignIn signIn SignOn SignOut signOut SignOff UserName userName Username WhiteSpace whiteSpace Whitespace Writable writable Writable",
    "type": "UncategorizedText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 149
    }
  },
  {
    "element_id": "275c83de786cd409de9f28d818ea6eb7",
    "text": "Exhibit 2.5.3-15 (07-10-2020) C Programming Source Code Template",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 150
    }
  },
  {
    "element_id": "ffd292345264e9f134d4dc15d4d4cc61",
    "text": "C Programming Source Code Template /************************************************************************ // // Internal Revenue Service // For Official Use Only // // Filename: Filename // Description: Describe the purpose of the objects in the ﬁle, // followed, in the case of source ﬁles, by a list // of functions whose deﬁnitions appear in the ﬁle // Related Files: An identiﬁcation of any routines or ﬁles that // this ﬁle may require // Restrictions/ Known special cases where the ﬁle may not work // Problems: // // Date Modiﬁed: YYYY/MM/DD // Version id: Revision: // Author: <First Name> <Last Name> // Locked by: $Locker$ // // Revision History: Will be provided by ClearCase",
    "type": "UncategorizedText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 150
    }
  },
  {
    "element_id": "e3b0c44298fc1c149afbf4c8996fb924",
    "text": "",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 150
    }
  },
  {
    "element_id": "cec7b051f6f841a31d1f6cd1dcea9e39",
    "text": "// Revision History: Will be provided by ClearCase",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 150
    }
  },
  {
    "element_id": "e3b0c44298fc1c149afbf4c8996fb924",
    "text": "",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 150
    }
  },
  {
    "element_id": "faebfeb645d685175472f1f39d483ef3",
    "text": "and Source Code Standards 2.5.3 page 135",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 151
    }
  },
  {
    "element_id": "e7d78b14698f2fa06c7a57450863e79a",
    "text": "C Programming Header Files number",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 151
    }
  },
  {
    "element_id": "103e4430331f7192382518a5c73de999",
    "text": "/*h********************************************************** #include <stdlib.h> #include <string.h> #include <limits.h> #include <unistd.h> #include <signal.h> #include <errno.h> /* User include ﬁles */ #include “archive.h” #include “acdbApi.h” #include “scdbApi.h” C Programming Example of Deﬁnes number 1 C Programming - Deﬁnes number 1 * D E F I N E S * /*d********************************************************** ************************************************************/ /* Debug ﬂags */",
    "type": "UncategorizedText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 151
    }
  },
  {
    "element_id": "e3b0c44298fc1c149afbf4c8996fb924",
    "text": "",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 151
    }
  },
  {
    "element_id": "c53a48a402305769831bd21fb2cc1ad2",
    "text": "C Programming - Deﬁnes number 1 * D E F I N E S * /*d********************************************************** ************************************************************/ /* Debug ﬂags */ #ifdef FOR_MAC #deﬁne SIGALRM 14 #end-if /* Constants */ #deﬁne SUCCESS 0 #ifndef TRUE #deﬁne TRUE 1 #deﬁne FALSE 0 #end-if /* Macros */ #deﬁne MIN(a,b) ((a)<(b)) ? (a) : (b)",
    "type": "UncategorizedText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 151
    }
  },
  {
    "element_id": "1e9ef64c086a7f1df0d66e9d61570086",
    "text": "Exhibit 2.5.3-15 (Cont. 2) (07-10-2020) C Programming Source Code Template",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 152
    }
  },
  {
    "element_id": "8b214998f7ad3cb58468f2590fd23236",
    "text": "C Programming example of TypeDef Number 1",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 152
    }
  },
  {
    "element_id": "70e1eb74a15806502b49a21ff19b045c",
    "text": "C Programming - TypeDef Number 1 /*t********************************************************** * T Y P E D E F * ************************************************************/ typedef struct ECT_REG_HEADER_S { char *pFirstEntry; /* ptr to 1st registry entry */ int NumEntries; /* number of entries */ } ECT_REG_HEADER_T;",
    "type": "UncategorizedText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 152
    }
  },
  {
    "element_id": "2544dfaa3198732ab6a5f3ac303c2556",
    "text": "* T Y P E D E F * ************************************************************/ typedef struct ECT_REG_HEADER_S { char *pFirstEntry; /* ptr to 1st registry entry */ int NumEntries; /* number of entries */ } ECT_REG_HEADER_T; C Programming example of Enums number 1 * E N U M S * /*e********************************************************** ************************************************************/ enum TAX_FORMS_E { F_1040 = 0, F_1065, F_941_ELF, F_941_OLF }; C Programming Example of Deﬁnitions number 1 * DEFINITIONS* /*g********************************************************** ************************************************************/ /* External data */ extern char *pStr; /* comments */ extern int GlobalExt; /* comments */ /* Non-static data */",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 152
    }
  },
  {
    "element_id": "d1f7554edff340fcbe1d4fe6ee0312f5",
    "text": "C Programming example of Enums number 1",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 152
    }
  },
  {
    "element_id": "ffe56c1678aac12fa10397cb9c4f5234",
    "text": "* E N U M S * /*e********************************************************** ************************************************************/ enum TAX_FORMS_E { F_1040 = 0, F_1065, F_941_ELF, F_941_OLF };",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 152
    }
  },
  {
    "element_id": "89f01833e97514794e1e285a38d38623",
    "text": "C Programming Example of Deﬁnitions number 1",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 152
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 153
    }
  },
  {
    "element_id": "8d00c7edf5b457d0c41e0ec1707b1f88",
    "text": "* DEFINITIONS* int DataGl; /* comments */ char *pStr; /* comments */ /* Static data */ static int DataGl; /* comments */ static char *pStr; /* comments */",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 153
    }
  },
  {
    "element_id": "f057c9d0f21000413562ab5f1aca0b7f",
    "text": "Exhibit 2.5.3-15 (Cont. 4) (07-10-2020) C Programming Source Code Template",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 154
    }
  },
  {
    "element_id": "9c94eb58fff8453381aec7113bec7f0c",
    "text": "Example of C Function with Multiple Routines",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 154
    }
  },
  {
    "element_id": "34bf8564541a561a1547890f30badb1b",
    "text": "* Function Name: FunctionName2 /*f****************************************************************** * Description: A description of the major task(s) performed by * routine. It should be a series of one or more * simple verb/object statements * Input parameters : par1 - description * par2_P - description * Output parameters: *par2_p - description ********************************************************************/ void FunctionName2(int par1, char *par2_p) { /* LOCAL VARIABLES and CONSTANTS*/ /* FUNCTION BODY */ }",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 154
    }
  },
  {
    "element_id": "26e5ab916482d2b548a5e2815ef290a3",
    "text": "* Function Name: FunctionName2",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 154
    }
  },
  {
    "element_id": "2d034a48f5386b69558e1e8be5a8c295",
    "text": "* Description: A description of the major task(s) * routine. It should be a series of one or more * simple verb/object statements * Input parameters : par",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 154
    }
  },
  {
    "element_id": "0ae74a8bc37c1c0eb9621c17a0b3e63c",
    "text": "- description * par",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 154
    }
  },
  {
    "element_id": "4bc306a69edbe5ed729c4551e740633d",
    "text": "_P - description * Output parameters: *par",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 154
    }
  },
  {
    "element_id": "e49a171bc3e5fc96a40779ca070698dc",
    "text": "_p - description",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 154
    }
  },
  {
    "element_id": "e3b0c44298fc1c149afbf4c8996fb924",
    "text": "",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 154
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 155
    }
  },
  {
    "element_id": "71ae2ef153f11420aa6720035788e2c3",
    "text": "Description: Describe the purpose of the objects in the ﬁle,",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 155
    }
  },
  {
    "element_id": "2ab4f805d102933349724264869887b6",
    "text": "// Filename: Filename",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 155
    }
  },
  {
    "element_id": "6a3972fff05e6ec851661a050d6a4297",
    "text": "// Related Files: An identiﬁcation of any routines or ﬁles that",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 155
    }
  },
  {
    "element_id": "b665c381529cd8b02586c06a4f6fc8a0",
    "text": "// Restrictions/ Known special cases where the ﬁle may not work",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 155
    }
  },
  {
    "element_id": "03e1f3f40f5932cef97bd9c281523193",
    "text": "// Author: Author: <First Name> <Last Name>",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 155
    }
  },
  {
    "element_id": "cec7b051f6f841a31d1f6cd1dcea9e39",
    "text": "// Revision History: Will be provided by ClearCase",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 155
    }
  },
  {
    "element_id": "e3b0c44298fc1c149afbf4c8996fb924",
    "text": "",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 155
    }
  },
  {
    "element_id": "e3b0c44298fc1c149afbf4c8996fb924",
    "text": "",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 155
    }
  },
  {
    "element_id": "e3b0c44298fc1c149afbf4c8996fb924",
    "text": "",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 155
    }
  },
  {
    "element_id": "baeb39a6b12d9181c57abdd694e9203a",
    "text": "2.5.3-16 (Cont. 1) (07-10-2020) Language Header File Template * D E F I N E S Template * #ifdef FOR_MAC #deﬁne SIGALRM 14 #END-IF /* Constants / #deﬁne SUCCESS 0 #ifndef TRUE #deﬁne TRUE 1 #deﬁne FALSE 0 #END-IF /* Macros */ #deﬁne MIN(a,b) ((a)<(b)) ? (a) : (b) C Programing Example of TypeDefs number 2 * T Y P E D E F S Template * /************************************************************ ************************************************************/ typedef struct ECT_REG_HEADER_S { char *pFirstEntry; /* ptr to 1st registry entry */ int NumEntries; /* number of entries */ } ECT_REG_HEADER_T; C Programming Example of Enums number 2 * E N U M S * /************************************************************ ************************************************************/ enum TAX_FORMS_E { F_1040 = 0,",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 156
    }
  },
  {
    "element_id": "0df03f8f06d5bf1e4a335f999d3bb701",
    "text": "and Source Code Standards 2.5.3 page",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 157
    }
  },
  {
    "element_id": "036ffd902be5f6b8369cf865913803ea",
    "text": "* E N U M S * F_1065, F_941_ELF, F_941_OLF }; C Programming Example of Functions * F U N C T I O N P R O T O T Y P E S (alphabetized) * ********************************************************************/ #END-IF /* TEMPLATE */ void FunctionName2(int par1, char *par2_p); int FunctionName1(int par1, char *par2_p);",
    "type": "FigureCaption",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 157
    }
  },
  {
    "element_id": "e3b0c44298fc1c149afbf4c8996fb924",
    "text": "",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 157
    }
  },
  {
    "element_id": "4ccf5799cb1a02e804663974b35b4782",
    "text": "Acronyms and Terms Acronym Terms ACIO Assistant Chief Information Officer ALC Assembler Language Code ASCII American Standard Code for Information Interchange CICS Customer Information Control System COBOL Common Business-Oriented Language ECL Executive Control Language EOF End of File GAO Government Accountability Office IBM International Business Machines Corporation ISBN International Standard Book Number HLASM High-Level Assembler HTML Hypertext Markup Language IC Internal Controls IT Information Technology ISO International Organization for Standardization JCL Job Control Language JNI Java Native Interface JRE Java Runtime Environment JSON Java Script Object Notation JVM Java Virtual Machine LDAP Lightweight Directory Access Protocol MASM Meta-Assembler OMB Office of Management and Budget QA Quality Assurance OS Operating System OWASP Open Web Application Security Project PNG Portable Network Graphics UNIYSIS UNIVAC Systems Corporation XML Extensible Markup Language",
    "type": "UncategorizedText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 158
    }
  },
  {
    "element_id": "c3eec86614b0edf1be47612301bbb874",
    "text": "and Source Code Standards 2.5.3 page 143",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 159
    }
  },
  {
    "element_id": "f18a204d10d39033717f4389df8709d8",
    "text": "Exhibit 2.5.3-18 (07-10-2020) Terms and Deﬁnitions",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 159
    }
  },
  {
    "element_id": "0612c80da71314d4750fa46ab35a5527",
    "text": "Management controls that provide reasonable assurance that obligations and cost are in compliance with applicable laws, funds, property; and other assets are safeguarded against waste, loss, unauthorized use or misappropriation.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 159
    }
  },
  {
    "element_id": "bd767d870198ee011eb5abb5bd256755",
    "text": "The International Organization for Standardization is an in- dependent, non-governmental organization, the members of which are the standards organizations of the 164[1] member countries. It is the world’s largest developer of voluntary in- ternational standards and facilitates world trade by providing common standards between nations. Over twenty thousand standards have been set covering everything from manufac- tured products and technology to food safety, agriculture",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 159
    }
  },
  {
    "element_id": "eaa0dd7e96249831ca3f9bc7d23db991",
    "text": "Programming framework that enables Java code running in a Java Virtual Machine to call and be called by a native ap- plication (programs speciﬁc to a hardware and operating system platform and libraries written in other languages C, C++ and Assembler.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 159
    }
  },
  {
    "element_id": "aa7ef81393ccf7f383e57f2a9a402989",
    "text": "Exhibit 2.5.3-18 (Cont. 1) (07-10-2020) Terms and Deﬁnitions",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 160
    }
  },
  {
    "element_id": "fe663175f9f6072e98c552f28430f006",
    "text": "The Open Web Application Security Project is a nonproﬁt organization focused on improving the security of software. OWASP provides impartial information about AppSec to viduals, corporations, universities, government agencies, and other organizations worldwide.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 160
    }
  },
  {
    "element_id": "3a42a6d3634fe992a395f902f56f66fb",
    "text": "A set of instructions that operate on input data and convert it to output.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 160
    }
  },
  {
    "element_id": "8708f499f77af0c95c1ca0c3cf36e2c6",
    "text": "Altering an application’s source code without changing its external behavior. The purpose of code refactoring is to improve some of the nonfunctional properties of the code, e.g. readability, complexity, maintainability, and extensibility A language for transforming XML document into other XML documents or other formats such as HTML for web pages, plain text or XSL Formatting Objects which may be converted to other formats, such as PDF, Pos",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 160
    }
  },
  {
    "element_id": "068b6ffb61d9ea9911fd78aa53e789bf",
    "text": "cript and PNG supported in modern web browsers. A",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 160
    }
  },
  {
    "element_id": "bdee116c45ed18c0f4822a18f2c4bb21",
    "text": "-bit operating system for IBM mainframes, produced by",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 160
    }
  },
  {
    "element_id": "10eb97504b5cc856a2bc018c3109238c",
    "text": "A 64-bit operating system for IBM mainframes, produced by IBM, and derived by successor OS/390.",
    "type": "NarrativeText",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 160
    }
  },
  {
    "element_id": "f1028f0e3284704ee657f13e0ab01d4e",
    "text": "and Source Code Standards 2.5.3",
    "type": "Title",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "a2c3214848496be82a1dddfc93790279",
    "text": "IBM Systems Standard Manual Version",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "47e5fc9b3e634cd09d7b6cc2a40b022c",
    "text": "BCPA",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "fef3450cd9a8f8ae80355d996720d926",
    "text": "ALC Student Guide IRS Messages and Codes Edition",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "5504f9681f80236352ba3516cbfaecd4",
    "text": "High Level Assembler for z/OS & z/VM & z/VSE Language Reference High Level Assembler for z/OS & z/VM & z/VSE Programmer’s Guide UNISYS Clea",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "270c77f670789492c66712167d0a577a",
    "text": "ath OS",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "84170a0c6194d17708e305f8edc2edbf",
    "text": "Meta-Assembler (MASM) Programming UNISYS Clea",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "270c77f670789492c66712167d0a577a",
    "text": "ath OS",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "9e833aed53853eac2fc7ea9730b8f08c",
    "text": "Executive Control Language (ECL) and Assembler H Version",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "c196a0884ef47e21fb10fbca35151725",
    "text": "Application Programming Guide , SC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "81a12c1f9266d3b3176fd5dae87c91c0",
    "text": "Assembler H Version",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "2950847fa0ced41a640086717242065f",
    "text": "Application Programming Language Reference, MVS JCL Reference, GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "b9a243264a5bafae2eb374d1bccf81a3",
    "text": "MVS/XA Linkage Editor & Loader User’s Guide, GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "5f16bda18401c3e611d18b0878f1ebf4",
    "text": "MVS/XA Message Library: System Messages Vol",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "b08dccc9666e2769b42956bc9c4b9a56",
    "text": ", GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "5f16bda18401c3e611d18b0878f1ebf4",
    "text": "MVS/XA Message Library: System Messages Vol",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "b08dccc9666e2769b42956bc9c4b9a56",
    "text": ", GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "98eab4d04d07af6fe612fde26b833cc8",
    "text": "MVS/XA Message Library: System Codes, GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "b1dc89222237b98c99b122fa3eb2cafe",
    "text": "MVS/XA Data Administration, GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "7e7535551397ab88b0a343090dd9de96",
    "text": "MVS/XA Data Administration: Utilities, GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "ca7dddd34bc35721ee0c93d3c8c2a075",
    "text": "MVS/XA Data Administration: Macro Instruction Reference, GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "a62ed6e96a752ac45983ac7fa29d69e1",
    "text": "MVS/XA Utilities Messages , GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "b6e01ff2e867cbc8e00c9e84430af3b2",
    "text": "MVS/XA TSO Terminal User’s Guide, GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "6e36732d7ea789c6a96109d721c2acbf",
    "text": "TSO/E TSO Command Language Reference, GC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "777ebb38f259036d82c8b1cd6591bcd2",
    "text": "ISPF/PDF Program Reference, SC",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  },
  {
    "element_id": "3973e022e93220f9212c18d0d0c543ae",
    "text": "-",
    "type": "ListItem",
    "metadata": {
      "filename": "../zips/irm02-005-003--2020-07-10.pdf",
      "page_number": 161
    }
  }
]